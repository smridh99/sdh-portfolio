{"version":3,"file":"static/js/111.2b1f302c.chunk.js","mappings":";+GAEA,IAAIA,EAASC,OAAOC,UAAUC,eAC1BC,EAAQH,OAAOC,UAAUG,SACzBC,EAAiBL,OAAOK,eACxBC,EAAON,OAAOO,yBAEdC,EAAU,SAAiBC,GAC9B,MAA6B,oBAAlBC,MAAMF,QACTE,MAAMF,QAAQC,GAGK,mBAApBN,EAAMQ,KAAKF,EACnB,EAEIG,EAAgB,SAAuBC,GAC1C,IAAKA,GAA2B,oBAApBV,EAAMQ,KAAKE,GACtB,OAAO,EAGR,IASIC,EATAC,EAAoBhB,EAAOY,KAAKE,EAAK,eACrCG,EAAmBH,EAAII,aAAeJ,EAAII,YAAYhB,WAAaF,EAAOY,KAAKE,EAAII,YAAYhB,UAAW,iBAE9G,GAAIY,EAAII,cAAgBF,IAAsBC,EAC7C,OAAO,EAMR,IAAKF,KAAOD,GAEZ,MAAsB,qBAARC,GAAuBf,EAAOY,KAAKE,EAAKC,EACvD,EAGII,EAAc,SAAqBC,EAAQC,GAC1Cf,GAAmC,cAAjBe,EAAQC,KAC7BhB,EAAec,EAAQC,EAAQC,KAAM,CACpCC,YAAY,EACZC,cAAc,EACdC,MAAOJ,EAAQK,SACfC,UAAU,IAGXP,EAAOC,EAAQC,MAAQD,EAAQK,QAEjC,EAGIE,EAAc,SAAqBd,EAAKQ,GAC3C,GAAa,cAATA,EAAsB,CACzB,IAAKtB,EAAOY,KAAKE,EAAKQ,GACrB,OACM,GAAIf,EAGV,OAAOA,EAAKO,EAAKQ,GAAMG,KAEzB,CAEA,OAAOX,EAAIQ,EACZ,EAEAO,EAAOC,QAAU,SAASC,IACzB,IAAIV,EAASC,EAAMU,EAAKC,EAAMC,EAAaC,EACvCf,EAASgB,UAAU,GACnBC,EAAI,EACJC,EAASF,UAAUE,OACnBC,GAAO,EAaX,IAVsB,mBAAXnB,IACVmB,EAAOnB,EACPA,EAASgB,UAAU,IAAM,CAAC,EAE1BC,EAAI,IAES,MAAVjB,GAAqC,kBAAXA,GAAyC,oBAAXA,KAC3DA,EAAS,CAAC,GAGJiB,EAAIC,IAAUD,EAGpB,GAAe,OAFfhB,EAAUe,UAAUC,IAInB,IAAKf,KAAQD,EACZW,EAAMJ,EAAYR,EAAQE,GAItBF,KAHJa,EAAOL,EAAYP,EAASC,MAKvBiB,GAAQN,IAASpB,EAAcoB,KAAUC,EAAczB,EAAQwB,MAC9DC,GACHA,GAAc,EACdC,EAAQH,GAAOvB,EAAQuB,GAAOA,EAAM,IAEpCG,EAAQH,GAAOnB,EAAcmB,GAAOA,EAAM,CAAC,EAI5Cb,EAAYC,EAAQ,CAAEE,KAAMA,EAAMI,SAAUK,EAAOQ,EAAMJ,EAAOF,MAGtC,qBAATA,GACjBd,EAAYC,EAAQ,CAAEE,KAAMA,EAAMI,SAAUO,KAQjD,OAAOb,CACR,oBClHA,IAAIoB,EAAgB,kCAEhBC,EAAgB,MAChBC,EAAmB,OAGnBC,EAAiB,yCACjBC,EAAc,QACdC,EAAc,uDACdC,EAAkB,UAGlBC,EAAa,aAMbC,EAAe,GA8OnB,SAASC,EAAKC,GACZ,OAAOA,EAAMA,EAAIC,QAAQJ,EAAYC,GAAgBA,CACvD,CAnOAnB,EAAOC,QAAU,SAASsB,EAAO/B,GAC/B,GAAqB,kBAAV+B,EACT,MAAM,IAAIC,UAAU,mCAGtB,IAAKD,EAAO,MAAO,GAEnB/B,EAAUA,GAAW,CAAC,EAKtB,IAAIiC,EAAS,EACTC,EAAS,EAOb,SAASC,EAAeN,GACtB,IAAIO,EAAQP,EAAIQ,MAAMjB,GAClBgB,IAAOH,GAAUG,EAAMnB,QAC3B,IAAID,EAAIa,EAAIS,YAvCF,MAwCVJ,GAAUlB,EAAIa,EAAIZ,OAASD,EAAIkB,EAASL,EAAIZ,MAC9C,CAOA,SAASsB,IACP,IAAIC,EAAQ,CAAEC,KAAMR,EAAQC,OAAQA,GACpC,OAAO,SAASQ,GAGd,OAFAA,EAAKH,SAAW,IAAII,EAASH,GAC7BI,IACOF,CACT,CACF,CAUA,SAASC,EAASH,GAChBK,KAAKL,MAAQA,EACbK,KAAKC,IAAM,CAAEL,KAAMR,EAAQC,OAAQA,GACnCW,KAAKE,OAAS/C,EAAQ+C,MACxB,CAKAJ,EAAS9D,UAAUmE,QAAUjB,EAE7B,IAAIkB,EAAa,GAQjB,SAASC,EAAMC,GACb,IAAIC,EAAM,IAAIC,MACZrD,EAAQ+C,OAAS,IAAMd,EAAS,IAAMC,EAAS,KAAOiB,GAQxD,GANAC,EAAIE,OAASH,EACbC,EAAIG,SAAWvD,EAAQ+C,OACvBK,EAAIX,KAAOR,EACXmB,EAAIlB,OAASA,EACbkB,EAAIL,OAAShB,GAET/B,EAAQwD,OAGV,MAAMJ,EAFNH,EAAWQ,KAAKL,EAIpB,CAQA,SAASf,EAAMqB,GACb,IAAIC,EAAID,EAAGE,KAAK7B,GAChB,GAAK4B,EAAL,CACA,IAAI9B,EAAM8B,EAAE,GAGZ,OAFAxB,EAAeN,GACfE,EAAQA,EAAM8B,MAAMhC,EAAIZ,QACjB0C,CAJO,CAKhB,CAKA,SAASf,IACPP,EAAMhB,EACR,CAQA,SAASyC,EAASC,GAChB,IAAIC,EAEJ,IADAD,EAAQA,GAAS,GACTC,EAAIC,MACA,IAAND,GACFD,EAAMN,KAAKO,GAGf,OAAOD,CACT,CAQA,SAASE,IACP,IAAIC,EAAM3B,IACV,GAnJgB,KAmJKR,EAAMoC,OAAO,IAlJvB,KAkJyCpC,EAAMoC,OAAO,GAAjE,CAGA,IADA,IAAInD,EAAI,EAENW,GAAgBI,EAAMoC,OAAOnD,KAtJpB,KAuJIe,EAAMoC,OAAOnD,IAxJZ,KAwJmCe,EAAMoC,OAAOnD,EAAI,OAEhEA,EAIJ,GAFAA,GAAK,EAEDW,IAAiBI,EAAMoC,OAAOnD,EAAI,GACpC,OAAOkC,EAAM,0BAGf,IAAIrB,EAAME,EAAM8B,MAAM,EAAG7C,EAAI,GAM7B,OALAkB,GAAU,EACVC,EAAeN,GACfE,EAAQA,EAAM8B,MAAM7C,GACpBkB,GAAU,EAEHgC,EAAI,CACTE,KApKa,UAqKbH,QAASpC,GAvBgE,CAyB7E,CAQA,SAASwC,IACP,IAAIH,EAAM3B,IAGN+B,EAAOjC,EAAMf,GACjB,GAAKgD,EAAL,CAIA,GAHAL,KAGK5B,EAAMd,GAAc,OAAO2B,EAAM,wBAGtC,IAAIqB,EAAMlC,EAAMb,GAEZgD,EAAMN,EAAI,CACZE,KA7LiB,cA8LjBK,SAAU7C,EAAK0C,EAAK,GAAGxC,QAAQX,EAAeQ,IAC9CvB,MAAOmE,EACH3C,EAAK2C,EAAI,GAAGzC,QAAQX,EAAeQ,IACnCA,IAMN,OAFAU,EAAMZ,GAEC+C,CApBU,CAqBnB,CAyBA,OADA5B,IAjBA,WACE,IAKI8B,EALAC,EAAQ,GAMZ,IAJAb,EAASa,GAIDD,EAAOL,MACA,IAATK,IACFC,EAAMlB,KAAKiB,GACXZ,EAASa,IAIb,OAAOA,CACT,CAGOC,EACT,oBCnPApE,EAAOC,QAAU,SAAmBhB,GAClC,OAAc,MAAPA,GAAkC,MAAnBA,EAAII,aACY,oBAA7BJ,EAAII,YAAYgF,UAA2BpF,EAAII,YAAYgF,SAASpF,EAC/E,iCCNA,IAAIqF,EAAc,CAAC,EAsCnB,SAASC,EAAOC,EAAQC,EAASC,GAC/B,IAAIlE,EAAGmE,EAAGC,EAAMC,EAAUC,EACtBC,EAAS,GAcb,IAZuB,kBAAZN,IAETC,EAAeD,EACfA,EAAUF,EAAOS,cAGQ,qBAAhBN,IACTA,GAAc,GAGhBI,EA9CF,SAAwBL,GACtB,IAAIjE,EAAGyE,EAAIH,EAAQR,EAAYG,GAC/B,GAAIK,EAAS,OAAOA,EAIpB,IAFAA,EAAQR,EAAYG,GAAW,GAE1BjE,EAAI,EAAGA,EAAI,IAAKA,IACnByE,EAAKC,OAAOC,aAAa3E,GAErB,cAAc4E,KAAKH,GAErBH,EAAM7B,KAAKgC,GAEXH,EAAM7B,KAAK,KAAO,IAAMzC,EAAEhC,SAAS,IAAI6G,eAAehC,OAAO,IAIjE,IAAK7C,EAAI,EAAGA,EAAIiE,EAAQhE,OAAQD,IAC9BsE,EAAML,EAAQa,WAAW9E,IAAMiE,EAAQjE,GAGzC,OAAOsE,CACT,CAwBUS,CAAed,GAElBjE,EAAI,EAAGmE,EAAIH,EAAO/D,OAAQD,EAAImE,EAAGnE,IAGpC,GAFAoE,EAAOJ,EAAOc,WAAW9E,GAErBkE,GAAwB,KAATE,GAAyBpE,EAAI,EAAImE,GAC9C,iBAAiBS,KAAKZ,EAAOnB,MAAM7C,EAAI,EAAGA,EAAI,IAChDuE,GAAUP,EAAOnB,MAAM7C,EAAGA,EAAI,GAC9BA,GAAK,OAKT,GAAIoE,EAAO,IACTG,GAAUD,EAAMF,QAIlB,GAAIA,GAAQ,OAAUA,GAAQ,MAA9B,CACE,GAAIA,GAAQ,OAAUA,GAAQ,OAAUpE,EAAI,EAAImE,IAC9CE,EAAWL,EAAOc,WAAW9E,EAAI,KACjB,OAAUqE,GAAY,MAAQ,CAC5CE,GAAUS,mBAAmBhB,EAAOhE,GAAKgE,EAAOhE,EAAI,IACpDA,IACA,QACF,CAEFuE,GAAU,WAEZ,MAEAA,GAAUS,mBAAmBhB,EAAOhE,IAGtC,OAAOuE,CACT,CAEAR,EAAOS,aAAiB,uBACxBT,EAAOkB,eAAiB,YAGxBzF,EAAOC,QAAUsE,mCCzFJ,IAAImB,EAAE,MAAMlC,EAAE,MAAMmC,EAAE,MAAMC,EAAE,MAAMC,EAAE,MAAMC,EAAE,MAAMC,EAAE,MAAMC,EAAE,MAAMrB,EAAE,MAAMxB,EAAE,MAAM8C,EAAE,MAAMC,EAAE,MAAMC,EAAE,MAAMC,EAAE,MAAMC,EAAE,MAAMC,EAAE,MAAMC,EAAE,MACnJ,GAAG,oBAAoBC,QAAQA,OAAOC,IAAI,CAAC,IAAIC,EAAEF,OAAOC,IAAIf,EAAEgB,EAAE,iBAAiBlD,EAAEkD,EAAE,gBAAgBf,EAAEe,EAAE,kBAAkBd,EAAEc,EAAE,qBAAqBb,EAAEa,EAAE,kBAAkBZ,EAAEY,EAAE,kBAAkBX,EAAEW,EAAE,iBAAiBV,EAAEU,EAAE,qBAAqB/B,EAAE+B,EAAE,kBAAkBvD,EAAEuD,EAAE,uBAAuBT,EAAES,EAAE,cAAcR,EAAEQ,EAAE,cAAcP,EAAEO,EAAE,eAAeN,EAAEM,EAAE,sBAAsBL,EAAEK,EAAE,qBAAqBJ,EAAEI,EAAE,0BAA0BH,EAAEG,EAAE,sBAAsB,CACjc,SAASC,EAAEC,GAAG,GAAG,kBAAkBA,GAAG,OAAOA,EAAE,CAAC,IAAIC,EAAED,EAAEE,SAAS,OAAOD,GAAG,KAAKnB,EAAE,OAAOkB,EAAEA,EAAEhD,MAAQ,KAAK+B,EAAE,KAAKE,EAAE,KAAKD,EAAE,KAAKjB,EAAE,KAAKxB,EAAE,OAAOyD,EAAE,QAAQ,OAAOA,EAAEA,GAAGA,EAAEE,UAAY,KAAKf,EAAE,KAAKC,EAAE,KAAKE,EAAE,KAAKD,EAAE,KAAKH,EAAE,OAAOc,EAAE,QAAQ,OAAOC,GAAG,KAAKrD,EAAE,OAAOqD,EAAE,CAAC,CAAC,IAAIE,EAAEjB,EAAEkB,EAAEtB,EAAEuB,EAAEjB,EAAEkB,EAAEvB,EAAEwB,EAAEjB,EAAEkB,EAAEnB,EAAEoB,EAAE7D,EAAE8D,EAAEzB,EAAE0B,EAAE3B,EAAE4B,EAAE7C,EAAE1E,EAAQwH,gBAAgB1B,EAAE9F,EAAQyH,gBAAgBX,EAAE9G,EAAQ0H,QAAQX,EAAE/G,EAAQ2H,WAAWX,EAAEhH,EAAQ4H,SAASX,EAAEjH,EAAQ6H,KAAKX,EAAElH,EAAQ8H,KAAKX,EAAEnH,EAAQ+H,OAAOX,EAAEpH,EAAQgI,SAASX,EAAErH,EAAQiI,WAAWX,EAClftH,EAAQkI,SAASX,EAAEvH,EAAQmI,YAAY,WAAW,OAAM,CAAE,EAAEnI,EAAQoI,iBAAiB,WAAW,OAAM,CAAE,EAAEpI,EAAQqI,kBAAkB,SAAS1B,GAAG,OAAOD,EAAEC,KAAKb,CAAC,EAAE9F,EAAQsI,kBAAkB,SAAS3B,GAAG,OAAOD,EAAEC,KAAKd,CAAC,EAAE7F,EAAQuI,UAAU,SAAS5B,GAAG,MAAM,kBAAkBA,GAAG,OAAOA,GAAGA,EAAEE,WAAWpB,CAAC,EAAEzF,EAAQwI,aAAa,SAAS7B,GAAG,OAAOD,EAAEC,KAAKZ,CAAC,EAAE/F,EAAQyI,WAAW,SAAS9B,GAAG,OAAOD,EAAEC,KAAKjB,CAAC,EAAE1F,EAAQ0I,OAAO,SAAS/B,GAAG,OAAOD,EAAEC,KAAKV,CAAC,EAAEjG,EAAQ2I,OAAO,SAAShC,GAAG,OAAOD,EAAEC,KAAKX,CAAC,EACnehG,EAAQ4I,SAAS,SAASjC,GAAG,OAAOD,EAAEC,KAAKpD,CAAC,EAAEvD,EAAQ6I,WAAW,SAASlC,GAAG,OAAOD,EAAEC,KAAKf,CAAC,EAAE5F,EAAQ8I,aAAa,SAASnC,GAAG,OAAOD,EAAEC,KAAKhB,CAAC,EAAE3F,EAAQ+I,WAAW,SAASpC,GAAG,OAAOD,EAAEC,KAAKjC,CAAC,EAAE1E,EAAQgJ,mBAAmB,SAASrC,GAAG,MAAM,kBAAkBA,GAAG,oBAAoBA,GAAGA,IAAIjB,GAAGiB,IAAIf,GAAGe,IAAIN,GAAGM,IAAIhB,GAAGgB,IAAIjC,GAAGiC,IAAIzD,GAAGyD,IAAIL,GAAG,kBAAkBK,GAAG,OAAOA,IAAIA,EAAEE,WAAWZ,GAAGU,EAAEE,WAAWb,GAAGW,EAAEE,WAAWhB,GAAGc,EAAEE,WAAWf,GAAGa,EAAEE,WAAWd,GAAGY,EAAEE,WAAWT,GAAGO,EAAEE,WAAWX,GAAGS,EAAE,KAAKR,EAAQ,EACzenG,EAAQiJ,OAAOvC,qCCVb3G,EAAOC,QAAU,EAAjBD,4BCHF,IAAImJ,EAAQC,EAAQ,MAyCpBpJ,EAAOC,QA5BP,SAAuBsB,EAAO8H,GAC5B,IAKIxF,EALAyF,EAAS,KACb,IAAK/H,GAA0B,kBAAVA,EACnB,OAAO+H,EAST,IALA,IAEIrF,EACArE,EAHAwE,EAAe+E,EAAM5H,GACrBgI,EAAkC,oBAAbF,EAIhB7I,EAAI,EAAGgJ,EAAMpF,EAAa3D,OAAQD,EAAIgJ,EAAKhJ,IAElDyD,GADAJ,EAAcO,EAAa5D,IACJyD,SACvBrE,EAAQiE,EAAYjE,MAEhB2J,EACFF,EAASpF,EAAUrE,EAAOiE,GACjBjE,IACT0J,IAAWA,EAAS,CAAC,GACrBA,EAAOrF,GAAYrE,GAIvB,OAAO0J,CACT,4vBCrCe,SAASG,EAAWC,EAAQC,EAAMC,GAa/C,OAXEH,GADE,EAAAI,EAAA,KACWC,QAAQC,UAAUC,OAElB,SAAoBN,EAAQC,EAAMC,GAC7C,IAAIhD,EAAI,CAAC,MACTA,EAAE3D,KAAKgH,MAAMrD,EAAG+C,GAChB,IACIO,EAAW,IADGC,SAASH,KAAKC,MAAMP,EAAQ9C,IAG9C,OADIgD,IAAO,EAAAQ,EAAA,GAAeF,EAAUN,EAAMvL,WACnC6L,CACT,EAEKT,EAAWQ,MAAM,KAAM1J,UAChC,CCZe,SAAS8J,EAAiBT,GACvC,IAAIU,EAAwB,oBAARC,IAAqB,IAAIA,SAAQC,EAuBrD,OAtBAH,EAAmB,SAA0BT,GAC3C,GAAc,OAAVA,ICPkCa,EDOEb,GCNsB,IAAzDO,SAAS3L,SAASO,KAAK0L,GAAIC,QAAQ,kBDMQ,OAAOd,ECP5C,IAA2Ba,EDQtC,GAAqB,oBAAVb,EACT,MAAM,IAAIpI,UAAU,sDAEtB,GAAsB,qBAAX8I,EAAwB,CACjC,GAAIA,EAAOK,IAAIf,GAAQ,OAAOU,EAAOM,IAAIhB,GACzCU,EAAOO,IAAIjB,EAAOkB,EACpB,CACA,SAASA,IACP,OAAO,EAAUlB,EAAOrJ,WAAW,EAAAwK,EAAA,GAAe1I,MAAMhD,YAC1D,CASA,OARAyL,EAAQzM,UAAYD,OAAO4M,OAAOpB,EAAMvL,UAAW,CACjDgB,YAAa,CACXO,MAAOkL,EACPpL,YAAY,EACZI,UAAU,EACVH,cAAc,MAGX,EAAAyK,EAAA,GAAeU,EAASlB,EACjC,EACOS,EAAiBT,EAC1B,CEOO,SAASqB,EAAkBrL,GAEhC,OAAKA,GAA0B,kBAAVA,EAKjB,aAAcA,GAAS,SAAUA,EAC5BmC,EAASnC,EAAMmC,UAIpB,UAAWnC,GAAS,QAASA,EACxBmC,EAASnC,GAId,SAAUA,GAAS,WAAYA,EAC1BsL,EAAMtL,GAIR,GAnBE,EAoBX,CAMA,SAASsL,EAAMA,GACb,OAAOC,EAAMD,GAASA,EAAMjJ,MAAQ,IAAMkJ,EAAMD,GAASA,EAAMxJ,OACjE,CAMA,SAASK,EAAS2B,GAChB,OAAOwH,EAAMxH,GAAOA,EAAI1B,OAAS,IAAMkJ,EAAMxH,GAAOA,EAAIpB,IAC1D,CAMA,SAAS6I,EAAMvL,GACb,OAAOA,GAA0B,kBAAVA,EAAqBA,EAAQ,CACtD,CCvEO,IAAMwL,EAAY,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAmBvB,SAAAA,EAAYtI,EAAQ2I,EAAOC,GAAQ,IAAAC,GAAAC,EAAAA,EAAAA,GAAA,KAAAR,GAEjC,IAAMS,EAAQ,CAAC,KAAM,MAEjB9J,EAAW,CAEbC,MAAO,CAACC,KAAM,KAAMP,OAAQ,MAE5BY,IAAK,CAACL,KAAM,KAAMP,OAAQ,OAU5B,GAPAiK,EAAAJ,EAAAxM,KAAA,MAEqB,kBAAV0M,IACTC,EAASD,EACTA,OAAQjB,GAGY,kBAAXkB,EAAqB,CAC9B,IAAMP,EAAQO,EAAOhB,QAAQ,MAEd,IAAXS,EACFU,EAAM,GAAKH,GAEXG,EAAM,GAAKH,EAAOrI,MAAM,EAAG8H,GAC3BU,EAAM,GAAKH,EAAOrI,MAAM8H,EAAQ,GAEpC,CAwJA,OAtJIM,IAEE,SAAUA,GAAS,aAAcA,EAC/BA,EAAM1J,WAGRA,EAAW0J,EAAM1J,UAIZ,UAAW0J,GAAS,QAASA,EAGpC1J,EAAW0J,GAGJ,SAAUA,GAAS,WAAYA,KAEtC1J,EAASC,MAAQyJ,IAWrBE,EAAKlM,KAAOwL,EAAkBQ,IAAU,MAOxCE,EAAKG,QAA4B,kBAAXhJ,EAAsBA,EAAOgJ,QAAUhJ,EAU7D6I,EAAKI,MAAQ,GAES,kBAAXjJ,GAAuBA,EAAOiJ,QACvCJ,EAAKI,MAAQjJ,EAAOiJ,OAUtBJ,EAAK7I,OAAS6I,EAAKG,QAYnBH,EAAKK,MAOLL,EAAK1J,KAAOF,EAASC,MAAMC,KAO3B0J,EAAKjK,OAASK,EAASC,MAAMN,OAO7BiK,EAAK5J,SAAWA,EAOhB4J,EAAKpJ,OAASsJ,EAAM,GAOpBF,EAAKM,OAASJ,EAAM,GAOpBF,EAAKO,KAYLP,EAAKQ,OAOLR,EAAKS,SAULT,EAAKU,IAOLV,EAAKW,KACLX,CACF,CAAC,OAAAY,EAAAA,EAAAA,GAAAnB,EAAA,CAvMsB,CAuMtBf,EAvM+BxH,QA0MlCuI,EAAa/M,UAAU6N,KAAO,GAC9Bd,EAAa/M,UAAUoB,KAAO,GAC9B2L,EAAa/M,UAAUyE,OAAS,GAChCsI,EAAa/M,UAAUyN,QAAU,GACjCV,EAAa/M,UAAU0N,MAAQ,GAC/BX,EAAa/M,UAAU2N,MAAQ,KAC/BZ,EAAa/M,UAAUqD,OAAS,KAChC0J,EAAa/M,UAAU4D,KAAO,KAC9BmJ,EAAa/M,UAAUkE,OAAS,KAChC6I,EAAa/M,UAAU4N,OAAS,KAChCb,EAAa/M,UAAU0D,SAAW,KC7K3B,IAAMyK,EAAO,CAACC,SAcrB,SAAkBD,EAAME,GACtB,QAAYlC,IAARkC,GAAoC,kBAARA,EAC9B,MAAM,IAAIlL,UAAU,mCAGtBmL,EAAWH,GACX,IAIII,EAJA5K,EAAQ,EACRM,GAAO,EACP6I,EAAQqB,EAAK/L,OAIjB,QAAY+J,IAARkC,GAAoC,IAAfA,EAAIjM,QAAgBiM,EAAIjM,OAAS+L,EAAK/L,OAAQ,CACrE,KAAO0K,KACL,GAA+B,KAA3BqB,EAAKlH,WAAW6F,IAGlB,GAAIyB,EAAc,CAChB5K,EAAQmJ,EAAQ,EAChB,KACF,OACS7I,EAAM,IAGfsK,GAAe,EACftK,EAAM6I,EAAQ,GAIlB,OAAO7I,EAAM,EAAI,GAAKkK,EAAKnJ,MAAMrB,EAAOM,EAC1C,CAEA,GAAIoK,IAAQF,EACV,MAAO,GAGT,IAAIK,GAAoB,EACpBC,EAAWJ,EAAIjM,OAAS,EAE5B,KAAO0K,KACL,GAA+B,KAA3BqB,EAAKlH,WAAW6F,IAGlB,GAAIyB,EAAc,CAChB5K,EAAQmJ,EAAQ,EAChB,KACF,OAEI0B,EAAmB,IAGrBD,GAAe,EACfC,EAAmB1B,EAAQ,GAGzB2B,GAAY,IAEVN,EAAKlH,WAAW6F,KAAWuB,EAAIpH,WAAWwH,KACxCA,EAAW,IAGbxK,EAAM6I,IAKR2B,GAAY,EACZxK,EAAMuK,IAMV7K,IAAUM,EACZA,EAAMuK,EACGvK,EAAM,IACfA,EAAMkK,EAAK/L,QAGb,OAAO+L,EAAKnJ,MAAMrB,EAAOM,EAC3B,EA9F+ByK,QAwG/B,SAAiBP,GAGf,GAFAG,EAAWH,GAES,IAAhBA,EAAK/L,OACP,MAAO,IAGT,IAGIuM,EAHA1K,GAAO,EACP6I,EAAQqB,EAAK/L,OAKjB,OAAS0K,GACP,GAA+B,KAA3BqB,EAAKlH,WAAW6F,IAClB,GAAI6B,EAAgB,CAClB1K,EAAM6I,EACN,KACF,OACU6B,IAEVA,GAAiB,GAIrB,OAAO1K,EAAM,EACc,KAAvBkK,EAAKlH,WAAW,GACd,IACA,IACM,IAARhD,GAAoC,KAAvBkK,EAAKlH,WAAW,GAC7B,KACAkH,EAAKnJ,MAAM,EAAGf,EACpB,EAxIwC2K,QAkJxC,SAAiBT,GACfG,EAAWH,GAEX,IASIQ,EATA7B,EAAQqB,EAAK/L,OAEb6B,GAAO,EACP4K,EAAY,EACZC,GAAY,EAGZC,EAAc,EAIlB,KAAOjC,KAAS,CACd,IAAMvG,EAAO4H,EAAKlH,WAAW6F,GAE7B,GAAa,KAATvG,EAWAtC,EAAM,IAGR0K,GAAiB,EACjB1K,EAAM6I,EAAQ,GAGH,KAATvG,EAEEuI,EAAW,EACbA,EAAWhC,EACc,IAAhBiC,IACTA,EAAc,GAEPD,GAAY,IAGrBC,GAAe,QAzBf,GAAIJ,EAAgB,CAClBE,EAAY/B,EAAQ,EACpB,KACF,CAwBJ,CAEA,GACEgC,EAAW,GACX7K,EAAM,GAEU,IAAhB8K,GAEiB,IAAhBA,GAAqBD,IAAa7K,EAAM,GAAK6K,IAAaD,EAAY,EAEvE,MAAO,GAGT,OAAOV,EAAKnJ,MAAM8J,EAAU7K,EAC9B,EA/MiD+K,KAyNjD,WAGY,IAFV,IAEIC,EAFAnC,GAAS,EAEHoC,EAAAhN,UAAAE,OAHK+M,EAAQ,IAAA1O,MAAAyO,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAARD,EAAQC,GAAAlN,UAAAkN,GAKvB,OAAStC,EAAQqC,EAAS/M,QACxBkM,EAAWa,EAASrC,IAEhBqC,EAASrC,KACXmC,OACa9C,IAAX8C,EAAuBE,EAASrC,GAASmC,EAAS,IAAME,EAASrC,IAIvE,YAAkBX,IAAX8C,EAAuB,IAahC,SAAmBd,GACjBG,EAAWH,GAEX,IAAMkB,EAAkC,KAAvBlB,EAAKlH,WAAW,GAG7B1F,EAuBN,SAAyB4M,EAAMmB,GAC7B,IAMI/I,EAEAgJ,EARA7I,EAAS,GACT8I,EAAoB,EACpBC,GAAa,EACbC,EAAO,EACP5C,GAAS,EAMb,OAASA,GAASqB,EAAK/L,QAAQ,CAC7B,GAAI0K,EAAQqB,EAAK/L,OACfmE,EAAO4H,EAAKlH,WAAW6F,OAClB,IAAa,KAATvG,EACT,MAEAA,EAAO,EACT,CAEA,GAAa,KAATA,EAAuB,CACzB,GAAIkJ,IAAc3C,EAAQ,GAAc,IAAT4C,QAExB,GAAID,IAAc3C,EAAQ,GAAc,IAAT4C,EAAY,CAChD,GACEhJ,EAAOtE,OAAS,GACM,IAAtBoN,GACyC,KAAzC9I,EAAOO,WAAWP,EAAOtE,OAAS,IACO,KAAzCsE,EAAOO,WAAWP,EAAOtE,OAAS,GAElC,GAAIsE,EAAOtE,OAAS,GAGlB,IAFAmN,EAAiB7I,EAAOjD,YAAY,QAEbiD,EAAOtE,OAAS,EAAG,CACpCmN,EAAiB,GACnB7I,EAAS,GACT8I,EAAoB,GAGpBA,GADA9I,EAASA,EAAO1B,MAAM,EAAGuK,IACEnN,OAAS,EAAIsE,EAAOjD,YAAY,KAG7DgM,EAAY3C,EACZ4C,EAAO,EACP,QACF,OACK,GAAIhJ,EAAOtE,OAAS,EAAG,CAC5BsE,EAAS,GACT8I,EAAoB,EACpBC,EAAY3C,EACZ4C,EAAO,EACP,QACF,CAGEJ,IACF5I,EAASA,EAAOtE,OAAS,EAAIsE,EAAS,MAAQ,KAC9C8I,EAAoB,EAExB,MACM9I,EAAOtE,OAAS,EAClBsE,GAAU,IAAMyH,EAAKnJ,MAAMyK,EAAY,EAAG3C,GAE1CpG,EAASyH,EAAKnJ,MAAMyK,EAAY,EAAG3C,GAGrC0C,EAAoB1C,EAAQ2C,EAAY,EAG1CA,EAAY3C,EACZ4C,EAAO,CACT,MAAoB,KAATnJ,GAAyBmJ,GAAQ,EAC1CA,IAEAA,GAAQ,CAEZ,CAEA,OAAOhJ,CACT,CAtGciJ,CAAgBxB,GAAOkB,GAEd,IAAjB9N,EAAMa,QAAiBiN,IACzB9N,EAAQ,KAGNA,EAAMa,OAAS,GAA0C,KAArC+L,EAAKlH,WAAWkH,EAAK/L,OAAS,KACpDb,GAAS,KAGX,OAAO8N,EAAW,IAAM9N,EAAQA,CAClC,CA9BsCqO,CAAUX,EAChD,EAxOuDY,IAAK,KA0W5D,SAASvB,EAAWH,GAClB,GAAoB,kBAATA,EACT,MAAM,IAAIhL,UACR,mCAAqC2M,KAAKC,UAAU5B,GAG1D,CChaO,IAAM6B,EAAO,CAACC,IAErB,WACE,MAAO,GACT,GCoBO,SAASC,EAAMC,GACpB,OACoB,OAAlBA,GACyB,kBAAlBA,GAEPA,EAAcC,MAEdD,EAAc9C,MAElB,CCxBO,SAASgD,EAAUlC,GACxB,GAAoB,kBAATA,EACTA,EAAO,IAAImC,IAAInC,QACV,IAAK+B,EAAM/B,GAAO,CAEvB,IAAM9J,EAAQ,IAAIlB,UAChB,+EACEgL,EACA,KAGJ,MADA9J,EAAMkC,KAAO,uBACPlC,CACR,CAEA,GAAsB,UAAlB8J,EAAKoC,SAAsB,CAE7B,IAAMlM,EAAQ,IAAIlB,UAAU,kCAE5B,MADAkB,EAAMkC,KAAO,yBACPlC,CACR,CAEA,OAWF,SAA6B2J,GAC3B,GAAqB,KAAjBA,EAAIwC,SAAiB,CAEvB,IAAMnM,EAAQ,IAAIlB,UAChB,wDAGF,MADAkB,EAAMkC,KAAO,4BACPlC,CACR,CAEA,IAAMoM,EAAWzC,EAAIyC,SACjB3D,GAAS,EAEb,OAASA,EAAQ2D,EAASrO,QACxB,GACiC,KAA/BqO,EAASxJ,WAAW6F,IACe,KAAnC2D,EAASxJ,WAAW6F,EAAQ,GAC5B,CACA,IAAM4D,EAAQD,EAASxJ,WAAW6F,EAAQ,GAC1C,GAAc,KAAV4D,GAAoC,MAAVA,EAAyB,CAErD,IAAMrM,EAAQ,IAAIlB,UAChB,uDAGF,MADAkB,EAAMkC,KAAO,4BACPlC,CACR,CACF,CAGF,OAAOsM,mBAAmBF,EAC5B,CA1CSG,CAAoBzC,EAC7B,CCgEA,IAAM0C,EAAQ,CAAC,UAAW,OAAQ,WAAY,OAAQ,UAAW,WAEpDC,EAAK,WAuBhB,SAAAA,EAAYvP,GAEV,IAAIJ,GAFaoM,EAAAA,EAAAA,GAAA,KAAAuD,GAOf3P,EAHGI,EAEuB,kBAAVA,GAoYtB,SAAgBA,GACd,OAAOwP,EAAWxP,EACpB,CAtY4CyP,CAAOzP,GACnC,CAACA,MAAAA,GACF2O,EAAM3O,GACL,CAAC4M,KAAM5M,GAEPA,EANA,CAAC,EAiBbyC,KAAKiN,KAAO,CAAC,EAObjN,KAAKkN,SAAW,GAShBlN,KAAKmN,QAAU,GAOfnN,KAAKiM,IAAMD,EAAKC,MAQhBjM,KAAKzC,MAYLyC,KAAKoN,OAULpN,KAAK0C,OAUL1C,KAAKqN,IAML,IAFA,IAkBI5L,EAlBAqH,GAAS,IAEJA,EAAQ+D,EAAMzO,QAAQ,CAC7B,IAAMqD,EAAOoL,EAAM/D,GAKjBrH,KAAQtE,QACUgL,IAAlBhL,EAAQsE,IACU,OAAlBtE,EAAQsE,KAGRzB,KAAKyB,GAAiB,YAATA,GAAkB6L,EAAAA,EAAAA,GAAOnQ,EAAQsE,IAAStE,EAAQsE,GAEnE,CAMA,IAAKA,KAAQtE,EAEN0P,EAAMU,SAAS9L,KAElBzB,KAAKyB,GAAQtE,EAAQsE,GAG3B,CAwNC,OAtNDyI,EAAAA,EAAAA,GAAA4C,EAAA,EAAAjQ,IAAA,OAAA0L,IAKA,WACE,OAAOvI,KAAKmN,QAAQnN,KAAKmN,QAAQ/O,OAAS,EAC5C,EAEAoK,IASA,SAAS2B,GACH+B,EAAM/B,KACRA,EAAOkC,EAAUlC,IAGnBqD,EAAerD,EAAM,QAEjBnK,KAAKmK,OAASA,GAChBnK,KAAKmN,QAAQvM,KAAKuJ,EAEtB,GAEA,CAAAtN,IAAA,UAAA0L,IAGA,WACE,MAA4B,kBAAdvI,KAAKmK,KAAoBA,EAAKO,QAAQ1K,KAAKmK,WAAQhC,CACnE,EAEAK,IAKA,SAAYkC,GACVJ,EAAWtK,KAAKoK,SAAU,WAC1BpK,KAAKmK,KAAOA,EAAKa,KAAKN,GAAW,GAAI1K,KAAKoK,SAC5C,GAEA,CAAAvN,IAAA,WAAA0L,IAGA,WACE,MAA4B,kBAAdvI,KAAKmK,KAAoBA,EAAKC,SAASpK,KAAKmK,WAAQhC,CACpE,EAEAK,IAOA,SAAa4B,GACXoD,EAAepD,EAAU,YACzBqD,EAAWrD,EAAU,YACrBpK,KAAKmK,KAAOA,EAAKa,KAAKhL,KAAK0K,SAAW,GAAIN,EAC5C,GAEA,CAAAvN,IAAA,UAAA0L,IAGA,WACE,MAA4B,kBAAdvI,KAAKmK,KAAoBA,EAAKS,QAAQ5K,KAAKmK,WAAQhC,CACnE,EAEAK,IAOA,SAAYoC,GAIV,GAHA6C,EAAW7C,EAAS,WACpBN,EAAWtK,KAAK0K,QAAS,WAErBE,EAAS,CACX,GAA8B,KAA1BA,EAAQ3H,WAAW,GACrB,MAAM,IAAIzC,MAAM,iCAGlB,GAAIoK,EAAQ2C,SAAS,IAAK,GACxB,MAAM,IAAI/M,MAAM,yCAEpB,CAEAR,KAAKmK,KAAOA,EAAKa,KAAKhL,KAAK0K,QAAS1K,KAAK0N,MAAQ9C,GAAW,IAC9D,GAEA,CAAA/N,IAAA,OAAA0L,IAGA,WACE,MAA4B,kBAAdvI,KAAKmK,KACfA,EAAKC,SAASpK,KAAKmK,KAAMnK,KAAK4K,cAC9BzC,CACN,EAEAK,IAOA,SAASkF,GACPF,EAAeE,EAAM,QACrBD,EAAWC,EAAM,QACjB1N,KAAKmK,KAAOA,EAAKa,KAAKhL,KAAK0K,SAAW,GAAIgD,GAAQ1N,KAAK4K,SAAW,IACpE,GAEA,CAAA/N,IAAA,WAAAU,MASA,SAASoQ,GACP,OAAQ3N,KAAKzC,OAAS,IAAIpB,SAASwR,QAAYxF,EACjD,GAEA,CAAAtL,IAAA,UAAAU,MAgBA,SAAQkD,EAAQ2I,EAAOC,GACrB,IAAMI,EAAU,IAAIV,EAAatI,EAAQ2I,EAAOC,GAWhD,OATIrJ,KAAKmK,OACPV,EAAQrM,KAAO4C,KAAKmK,KAAO,IAAMV,EAAQrM,KACzCqM,EAAQI,KAAO7J,KAAKmK,MAGtBV,EAAQE,OAAQ,EAEhB3J,KAAKkN,SAAStM,KAAK6I,GAEZA,CACT,GAEA,CAAA5M,IAAA,OAAAU,MAgBA,SAAKkD,EAAQ2I,EAAOC,GAClB,IAAMI,EAAUzJ,KAAKyJ,QAAQhJ,EAAQ2I,EAAOC,GAI5C,OAFAI,EAAQE,MAAQ,KAETF,CACT,GAEA,CAAA5M,IAAA,OAAAU,MAoBA,SAAKkD,EAAQ2I,EAAOC,GAClB,IAAMI,EAAUzJ,KAAKyJ,QAAQhJ,EAAQ2I,EAAOC,GAI5C,MAFAI,EAAQE,OAAQ,EAEVF,CACR,KAACqD,CAAA,CApWe,GAiXlB,SAASW,EAAWG,EAAMxQ,GACxB,GAAIwQ,GAAQA,EAAKL,SAASpD,EAAK0B,KAC7B,MAAM,IAAIrL,MACR,IAAMpD,EAAO,uCAAyC+M,EAAK0B,IAAM,IAGvE,CAYA,SAAS2B,EAAeI,EAAMxQ,GAC5B,IAAKwQ,EACH,MAAM,IAAIpN,MAAM,IAAMpD,EAAO,oBAEjC,CAYA,SAASkN,EAAWH,EAAM/M,GACxB,IAAK+M,EACH,MAAM,IAAI3J,MAAM,YAAcpD,EAAO,kCAEzC,4CCvfe,SAASyQ,EAASrR,GAC/B,OAAO,EAAAsR,EAAA,GAAetR,KAAQ,EAAAuR,EAAA,GAAgBvR,KAAQ,EAAAwR,EAAA,GAA2BxR,KAAQ,EAAAyR,EAAA,IAC3F,CCCO,SAASC,EAAK7N,GACnB,GAAIA,EACF,MAAMA,CAEV,eCXe,SAAS1D,EAAcY,GACrC,GAAqB,kBAAVA,GAAgC,OAAVA,EAChC,OAAO,EAGR,IAAMvB,EAAYD,OAAO2M,eAAenL,GACxC,OAAsB,OAAdvB,GAAsBA,IAAcD,OAAOC,WAAkD,OAArCD,OAAO2M,eAAe1M,OAA0BmI,OAAOgK,eAAe5Q,MAAY4G,OAAO6C,YAAYzJ,EACtK,CCUO,SAAS6Q,IAEd,IAAMC,EAAM,GAENC,EAAW,CAACC,IAKlB,WAAwB,QAAArD,EAAAhN,UAAAE,OAARoQ,EAAM,IAAA/R,MAAAyO,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAANoD,EAAMpD,GAAAlN,UAAAkN,GACpB,IAAIqD,GAAmB,EAEjBC,EAAWF,EAAOG,MAExB,GAAwB,oBAAbD,EACT,MAAM,IAAIvP,UAAU,2CAA6CuP,IAWnE,SAASE,EAAKvO,GACZ,IAAM+H,EAAKiG,IAAMI,GACb3F,GAAS,EAEb,GAAIzI,EACFqO,EAASrO,OADX,CAKA,QAAAwO,EAAA3Q,UAAAE,OATsB6I,EAAM,IAAAxK,MAAAoS,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAN7H,EAAM6H,EAAA,GAAA5Q,UAAA4Q,GAU5B,OAAShG,EAAQ0F,EAAOpQ,QACA,OAAlB6I,EAAO6B,SAAqCX,IAAlBlB,EAAO6B,KACnC7B,EAAO6B,GAAS0F,EAAO1F,IAK3B0F,EAASvH,EAGLmB,EA6BH,SAAc2G,EAAYL,GAE/B,IAAIM,EAEJ,OAAOC,EAQP,SAASA,IAAuB,QAAAC,EAAAhR,UAAAE,OAAZ+Q,EAAU,IAAA1S,MAAAyS,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAVD,EAAUC,GAAAlR,UAAAkR,GAC5B,IAEI1M,EAFE2M,EAAoBN,EAAW3Q,OAAS+Q,EAAW/Q,OAIrDiR,GACFF,EAAWvO,KAAK0O,GAGlB,IACE5M,EAASqM,EAAWnH,MAAM5H,KAAMmP,EAClC,CAAE,MAAO9O,GAOP,GAAIgP,GAAqBL,EACvB,MAPsC3O,EAUxC,OAAOiP,EAViCjP,EAW1C,CAEKgP,IACC3M,aAAkB6M,QACpB7M,EAAO8M,KAAKA,EAAMF,GACT5M,aAAkBlC,MAC3B8O,EAAK5M,GAEL8M,EAAK9M,GAGX,CAMA,SAAS4M,EAAKjP,GACZ,IAAK2O,EAAQ,CACXA,GAAS,EAAI,QAAAS,EAAAvR,UAAAE,OAFO6I,EAAM,IAAAxK,MAAAgT,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAANzI,EAAMyI,EAAA,GAAAxR,UAAAwR,GAG1BhB,EAAQ9G,WAAC,EAAD,CAACvH,GAAKsP,OAAK1I,GACrB,CACF,CAOA,SAASuI,EAAKjS,GACZ+R,EAAK,KAAM/R,EACb,CACF,CA/FQqS,CAAKxH,EAAIwG,GAAKhH,WAAC,EAAGX,GAElByH,EAAQ9G,WAAC,EAAD,CAAC,MAAI+H,OAAK1I,GAhBpB,CAkBF,GAjCIW,WAAC,EAAD,CAAC,MAAI+H,QAAArC,EAAAA,EAAAA,GAAKkB,IAkChB,EAhDuBqB,IAmDvB,SAAaC,GACX,GAA0B,oBAAfA,EACT,MAAM,IAAI3Q,UACR,+CAAiD2Q,GAKrD,OADAzB,EAAIzN,KAAKkP,GACFxB,CACT,GA1DA,OAAOA,CA2DT,CCtDO,IAAMyB,EAQb,SAASC,IACP,IAMIC,EANEC,EAAe9B,IAEf+B,EAAY,GAEdC,EAAY,CAAC,EAGbC,GAAe,EA2BnB,OAvBAC,EAAUrD,KA6CV,SAAcpQ,EAAKU,GACjB,GAAmB,kBAARV,EAET,OAAyB,IAArBqB,UAAUE,QACZmS,EAAe,OAAQN,GACvBG,EAAUvT,GAAOU,EACV+S,GAIDE,EAAI9T,KAAK0T,EAAWvT,IAAQuT,EAAUvT,IAAS,KAIzD,GAAIA,EAGF,OAFA0T,EAAe,OAAQN,GACvBG,EAAYvT,EACLyT,EAIT,OAAOF,CACT,EAlEAE,EAAUG,YAAStI,EACnBmI,EAAUI,cAAWvI,EAGrBmI,EAAUK,OAiEV,WACE,GAAIV,EACF,OAAOK,EAGT,OAASD,EAAcF,EAAU/R,QAAQ,CACvC,IAAAwS,EAAA/C,EAA+BsC,EAAUE,IAAlCQ,EAAQD,EAAA,GAAKzT,EAAOyT,EAAA5P,MAAA,GAE3B,IAAmB,IAAf7D,EAAQ,GAAZ,EAImB,IAAfA,EAAQ,KACVA,EAAQ,QAAKgL,GAIf,IAAM2I,EAAcD,EAASnU,KAAIkL,MAAbiJ,EAAQ,CAAMP,GAASX,QAAArC,EAAAA,EAAAA,GAAKnQ,KAErB,oBAAhB2T,GACTZ,EAAaL,IAAIiB,EAVnB,CAYF,CAKA,OAHAb,GAAS,EACTI,EAAcU,OAAOC,kBAEdV,CACT,EA1FAA,EAAUH,UAAYA,EAEtBG,EAAUT,IA+FV,SAAatS,GAAmB,QAAA2N,EAAAhN,UAAAE,OAATjB,EAAO,IAAAV,MAAAyO,EAAA,EAAAA,EAAA,KAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAPjO,EAAOiO,EAAA,GAAAlN,UAAAkN,GAE5B,IAAI6F,EAIJ,GAFAV,EAAe,MAAON,GAER,OAAV1S,QAA4B4K,IAAV5K,QAEf,GAAqB,oBAAVA,EAChB2T,EAAStJ,WAAC,EAAD,CAACrK,GAAKoS,OAAKxS,QACf,IAAqB,kBAAVI,EAOhB,MAAM,IAAI4B,UAAU,+BAAiC5B,EAAQ,KANzDd,MAAMF,QAAQgB,GAChB4T,EAAQ5T,GAER6T,EAAU7T,EAId,CAEI0T,IACFb,EAAUa,SAAWlV,OAAOsV,OAAOjB,EAAUa,UAAY,CAAC,EAAGA,IAG/D,OAAOX,EAMP,SAASgB,EAAI/T,GACX,GAAqB,oBAAVA,EACT2T,EAAU3T,OACL,IAAqB,kBAAVA,EAQhB,MAAM,IAAI4B,UAAU,+BAAiC5B,EAAQ,KAP7D,GAAId,MAAMF,QAAQgB,GAAQ,CACxB,IAAAgU,EAAA1D,EAA6BtQ,GAAtBiU,EAAMD,EAAA,GAAKpU,EAAOoU,EAAAvQ,MAAA,GACzBkQ,EAAStJ,WAAC,EAAD,CAAC4J,GAAM7B,QAAArC,EAAAA,EAAAA,GAAKnQ,IACvB,MACEiU,EAAU7T,EAId,CACF,CAMA,SAAS6T,EAAU1O,GACjByO,EAAQzO,EAAO+O,SAEX/O,EAAOuO,WACTA,EAAWlV,OAAOsV,OAAOJ,GAAY,CAAC,EAAGvO,EAAOuO,UAEpD,CAMA,SAASE,EAAQM,GACf,IAAI3I,GAAS,EAEb,GAAgB,OAAZ2I,QAAgCtJ,IAAZsJ,OAEjB,KAAIhV,MAAMF,QAAQkV,GAMvB,MAAM,IAAItS,UAAU,oCAAsCsS,EAAU,KALpE,OAAS3I,EAAQ2I,EAAQrT,QAAQ,CAE/BkT,EADcG,EAAQ3I,GAExB,CAGF,CACF,CAOA,SAASoI,EAAUM,EAAQjU,GAKzB,IAJA,IAEImU,EAFA5I,GAAS,IAIJA,EAAQqH,EAAU/R,QACzB,GAAI+R,EAAUrH,GAAO,KAAO0I,EAAQ,CAClCE,EAAQvB,EAAUrH,GAClB,KACF,CAGE4I,GACEC,EAAWD,EAAM,KAAOC,EAAWpU,KACrCA,EAAQM,GAAO,EAAM6T,EAAM,GAAInU,IAGjCmU,EAAM,GAAKnU,GAGX4S,EAAUvP,KAAInE,MAAAT,UAAAgF,MAAAtE,KAAKwB,WAEvB,CACF,EApMAoS,EAAUxJ,MAuMV,SAAe8K,GACbtB,EAAUK,SACV,IAAM9G,EAAOgI,EAAMD,GACbnB,EAASH,EAAUG,OAGzB,GAFAqB,EAAa,QAASrB,GAElBsB,EAAQtB,EAAQ,SAElB,OAAO,IAAIA,EAAO5N,OAAOgH,GAAOA,GAAM/C,QAIxC,OAAO2J,EAAO5N,OAAOgH,GAAOA,EAC9B,EAnNAyG,EAAUvE,UAsNV,SAAmBlM,EAAM+R,GACvBtB,EAAUK,SACV,IAAM9G,EAAOgI,EAAMD,GACblB,EAAWJ,EAAUI,SAI3B,GAHAsB,EAAe,YAAatB,GAC5BuB,EAAWpS,GAEPkS,EAAQrB,EAAU,WAEpB,OAAO,IAAIA,EAAS7Q,EAAMgK,GAAMqI,UAIlC,OAAOxB,EAAS7Q,EAAMgK,EACxB,EAlOAyG,EAAU/B,IA0OV,SAAa1O,EAAM+R,EAAKlD,GACtBuD,EAAWpS,GACXyQ,EAAUK,SAELjC,GAA2B,oBAARkD,IACtBlD,EAAWkD,EACXA,OAAMzJ,GAGR,IAAKuG,EACH,OAAO,IAAIa,QAAQ4C,GAUrB,SAASA,EAASC,EAASC,GAUzB,SAAS/C,EAAKjP,EAAOiS,EAAMzI,GACzByI,EAAOA,GAAQzS,EACXQ,EACFgS,EAAOhS,GACE+R,EACTA,EAAQE,GAGR5D,EAAS,KAAM4D,EAAMzI,EAEzB,CAlBAqG,EAAa3B,IAAI1O,EAAMgS,EAAMD,GAAMtC,EAmBrC,CA5BA6C,EAAS,KAAMzD,EA6BjB,EAnRA4B,EAAUiC,QAsRV,SAAiB1S,EAAMgK,GAErB,IAAInH,EAEA8P,EAOJ,OALAlC,EAAU/B,IAAI1O,EAAMgK,EAAMyF,GAE1BmD,EAAW,UAAW,MAAOD,GAGtB9P,EAOP,SAAS4M,EAAKjP,EAAOiS,GACnBpE,EAAK7N,GACLqC,EAAS4P,EACTE,GAAW,CACb,CACF,EA3SAlC,EAAUoC,QAkTV,SAAiBd,EAAKlD,GAKpB,GAJA4B,EAAUK,SACVmB,EAAa,UAAWxB,EAAUG,QAClCuB,EAAe,UAAW1B,EAAUI,WAE/BhC,EACH,OAAO,IAAIa,QAAQ4C,GAUrB,SAASA,EAASC,EAASC,GACzB,IAAMxI,EAAOgI,EAAMD,GA0BnB,SAAStC,EAAKjP,EAAOwJ,GACfxJ,IAAUwJ,EACZwI,EAAOhS,GACE+R,EACTA,EAAQvI,GAGR6E,EAAS,KAAM7E,EAEnB,CAjCAyG,EAAU/B,IAAI+B,EAAUxJ,MAAM+C,GAAOA,GAAM,SAACxJ,EAAOiS,EAAMzI,GACvD,IAAIxJ,GAAUiS,GAASzI,EAEhB,CAEL,IAAMnH,EAAS4N,EAAUvE,UAAUuG,EAAMzI,QAE1B1B,IAAXzF,GAAmC,OAAXA,IAsMZ,kBADInF,EAnMYmF,IAoMJV,EAASzE,GAnMnCsM,EAAKtM,MAAQmF,EAEbmH,EAAKnH,OAASA,GAGhB4M,EAAKjP,EAAOwJ,EACd,MAdEyF,EAAKjP,GA0Mf,IAA8B9C,CA3LxB,GAiBF,CA5CA4U,EAAS,KAAMzD,EA6CjB,EAvWA4B,EAAUqC,YA0WV,SAAqBf,GAEnB,IAAIY,EAEJlC,EAAUK,SACVmB,EAAa,cAAexB,EAAUG,QACtCuB,EAAe,cAAe1B,EAAUI,UAExC,IAAM7G,EAAOgI,EAAMD,GAMnB,OAJAtB,EAAUoC,QAAQ7I,EAAMyF,GAExBmD,EAAW,cAAe,UAAWD,GAE9B3I,EAMP,SAASyF,EAAKjP,GACZmS,GAAW,EACXtE,EAAK7N,EACP,CACF,EA/XOiQ,EAIP,SAASA,IAIP,IAHA,IAAMsC,EAAc5C,IAChBlH,GAAS,IAEJA,EAAQqH,EAAU/R,QACzBwU,EAAY/C,IAAGjI,MAAfgL,GAAWtF,EAAAA,EAAAA,GAAQ6C,EAAUrH,KAK/B,OAFA8J,EAAY3F,KAAKpP,GAAO,EAAM,CAAC,EAAGuS,IAE3BwC,CACT,CAiXF,CA3auB5C,GAAOW,SAExBH,EAAM,CAAC,EAAEvU,eAkbf,SAAS8V,EAAQxU,EAAOH,GACtB,MACmB,oBAAVG,GAGPA,EAAMvB,YAeV,SAAcuB,GAEZ,IAAIV,EAEJ,IAAKA,KAAOU,EACV,GAAIiT,EAAI9T,KAAKa,EAAOV,GAClB,OAAO,EAIX,OAAO,CACT,CArBKgW,CAAKtV,EAAMvB,YAAcoB,KAAQG,EAAMvB,UAE5C,CA4BA,SAAS8V,EAAa1U,EAAMG,GAC1B,GAAqB,oBAAVA,EACT,MAAM,IAAI4B,UAAU,WAAa/B,EAAO,qBAE5C,CASA,SAAS4U,EAAe5U,EAAMG,GAC5B,GAAqB,oBAAVA,EACT,MAAM,IAAI4B,UAAU,WAAa/B,EAAO,uBAE5C,CASA,SAASmT,EAAenT,EAAM6S,GAC5B,GAAIA,EACF,MAAM,IAAIzP,MACR,gBACEpD,EACA,mHAGR,CAQA,SAAS6U,EAAWpS,GAGlB,IAAK8R,EAAW9R,IAA8B,kBAAdA,EAAK0B,KACnC,MAAM,IAAIpC,UAAU,uBAAyBU,EAAO,IAGxD,CAUA,SAAS4S,EAAWrV,EAAM0V,EAAWN,GACnC,IAAKA,EACH,MAAM,IAAIhS,MACR,IAAMpD,EAAO,0BAA4B0V,EAAY,YAG3D,CAMA,SAASjB,EAAMtU,GACb,OAOF,SAAyBA,GACvB,OAAOwV,QACLxV,GACmB,kBAAVA,GACP,YAAaA,GACb,aAAcA,EAEpB,CAdSyV,CAAgBzV,GAASA,EAAQ,IAAIuP,EAAMvP,EACpD,CCrjBA,IAAM0V,EAAe,CAAC,EAuCtB,SAASC,EAAI3V,EAAO4V,EAAiBC,GACnC,GAqDF,SAAc7V,GACZ,OAAOwV,QAAQxV,GAA0B,kBAAVA,EACjC,CAvDMsC,CAAKtC,GAAQ,CACf,GAAI,UAAWA,EACb,MAAsB,SAAfA,EAAMgE,MAAoB6R,EAAmB7V,EAAMA,MAAX,GAGjD,GAAI4V,GAAmB,QAAS5V,GAASA,EAAM8V,IAC7C,OAAO9V,EAAM8V,IAGf,GAAI,aAAc9V,EAChB,OAAO+V,EAAI/V,EAAMgW,SAAUJ,EAAiBC,EAEhD,CAEA,OAAI3W,MAAMF,QAAQgB,GACT+V,EAAI/V,EAAO4V,EAAiBC,GAG9B,EACT,CAcA,SAASE,EAAI9E,EAAQ2E,EAAiBC,GAKpC,IAHA,IAAM1Q,EAAS,GACXoG,GAAS,IAEJA,EAAQ0F,EAAOpQ,QACtBsE,EAAOoG,GAASoK,EAAI1E,EAAO1F,GAAQqK,EAAiBC,GAGtD,OAAO1Q,EAAOsI,KAAK,GACrB,CCzEO,SAASwI,EAAOC,EAAM9T,EAAO+T,EAAQC,GAC1C,IAGIxE,EAHElP,EAAMwT,EAAKrV,OACbwV,EAAa,EAajB,GAPEjU,EADEA,EAAQ,GACDA,EAAQM,EAAM,EAAIA,EAAMN,EAEzBA,EAAQM,EAAMA,EAAMN,EAE9B+T,EAASA,EAAS,EAAIA,EAAS,EAG3BC,EAAMvV,OAAS,KACjB+Q,EAAa1S,MAAMoX,KAAKF,IACbG,QAAQnU,EAAO+T,GAE1BD,EAAKD,OAAM5L,MAAX6L,GAAInG,EAAAA,EAAAA,GAAW6B,SAMf,IAHIuE,GAAQD,EAAKD,OAAO7T,EAAO+T,GAGxBE,EAAaD,EAAMvV,SACxB+Q,EAAawE,EAAM3S,MAAM4S,EAAYA,EAAa,MACvCE,QAAQnU,EAAO,GAE1B8T,EAAKD,OAAM5L,MAAX6L,GAAInG,EAAAA,EAAAA,GAAW6B,IACfyE,GAAc,IACdjU,GAAS,GAGf,CAkBO,SAASiB,GAAK6S,EAAME,GACzB,OAAIF,EAAKrV,OAAS,GAChBoV,EAAOC,EAAMA,EAAKrV,OAAQ,EAAGuV,GACtBF,GAEFE,CACT,CCvEA,IAAM1X,GAAiB,CAAC,EAAEA,eA+B1B,SAAS8X,GAAgBT,EAAKU,GAE5B,IAAIC,EAEJ,IAAKA,KAAQD,EAAW,CACtB,IAEME,GAFQjY,GAAeS,KAAK4W,EAAKW,GAAQX,EAAIW,QAAQ9L,KAEpCmL,EAAIW,GAAQ,CAAC,GAE9BE,EAAQH,EAAUC,GAEpB1R,OAAI,EAER,GAAI4R,EACF,IAAK5R,KAAQ4R,EAAO,CACblY,GAAeS,KAAKwX,EAAM3R,KAAO2R,EAAK3R,GAAQ,IACnD,IAAMhF,EAAQ4W,EAAM5R,GACpB6R,GAEEF,EAAK3R,GACL9F,MAAMF,QAAQgB,GAASA,EAAQA,EAAQ,CAACA,GAAS,GAErD,CAEJ,CACF,CAUA,SAAS6W,GAAWC,EAAUZ,GAK5B,IAJA,IAAI3K,GAAS,EAEPwL,EAAS,KAENxL,EAAQ2K,EAAKrV,SAEE,UAApBqV,EAAK3K,GAAOwI,IAAkB+C,EAAWC,GAAQ1T,KAAK6S,EAAK3K,IAG/D0K,EAAOa,EAAU,EAAG,EAAGC,EACzB,CC5EO,ICaMC,GAAaC,GAAW,YAcxBC,GAAoBD,GAAW,cAuB/BE,GAAaF,GAAW,uBAa9B,SAASG,GAAapS,GAC3B,OAGW,OAATA,IAAkBA,EAAO,IAAe,MAATA,EAEnC,CAaO,IAAMqS,GAAaJ,GAAW,MAoBxBK,GAAgBL,GAAW,cAe3BM,GAAmBN,GAAW,kBAiBpC,SAASO,GAAmBxS,GACjC,OAAgB,OAATA,GAAiBA,GAAQ,CAClC,CAWO,SAASyS,GAA0BzS,GACxC,OAAgB,OAATA,IAAkBA,EAAO,GAAc,KAATA,EACvC,CAiBO,SAAS0S,GAAc1S,GAC5B,OAAiB,IAAVA,IAAyB,IAAVA,GAAwB,KAATA,CACvC,CAuBO,IAAM2S,GAAqBV,GD9LhC,wwCCoNWW,GAAoBX,GAAW,MAQ5C,SAASA,GAAWY,GAClB,OAUA,SAAe7S,GACb,OAAgB,OAATA,GAAiB6S,EAAMrS,KAAKF,OAAOC,aAAaP,GACzD,CACF,CC3MO,SAAS8S,GAAaC,EAASC,EAAIhU,EAAMiU,GAC9C,IAAMC,EAAQD,EAAMA,EAAM,EAAIzE,OAAOC,kBACjC0E,EAAO,EACX,OAGA,SAAenT,GACb,GAAI0S,GAAc1S,GAEhB,OADA+S,EAAQK,MAAMpU,GACPqU,EAAOrT,GAEhB,OAAOgT,EAAGhT,EACZ,EAGA,SAASqT,EAAOrT,GACd,OAAI0S,GAAc1S,IAASmT,IAASD,GAClCH,EAAQO,QAAQtT,GACTqT,IAETN,EAAQQ,KAAKvU,GACNgU,EAAGhT,GACZ,CACF,CCtDO,IAAMpC,GAAU,CACrB4V,SAOF,SAA2BT,GACzB,IAMIU,EANEC,EAAeX,EAAQY,QAC3BlW,KAAKmW,OAAO/B,WAAWgC,gBASzB,SAAoC7T,GAClC,GAAa,OAATA,EAEF,YADA+S,EAAQO,QAAQtT,GAMlB,OAHA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNT,GAAaC,EAASW,EAAc,aAC7C,IAGA,SAA0B1T,GAExB,OADA+S,EAAQK,MAAM,aACPU,EAAU9T,EACnB,IAlBA,OAAO0T,EAqBP,SAASI,EAAU9T,GACjB,IAAM+T,EAAQhB,EAAQK,MAAM,YAAa,CACvCY,YAAa,OACbP,SAAAA,IAMF,OAJIA,IACFA,EAASpH,KAAO0H,GAElBN,EAAWM,EACJrJ,EAAK1K,EACd,CAGA,SAAS0K,EAAK1K,GACZ,OAAa,OAATA,GACF+S,EAAQQ,KAAK,aACbR,EAAQQ,KAAK,kBACbR,EAAQO,QAAQtT,IAGdwS,GAAmBxS,IACrB+S,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,aACNO,IAITf,EAAQO,QAAQtT,GACT0K,EACT,CACF,GC1DO,IAAMuJ,GAAW,CACtBT,SAYF,SAA4BT,GAC1B,IAKImB,EAEAC,EAEAC,EATEC,EAAO5W,KAEP0J,EAAQ,GACVmN,EAAY,EAOhB,OAAOlX,EAGP,SAASA,EAAM4C,GAWb,GAAIsU,EAAYnN,EAAMtL,OAAQ,CAC5B,IAAM0Y,EAAOpN,EAAMmN,GAEnB,OADAD,EAAKG,eAAiBD,EAAK,GACpBxB,EAAQY,QACbY,EAAK,GAAGE,aACRC,EACAC,EAHK5B,CAIL/S,EACJ,CAGA,OAAO2U,EAAmB3U,EAC5B,CAGA,SAAS0U,EAAiB1U,GAMxB,GALAsU,IAKID,EAAKG,eAAeI,WAAY,CAClCP,EAAKG,eAAeI,gBAAahP,EAC7BsO,GACFW,IAWF,IANA,IAGIvO,EAHEwO,EAAmBT,EAAKU,OAAOlZ,OACjCmZ,EAAkBF,EAKfE,KACL,GACsC,SAApCX,EAAKU,OAAOC,GAAiB,IACY,cAAzCX,EAAKU,OAAOC,GAAiB,GAAGhW,KAChC,CACAsH,EAAQ+N,EAAKU,OAAOC,GAAiB,GAAGtX,IACxC,KACF,CAEFuX,EAAeX,GAIf,IADA,IAAI/N,EAAQuO,EACLvO,EAAQ8N,EAAKU,OAAOlZ,QACzBwY,EAAKU,OAAOxO,GAAO,GAAG7I,IAAMlE,OAAOsV,OAAO,CAAC,EAAGxI,GAC9CC,IAaF,OATA0K,EACEoD,EAAKU,OACLC,EAAkB,EAClB,EACAX,EAAKU,OAAOtW,MAAMqW,IAIpBT,EAAKU,OAAOlZ,OAAS0K,EACdoO,EAAmB3U,EAC5B,CACA,OAAO5C,EAAM4C,EACf,CAGA,SAAS2U,EAAmB3U,GAM1B,GAAIsU,IAAcnN,EAAMtL,OAAQ,CAI9B,IAAKqY,EACH,OAAOgB,EAAkBlV,GAM3B,GAAIkU,EAAUiB,kBAAoBjB,EAAUiB,iBAAiBC,SAC3D,OAAOC,EAAUrV,GAQnBqU,EAAKiB,UAAY9E,QACf0D,EAAUiB,mBAAqBjB,EAAUqB,8BAE7C,CAIA,OADAlB,EAAKG,eAAiB,CAAC,EAChBzB,EAAQyC,MACbC,GACAC,EACAC,EAHK5C,CAIL/S,EACJ,CAGA,SAAS0V,EAAqB1V,GAG5B,OAFIkU,GAAWW,IACfI,EAAeX,GACRY,EAAkBlV,EAC3B,CAGA,SAAS2V,EAAsB3V,GAG7B,OAFAqU,EAAKT,OAAOgC,KAAKvB,EAAKwB,MAAMxY,MAAQiX,IAAcnN,EAAMtL,OACxDuY,EAAkBC,EAAKwB,MAAMC,OACtBT,EAAUrV,EACnB,CAGA,SAASkV,EAAkBlV,GAGzB,OADAqU,EAAKG,eAAiB,CAAC,EAChBzB,EAAQY,QACb8B,GACAM,EACAV,EAHKtC,CAIL/S,EACJ,CAGA,SAAS+V,EAAkB/V,GAIzB,OAHAsU,IACAnN,EAAM9I,KAAK,CAACgW,EAAKc,iBAAkBd,EAAKG,iBAEjCU,EAAkBlV,EAC3B,CAGA,SAASqV,EAAUrV,GACjB,OAAa,OAATA,GACEkU,GAAWW,IACfI,EAAe,QACflC,EAAQO,QAAQtT,KAGlBkU,EAAYA,GAAaG,EAAKT,OAAOoC,KAAK3B,EAAKwB,OAC/C9C,EAAQK,MAAM,YAAa,CACzBY,YAAa,OACbP,SAAUU,EACV8B,WAAY/B,IAEPgC,EAAalW,GACtB,CAGA,SAASkW,EAAalW,GACpB,OAAa,OAATA,GACFmW,EAAapD,EAAQQ,KAAK,cAAc,GACxC0B,EAAe,QACflC,EAAQO,QAAQtT,IAGdwS,GAAmBxS,IACrB+S,EAAQO,QAAQtT,GAChBmW,EAAapD,EAAQQ,KAAK,cAE1Be,EAAY,EACZD,EAAKiB,eAAY1P,EACVxI,IAET2V,EAAQO,QAAQtT,GACTkW,EACT,CAOA,SAASC,EAAapC,EAAOqC,GAC3B,IAAMC,EAAShC,EAAKiC,YAAYvC,GAyChC,GAxCIqC,GAAKC,EAAOhY,KAAK,MACrB0V,EAAMN,SAAWU,EACbA,IAAYA,EAAW9H,KAAO0H,GAClCI,EAAaJ,EACbG,EAAUqC,WAAWxC,EAAM3W,OAC3B8W,EAAUsC,MAAMH,GAmCZhC,EAAKT,OAAOgC,KAAK7B,EAAM3W,MAAMC,MAAO,CAEtC,IADA,IAAIkJ,EAAQ2N,EAAUa,OAAOlZ,OACtB0K,KACL,GAEE2N,EAAUa,OAAOxO,GAAO,GAAGnJ,MAAM0Y,OAAS1B,KAExCF,EAAUa,OAAOxO,GAAO,GAAG7I,KAE3BwW,EAAUa,OAAOxO,GAAO,GAAG7I,IAAIoY,OAAS1B,GAI1C,OAcJ,IARA,IAGIqC,EAEAnQ,EALEwO,EAAmBT,EAAKU,OAAOlZ,OACjCmZ,EAAkBF,EAOfE,KACL,GACsC,SAApCX,EAAKU,OAAOC,GAAiB,IACY,cAAzCX,EAAKU,OAAOC,GAAiB,GAAGhW,KAChC,CACA,GAAIyX,EAAM,CACRnQ,EAAQ+N,EAAKU,OAAOC,GAAiB,GAAGtX,IACxC,KACF,CACA+Y,GAAO,CACT,CAMF,IAJAxB,EAAeX,GAGf/N,EAAQuO,EACDvO,EAAQ8N,EAAKU,OAAOlZ,QACzBwY,EAAKU,OAAOxO,GAAO,GAAG7I,IAAMlE,OAAOsV,OAAO,CAAC,EAAGxI,GAC9CC,IAIF0K,EACEoD,EAAKU,OACLC,EAAkB,EAClB,EACAX,EAAKU,OAAOtW,MAAMqW,IAIpBT,EAAKU,OAAOlZ,OAAS0K,CACvB,CACF,CAMA,SAAS0O,EAAe9B,GAItB,IAHA,IAAI5M,EAAQY,EAAMtL,OAGX0K,KAAU4M,GAAM,CACrB,IAAMhE,EAAQhI,EAAMZ,GACpB8N,EAAKG,eAAiBrF,EAAM,GAC5BA,EAAM,GAAGoE,KAAKpZ,KAAKka,EAAMtB,EAC3B,CACA5L,EAAMtL,OAASsX,CACjB,CACA,SAAS0B,IACPX,EAAUsC,MAAM,CAAC,OACjBrC,OAAavO,EACbsO,OAAYtO,EACZyO,EAAKG,eAAeI,gBAAahP,CACnC,CACF,GArVM6P,GAAqB,CACzBjC,SA0VF,SAA2BT,EAASC,EAAI0D,GAGtC,OAAO5D,GACLC,EACAA,EAAQY,QAAQlW,KAAKmW,OAAO/B,WAAWoC,SAAUjB,EAAI0D,GACrD,aACAjZ,KAAKmW,OAAO/B,WAAW8E,QAAQC,KAAK5L,SAAS,qBAAkBpF,EAAY,EAE/E,GCnXO,IAAMiR,GAAY,CACvBrD,SAQF,SAA2BT,EAASC,EAAI0D,GACtC,OAgBA,SAAe1W,GACb,OAAO0S,GAAc1S,GACjB8S,GAAaC,EAAS+D,EAAO,aAA7BhE,CAA2C9S,GAC3C8W,EAAM9W,EACZ,EAgBA,SAAS8W,EAAM9W,GACb,OAAgB,OAATA,GAAiBwS,GAAmBxS,GAAQgT,EAAGhT,GAAQ0W,EAAI1W,EACpE,CACF,EA/CE+W,SAAS,GCGJ,SAASC,GAAYjC,GAkB1B,IAhBA,IAGIkC,EAEAC,EAEAC,EAEAC,EAEAxK,EAEAyK,EAEAC,EAfEC,EAAQ,CAAC,EACXhR,GAAS,IAeJA,EAAQwO,EAAOlZ,QAAQ,CAC9B,KAAO0K,KAASgR,GACdhR,EAAQgR,EAAMhR,GAMhB,GAJA0Q,EAAQlC,EAAOxO,GAKbA,GACkB,cAAlB0Q,EAAM,GAAGjY,MACqB,mBAA9B+V,EAAOxO,EAAQ,GAAG,GAAGvH,QAGrBmY,EAAa,IADbE,EAAYJ,EAAM,GAAGhB,WAAWlB,QAGPlZ,QACW,oBAAlCwb,EAAUF,GAAY,GAAGnY,OAEzBmY,GAAc,GAGdA,EAAaE,EAAUxb,QACW,YAAlCwb,EAAUF,GAAY,GAAGnY,MAEzB,OAASmY,EAAaE,EAAUxb,QACQ,YAAlCwb,EAAUF,GAAY,GAAGnY,MAGS,cAAlCqY,EAAUF,GAAY,GAAGnY,OAC3BqY,EAAUF,GAAY,GAAGK,6BAA8B,EACvDL,KAOR,GAAiB,UAAbF,EAAM,GACJA,EAAM,GAAGjD,cACXxa,OAAOsV,OAAOyI,EAAOE,GAAW1C,EAAQxO,IACxCA,EAAQgR,EAAMhR,GACd+Q,GAAO,QAIN,GAAIL,EAAM,GAAGS,WAAY,CAG5B,IAFAP,EAAa5Q,EACb2Q,OAAYtR,EACLuR,MAGoB,gBAFzBC,EAAarC,EAAOoC,IAEP,GAAGnY,MACS,oBAAvBoY,EAAW,GAAGpY,OAEQ,UAAlBoY,EAAW,KACTF,IACFnC,EAAOmC,GAAW,GAAGlY,KAAO,mBAE9BoY,EAAW,GAAGpY,KAAO,aACrBkY,EAAYC,GAMdD,IAEFD,EAAM,GAAGvZ,IAAMlE,OAAOsV,OAAO,CAAC,EAAGiG,EAAOmC,GAAW,GAAG9Z,QAGtDwP,EAAamI,EAAOtW,MAAMyY,EAAW3Q,IAC1BgL,QAAQ0F,GACnBhG,EAAO8D,EAAQmC,EAAW3Q,EAAQ2Q,EAAY,EAAGtK,GAErD,CACF,CACA,OAAQ0K,CACV,CASA,SAASG,GAAW1C,EAAQ4C,GA0B1B,IAzBA,IAaItB,EAEA5C,EAfEM,EAAQgB,EAAO4C,GAAY,GAC3BC,EAAU7C,EAAO4C,GAAY,GAC/BE,EAAgBF,EAAa,EAE3BG,EAAiB,GACjBC,EACJhE,EAAMkC,YAAc2B,EAAQhE,OAAOG,EAAMC,aAAaD,EAAM3W,OACxD4a,EAAcD,EAAUhD,OAExBwC,EAAQ,GAERU,EAAO,CAAC,EAKV1R,GAAS,EAET2R,EAAUnE,EACVoE,EAAS,EACT/a,EAAQ,EACNgb,EAAS,CAAChb,GAIT8a,GAAS,CAEd,KAAOnD,IAAS8C,GAAe,KAAOK,IAGtCJ,EAAezZ,KAAKwZ,GACfK,EAAQjC,aACXI,EAASuB,EAAQtB,YAAY4B,GACxBA,EAAQ7L,MACXgK,EAAOhY,KAAK,MAEVoV,GACFsE,EAAUxB,WAAW2B,EAAQ9a,OAE3B8a,EAAQV,8BACVO,EAAUM,oCAAqC,GAEjDN,EAAUvB,MAAMH,GACZ6B,EAAQV,8BACVO,EAAUM,wCAAqCzS,IAKnD6N,EAAWyE,EACXA,EAAUA,EAAQ7L,IACpB,CAKA,IADA6L,EAAUnE,IACDxN,EAAQyR,EAAYnc,QAGC,SAA1Bmc,EAAYzR,GAAO,IACW,UAA9ByR,EAAYzR,EAAQ,GAAG,IACvByR,EAAYzR,GAAO,GAAGvH,OAASgZ,EAAYzR,EAAQ,GAAG,GAAGvH,MACzDgZ,EAAYzR,GAAO,GAAGnJ,MAAMC,OAAS2a,EAAYzR,GAAO,GAAG7I,IAAIL,OAE/DD,EAAQmJ,EAAQ,EAChB6R,EAAO/Z,KAAKjB,GAEZ8a,EAAQjC,gBAAarQ,EACrBsS,EAAQzE,cAAW7N,EACnBsS,EAAUA,EAAQ7L,MAqBtB,IAhBA0L,EAAUhD,OAAS,GAKfmD,GAEFA,EAAQjC,gBAAarQ,EACrBsS,EAAQzE,cAAW7N,GAEnBwS,EAAOhM,MAKT7F,EAAQ6R,EAAOvc,OACR0K,KAAS,CACd,IAAM9H,EAAQuZ,EAAYvZ,MAAM2Z,EAAO7R,GAAQ6R,EAAO7R,EAAQ,IACxDnJ,EAAQ0a,EAAe1L,MAC7BmL,EAAMhG,QAAQ,CAACnU,EAAOA,EAAQqB,EAAM5C,OAAS,IAC7CoV,EAAO8D,EAAQ3X,EAAO,EAAGqB,EAC3B,CAEA,IADA8H,GAAS,IACAA,EAAQgR,EAAM1b,QACrBoc,EAAKE,EAASZ,EAAMhR,GAAO,IAAM4R,EAASZ,EAAMhR,GAAO,GACvD4R,GAAUZ,EAAMhR,GAAO,GAAKgR,EAAMhR,GAAO,GAAK,EAEhD,OAAO0R,CACT,CC/MO,IAAMra,GAAU,CACrB4V,SAyBF,SAAyBT,EAASC,GAEhC,IAAIS,EACJ,OAYA,SAAoBzT,GAKlB,OAJA+S,EAAQK,MAAM,WACdK,EAAWV,EAAQK,MAAM,eAAgB,CACvCY,YAAa,YAERsE,EAAYtY,EACrB,EAYA,SAASsY,EAAYtY,GACnB,OAAa,OAATA,EACKuY,EAAWvY,GAKhBwS,GAAmBxS,GACd+S,EAAQyC,MACbgD,GACAC,EACAF,EAHKxF,CAIL/S,IAIJ+S,EAAQO,QAAQtT,GACTsY,EACT,CAOA,SAASC,EAAWvY,GAGlB,OAFA+S,EAAQQ,KAAK,gBACbR,EAAQQ,KAAK,WACNP,EAAGhT,EACZ,CAOA,SAASyY,EAAgBzY,GAQvB,OAPA+S,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,gBACbE,EAASpH,KAAO0G,EAAQK,MAAM,eAAgB,CAC5CY,YAAa,UACbP,SAAAA,IAEFA,EAAWA,EAASpH,KACbiM,CACT,CACF,EAvGEzI,QAeF,SAAwBkF,GAEtB,OADAiC,GAAYjC,GACLA,CACT,GAdMyD,GAAwB,CAC5BhF,SAwGF,SAA8BT,EAASC,EAAI0D,GACzC,IAAMrC,EAAO5W,KACb,OAOA,SAAwBuC,GAKtB,OAJA+S,EAAQQ,KAAK,gBACbR,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNT,GAAaC,EAAS2F,EAAU,aACzC,EAOA,SAASA,EAAS1Y,GAChB,GAAa,OAATA,GAAiBwS,GAAmBxS,GACtC,OAAO0W,EAAI1W,GAKb,IAAM2Y,EAAOtE,EAAKU,OAAOV,EAAKU,OAAOlZ,OAAS,GAC9C,OACGwY,EAAKT,OAAO/B,WAAW8E,QAAQC,KAAK5L,SAAS,iBAC9C2N,GACiB,eAAjBA,EAAK,GAAG3Z,MACR2Z,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9c,QAAU,EAEzCmX,EAAGhT,GAEL+S,EAAQuC,UAAUjB,EAAKT,OAAO/B,WAAWmE,KAAMU,EAAK1D,EAApDD,CAAwD/S,EACjE,CACF,EA/IE+W,SAAS,GCbJ,IAAMf,GAAO,CAClBxC,SAOF,SAAwBT,GACtB,IAAMsB,EAAO5W,KACPob,EAAU9F,EAAQY,QAEtBkD,IAoBF,SAAuB7W,GACrB,GAAa,OAATA,EAEF,YADA+S,EAAQO,QAAQtT,GAOlB,OAJA+S,EAAQK,MAAM,mBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,mBACbc,EAAKc,sBAAmBvP,EACjBiT,CACT,GA3BE9F,EAAQY,QACNlW,KAAKmW,OAAO/B,WAAWiH,YACvBC,EACAjG,GACEC,EACAA,EAAQY,QACNlW,KAAKmW,OAAO/B,WAAWmE,KACvB+C,EACAhG,EAAQY,QAAQ/V,GAASmb,IAE3B,gBAIN,OAAOF,EAgBP,SAASE,EAAe/Y,GACtB,GAAa,OAATA,EAQJ,OAJA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACbc,EAAKc,sBAAmBvP,EACjBiT,EAPL9F,EAAQO,QAAQtT,EAQpB,CACF,GC1DO,IAAMgZ,GAAW,CACtBC,WAAYC,MAEDtZ,GAASuZ,GAAkB,UAC3BC,GAAOD,GAAkB,QAMtC,SAASA,GAAkBE,GACzB,MAAO,CACL7F,SAUF,SAAwBT,GACtB,IAAMsB,EAAO5W,KACPoU,EAAapU,KAAKmW,OAAO/B,WAAWwH,GACpCD,EAAOrG,EAAQY,QAAQ9B,EAAYzU,EAAOkc,GAChD,OAAOlc,EAGP,SAASA,EAAM4C,GACb,OAAOuZ,EAAQvZ,GAAQoZ,EAAKpZ,GAAQsZ,EAAQtZ,EAC9C,CAGA,SAASsZ,EAAQtZ,GACf,GAAa,OAATA,EAMJ,OAFA+S,EAAQK,MAAM,QACdL,EAAQO,QAAQtT,GACT0K,EALLqI,EAAQO,QAAQtT,EAMpB,CAGA,SAAS0K,EAAK1K,GACZ,OAAIuZ,EAAQvZ,IACV+S,EAAQQ,KAAK,QACN6F,EAAKpZ,KAId+S,EAAQO,QAAQtT,GACT0K,EACT,CAMA,SAAS6O,EAAQvZ,GACf,GAAa,OAATA,EACF,OAAO,EAET,IAAMkR,EAAOW,EAAW7R,GACpBuG,GAAS,EACb,GAAI2K,EAGF,OAAS3K,EAAQ2K,EAAKrV,QAAQ,CAC5B,IAAM0Y,EAAOrD,EAAK3K,GAClB,IAAKgO,EAAKd,UAAYc,EAAKd,SAAStZ,KAAKka,EAAMA,EAAKZ,UAClD,OAAO,CAEX,CAEF,OAAO,CACT,CACF,EAjEEwF,WAAYC,GACA,SAAVG,EAAmBG,QAAyB5T,GAiElD,CAMA,SAASsT,GAAeO,GACtB,OAGA,SAAwB1E,EAAQ6C,GAC9B,IAEIxE,EAFA7M,GAAS,EAMb,OAASA,GAASwO,EAAOlZ,aACT+J,IAAVwN,EACE2B,EAAOxO,IAAoC,SAA1BwO,EAAOxO,GAAO,GAAGvH,OACpCoU,EAAQ7M,EACRA,KAEQwO,EAAOxO,IAAoC,SAA1BwO,EAAOxO,GAAO,GAAGvH,OAExCuH,IAAU6M,EAAQ,IACpB2B,EAAO3B,GAAO,GAAG1V,IAAMqX,EAAOxO,EAAQ,GAAG,GAAG7I,IAC5CqX,EAAO9D,OAAOmC,EAAQ,EAAG7M,EAAQ6M,EAAQ,GACzC7M,EAAQ6M,EAAQ,GAElBA,OAAQxN,GAGZ,OAAO6T,EAAgBA,EAAc1E,EAAQ6C,GAAW7C,CAC1D,CACF,CAaA,SAASyE,GAAuBzE,EAAQ6C,GAGtC,IAFA,IAAID,EAAa,IAERA,GAAc5C,EAAOlZ,QAC5B,IACG8b,IAAe5C,EAAOlZ,QACU,eAA/BkZ,EAAO4C,GAAY,GAAG3Y,OACW,SAAnC+V,EAAO4C,EAAa,GAAG,GAAG3Y,KAC1B,CAQA,IAPA,IAAM0L,EAAOqK,EAAO4C,EAAa,GAAG,GAC9B+B,EAAS9B,EAAQtB,YAAY5L,GAC/BnE,EAAQmT,EAAO7d,OACf8d,GAAe,EACfxG,EAAO,EAEPyG,OAAI,EACDrT,KAAS,CACd,IAAMsT,EAAQH,EAAOnT,GACrB,GAAqB,kBAAVsT,EAAoB,CAE7B,IADAF,EAAcE,EAAMhe,OACyB,KAAtCge,EAAMnZ,WAAWiZ,EAAc,IACpCxG,IACAwG,IAEF,GAAIA,EAAa,MACjBA,GAAe,CACjB,MAEK,IAAe,IAAXE,EACPD,GAAO,EACPzG,SACK,IAAe,IAAX0G,EAEJ,CAELtT,IACA,KACF,CACF,CACA,GAAI4M,EAAM,CACR,IAAMY,EAAQ,CACZ/U,KACE2Y,IAAe5C,EAAOlZ,QAAU+d,GAAQzG,EAAO,EAC3C,aACA,oBACN/V,MAAO,CACLC,KAAMqN,EAAKhN,IAAIL,KACfP,OAAQ4N,EAAKhN,IAAIZ,OAASqW,EAC1B2C,OAAQpL,EAAKhN,IAAIoY,OAAS3C,EAC1B2G,OAAQpP,EAAKtN,MAAM0c,OAASvT,EAC5BwT,aAAcxT,EACVoT,EACAjP,EAAKtN,MAAM2c,aAAeJ,GAEhCjc,IAAKlE,OAAOsV,OAAO,CAAC,EAAGpE,EAAKhN,MAE9BgN,EAAKhN,IAAMlE,OAAOsV,OAAO,CAAC,EAAGiF,EAAM3W,OAC/BsN,EAAKtN,MAAM0Y,SAAWpL,EAAKhN,IAAIoY,OACjCtc,OAAOsV,OAAOpE,EAAMqJ,IAEpBgB,EAAO9D,OACL0G,EACA,EACA,CAAC,QAAS5D,EAAO6D,GACjB,CAAC,OAAQ7D,EAAO6D,IAElBD,GAAc,EAElB,CACAA,GACF,CAEF,OAAO5C,CACT,CC/LO,SAASkE,GAAWpH,EAAYkD,EAAQ6C,GAK7C,IAHA,IAAMnL,EAAS,GACXlG,GAAS,IAEJA,EAAQsL,EAAWhW,QAAQ,CAClC,IAAMgU,EAAUgC,EAAWtL,GAAO0S,WAE9BpJ,IAAYpD,EAAOzB,SAAS6E,KAC9BkF,EAASlF,EAAQkF,EAAQ6C,GACzBnL,EAAOpO,KAAKwR,GAEhB,CAEA,OAAOkF,CACT,CCcO,SAASiF,GAAgBpG,EAAQqG,EAAY3I,GAElD,IAAIhL,EAAQ9M,OAAOsV,OACjBwC,EACI9X,OAAOsV,OAAO,CAAC,EAAGwC,GAClB,CACEjU,KAAM,EACNP,OAAQ,EACRgZ,OAAQ,GAEd,CACEgE,OAAQ,EACRC,cAAe,IAIbG,EAAc,CAAC,EAEfC,EAAuB,GAEzBT,EAAS,GAETvS,EAAQ,GASN4L,EAAU,CACdO,QAkJF,SAAiBtT,GACXwS,GAAmBxS,IACrBsG,EAAMjJ,OACNiJ,EAAMxJ,OAAS,EACfwJ,EAAMwP,SAAoB,IAAV9V,EAAc,EAAI,EAClCoa,MACmB,IAAVpa,IACTsG,EAAMxJ,SACNwJ,EAAMwP,UAIJxP,EAAMyT,aAAe,EACvBzT,EAAMwT,UAENxT,EAAMyT,eAKFzT,EAAMyT,eAAiBL,EAAOpT,EAAMwT,QAAQje,SAC9CyK,EAAMyT,cAAgB,EACtBzT,EAAMwT,WAKVlC,EAAQnE,SAAWzT,GAGR,CACb,EAhLEoT,MAmLF,SAAepU,EAAMqb,GAGnB,IAAMtG,EAAQsG,GAAU,CAAC,EAKzB,OAJAtG,EAAM/U,KAAOA,EACb+U,EAAM3W,MAAQyY,IACd+B,EAAQ7C,OAAO1W,KAAK,CAAC,QAAS0V,EAAO6D,IACrCzQ,EAAM9I,KAAK0V,GACJA,CACT,EA3LER,KA8LF,SAAcvU,GACZ,IAAM+U,EAAQ5M,EAAMiF,MAGpB,OAFA2H,EAAMrW,IAAMmY,IACZ+B,EAAQ7C,OAAO1W,KAAK,CAAC,OAAQ0V,EAAO6D,IAC7B7D,CACT,EAlMEJ,QAAS2G,GAyMX,SAA+BnV,EAAWoV,GACxCC,EAAUrV,EAAWoV,EAAKjJ,KAC5B,IA1MEkE,MAAO8E,EAAiBG,GACxBnF,UAAWgF,EAAiBG,EAAmB,CAC7CnF,WAAW,KASTsC,EAAU,CACdnE,SAAU,KACVzT,KAAM,KACNwU,eAAgB,CAAC,EACjBO,OAAQ,GACRnB,OAAAA,EACA0C,YAAAA,EACAsC,eA6CF,SAAwB7E,EAAO2G,GAC7B,OAsYJ,SAAyBhB,EAAQgB,GAC/B,IAIIC,EAJApU,GAAS,EAEPpG,EAAS,GAGf,OAASoG,EAAQmT,EAAO7d,QAAQ,CAC9B,IAAMge,EAAQH,EAAOnT,GAEjBvL,OAAK,EACT,GAAqB,kBAAV6e,EACT7e,EAAQ6e,OAER,OAAQA,GACN,KAAM,EACJ7e,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,KACR,MAEF,KAAM,EACJA,EAAQ,OACR,MAEF,KAAM,EACJA,EAAQ0f,EAAa,IAAM,KAC3B,MAEF,KAAM,EACJ,IAAKA,GAAcC,EAAO,SAC1B3f,EAAQ,IACR,MAEF,QAEEA,EAAQsF,OAAOC,aAAasZ,GAGlCc,GAAmB,IAAXd,EACR1Z,EAAO9B,KAAKrD,EACd,CACA,OAAOmF,EAAOsI,KAAK,GACrB,CAlbWmS,CAAgBtE,EAAYvC,GAAQ2G,EAC7C,EA9CE7E,IAAAA,EACAU,WAkEF,SAAoBvb,GAClBkf,EAAYlf,EAAMqC,MAAQrC,EAAM8B,OAChCsd,GACF,EApEE5D,MAsBF,SAAe/X,GAKb,GAJAib,EAASrb,GAAKqb,EAAQjb,GACtBoc,IAGkC,OAA9BnB,EAAOA,EAAO7d,OAAS,GACzB,MAAO,GAMT,OAJA2e,EAAUP,EAAY,GAGtBrC,EAAQ7C,OAASkE,GAAWkB,EAAsBvC,EAAQ7C,OAAQ6C,GAC3DA,EAAQ7C,MACjB,GA3BI+F,EAAQb,EAAWzG,SAASrZ,KAAKyd,EAAS7E,GAW9C,OAHIkH,EAAWhB,YACbkB,EAAqB9b,KAAK4b,GAErBrC,EA4BP,SAAStB,EAAYvC,GACnB,OA8VJ,SAAqB2F,EAAQ3F,GAC3B,IAKIgH,EALEC,EAAajH,EAAM3W,MAAM0c,OACzBmB,EAAmBlH,EAAM3W,MAAM2c,aAC/BmB,EAAWnH,EAAMrW,IAAIoc,OACrBqB,EAAiBpH,EAAMrW,IAAIqc,aAGjC,GAAIiB,IAAeE,EAEjBH,EAAO,CAACrB,EAAOsB,GAAYvc,MAAMwc,EAAkBE,QAC9C,CAEL,GADAJ,EAAOrB,EAAOjb,MAAMuc,EAAYE,GAC5BD,GAAoB,EAAG,CACzB,IAAMG,EAAOL,EAAK,GACE,kBAATK,EACTL,EAAK,GAAKK,EAAK3c,MAAMwc,GAErBF,EAAKM,OAET,CACIF,EAAiB,GAEnBJ,EAAK1c,KAAKqb,EAAOwB,GAAUzc,MAAM,EAAG0c,GAExC,CACA,OAAOJ,CACT,CAxXWO,CAAY5B,EAAQ3F,EAC7B,CAGA,SAAS8B,IAEP,IAAA0F,EAAqDjV,EACrD,MAAO,CACLjJ,KAFSke,EAAJle,KAGLP,OAHiBye,EAANze,OAIXgZ,OAJyByF,EAANzF,OAKnBgE,OALiCyB,EAANzB,OAM3BC,aAN+CwB,EAAZxB,aAQvC,CAsBA,SAASc,IAGP,IADA,IAAIW,EACGlV,EAAMwT,OAASJ,EAAO7d,QAAQ,CACnC,IAAMge,EAAQH,EAAOpT,EAAMwT,QAG3B,GAAqB,kBAAVD,EAKT,IAJA2B,EAAalV,EAAMwT,OACfxT,EAAMyT,aAAe,IACvBzT,EAAMyT,aAAe,GAGrBzT,EAAMwT,SAAW0B,GACjBlV,EAAMyT,aAAeF,EAAMhe,QAE3B4f,EAAG5B,EAAMnZ,WAAW4F,EAAMyT,oBAG5B0B,EAAG5B,EAEP,CACF,CAQA,SAAS4B,EAAGzb,QACC4F,EACI5F,EACf8a,EAAQA,EAAM9a,EAChB,CAsEA,SAASya,EAAkBiB,EAAGnB,GAC5BA,EAAKoB,SACP,CAQA,SAASrB,EAAiBsB,EAAUvB,GAClC,OAWA,SAAcxI,EAAYgK,EAAaC,GAErC,IAAIC,EAEAC,EAEA7G,EAEAoF,EACJ,OAAOrgB,MAAMF,QAAQ6X,GACjBoK,EAAuBpK,GACvB,aAAcA,EAEdoK,EAAuB,CAACpK,IAS5B,SAA+B/G,GAC7B,OAAO1N,EAGP,SAASA,EAAM4C,GACb,IAAMkc,EAAe,OAATlc,GAAiB8K,EAAI9K,GAC3B+Q,EAAe,OAAT/Q,GAAiB8K,EAAI8L,KAOjC,OAAOqF,EANM,GAAH7O,QAAArC,EAAAA,EAAAA,GAGJ7Q,MAAMF,QAAQkiB,GAAOA,EAAMA,EAAM,CAACA,GAAO,KAAEnR,EAAAA,EAAAA,GAC3C7Q,MAAMF,QAAQ+W,GAAOA,EAAMA,EAAM,CAACA,GAAO,KAExCkL,CAA6Bjc,EACtC,CACF,CAvBImc,CAAsBtK,GA+B1B,SAASoK,EAAuB/K,GAG9B,OAFA6K,EAAmB7K,EACnB8K,EAAiB,EACG,IAAhB9K,EAAKrV,OACAigB,EAEFM,EAAgBlL,EAAK8K,GAC9B,CAQA,SAASI,EAAgBjX,GACvB,OAGA,SAAenF,GAKbua,EAwER,WACE,IAAM8B,EAAaxG,IACbyG,EAAgB1E,EAAQnE,SACxB8I,EAAwB3E,EAAQzC,iBAChCqH,EAAmB5E,EAAQ7C,OAAOlZ,OAClC4gB,EAAaviB,MAAMoX,KAAKnK,GAC9B,MAAO,CACLwU,QAAAA,EACArK,KAAMkL,GAQR,SAASb,IACPrV,EAAQ+V,EACRzE,EAAQnE,SAAW6I,EACnB1E,EAAQzC,iBAAmBoH,EAC3B3E,EAAQ7C,OAAOlZ,OAAS2gB,EACxBrV,EAAQsV,EACRrC,GACF,CACF,CAhGesC,GACPvH,EAAmBhQ,EACdA,EAAU4R,UACba,EAAQzC,iBAAmBhQ,GAK7B,GACEA,EAAUtK,MACV+c,EAAQhE,OAAO/B,WAAW8E,QAAQC,KAAK5L,SAAS7F,EAAUtK,MAE1D,OAAO6b,EAAI1W,GAEb,OAAOmF,EAAUqO,SAASrZ,KAIxBkgB,EAAS7gB,OAAOsV,OAAOtV,OAAO4M,OAAOwR,GAAUyC,GAAUzC,EACzD7E,EACAC,EACA0D,EAPKvR,CAQLnF,EACJ,CACF,CAGA,SAASgT,EAAGhT,GAGV,OAFW,EACX4b,EAASzG,EAAkBoF,GACpBsB,CACT,CAGA,SAASnF,EAAI1W,GAGX,OAFW,EACXua,EAAKoB,YACCK,EAAiBD,EAAiBlgB,OAC/BugB,EAAgBL,EAAiBC,IAEnCF,CACT,CACF,CACF,CAOA,SAAStB,EAAUrV,EAAWmM,GACxBnM,EAAU8T,aAAekB,EAAqBnP,SAAS7F,IACzDgV,EAAqB9b,KAAK8G,GAExBA,EAAU0K,SACZoB,EACE2G,EAAQ7C,OACRzD,EACAsG,EAAQ7C,OAAOlZ,OAASyV,EACxBnM,EAAU0K,QAAQ+H,EAAQ7C,OAAOtW,MAAM6S,GAAOsG,IAG9CzS,EAAUwX,YACZ/E,EAAQ7C,OAAS5P,EAAUwX,UAAU/E,EAAQ7C,OAAQ6C,GAEzD,CAuCA,SAASwC,IACH9T,EAAMjJ,QAAQ6c,GAAe5T,EAAMxJ,OAAS,IAC9CwJ,EAAMxJ,OAASod,EAAY5T,EAAMjJ,MACjCiJ,EAAMwP,QAAUoE,EAAY5T,EAAMjJ,MAAQ,EAE9C,CACF,gBCleauf,GAAgB,CAC3B/hB,KAAM,gBACN2Y,SAOF,SAA+BT,EAASC,EAAI0D,GAC1C,IAEImG,EAFA1J,EAAO,EAGX,OAYA,SAAenT,GAGb,OAFA+S,EAAQK,MAAM,iBAehB,SAAgBpT,GAEd,OADA6c,EAAS7c,EACFuZ,EAAQvZ,EACjB,CAhBS+R,CAAO/R,EAChB,EA2BA,SAASuZ,EAAQvZ,GACf,OAAIA,IAAS6c,GACX9J,EAAQK,MAAM,yBACP0J,EAAS9c,IAEdmT,GAAQ,IAAe,OAATnT,GAAiBwS,GAAmBxS,KACpD+S,EAAQQ,KAAK,iBACNP,EAAGhT,IAEL0W,EAAI1W,EACb,CAYA,SAAS8c,EAAS9c,GAChB,OAAIA,IAAS6c,GACX9J,EAAQO,QAAQtT,GAChBmT,IACO2J,IAET/J,EAAQQ,KAAK,yBACNb,GAAc1S,GACjB8S,GAAaC,EAASwG,EAAS,aAA/BzG,CAA6C9S,GAC7CuZ,EAAQvZ,GACd,CACF,GCpFO,IAAMkR,GAAO,CAClBrW,KAAM,OACN2Y,SA0BF,SAA2BT,EAASC,EAAI0D,GACtC,IAAMrC,EAAO5W,KACPkb,EAAOtE,EAAKU,OAAOV,EAAKU,OAAOlZ,OAAS,GAC1CkhB,EACFpE,GAAyB,eAAjBA,EAAK,GAAG3Z,KACZ2Z,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9c,OACtC,EACFsX,EAAO,EACX,OAGA,SAAenT,GACb,IAAMgd,EACJ3I,EAAKG,eAAexV,OACV,KAATgB,GAAwB,KAATA,GAAwB,KAATA,EAC3B,gBACA,eACN,GACW,kBAATgd,GACK3I,EAAKG,eAAeqI,QAAU7c,IAASqU,EAAKG,eAAeqI,OAC5DxK,GAAWrS,GACf,CAOA,GANKqU,EAAKG,eAAexV,OACvBqV,EAAKG,eAAexV,KAAOge,EAC3BjK,EAAQK,MAAM4J,EAAM,CAClBtF,YAAY,KAGH,kBAATsF,EAEF,OADAjK,EAAQK,MAAM,kBACE,KAATpT,GAAwB,KAATA,EAClB+S,EAAQyC,MAAMoH,GAAelG,EAAKuG,EAAlClK,CAA4C/S,GAC5Cid,EAASjd,GAEf,IAAKqU,EAAKiB,WAAsB,KAATtV,EAGrB,OAFA+S,EAAQK,MAAM,kBACdL,EAAQK,MAAM,iBACP8J,EAAOld,EAElB,CACA,OAAO0W,EAAI1W,EACb,EAGA,SAASkd,EAAOld,GACd,OAAIqS,GAAWrS,MAAWmT,EAAO,IAC/BJ,EAAQO,QAAQtT,GACTkd,KAGL7I,EAAKiB,WAAanC,EAAO,KAC1BkB,EAAKG,eAAeqI,OACjB7c,IAASqU,EAAKG,eAAeqI,OACpB,KAAT7c,GAAwB,KAATA,IAEnB+S,EAAQQ,KAAK,iBACN0J,EAASjd,IAEX0W,EAAI1W,EACb,CAKA,SAASid,EAASjd,GAKhB,OAJA+S,EAAQK,MAAM,kBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,kBACbc,EAAKG,eAAeqI,OAASxI,EAAKG,eAAeqI,QAAU7c,EACpD+S,EAAQyC,MACbqB,GAEAxC,EAAKiB,UAAYoB,EAAMyG,EACvBpK,EAAQY,QACNyJ,GACAC,EACAC,GAGN,CAGA,SAASH,EAAQnd,GAGf,OAFAqU,EAAKG,eAAe+I,kBAAmB,EACvCR,IACOM,EAAYrd,EACrB,CAGA,SAASsd,EAAYtd,GACnB,OAAI0S,GAAc1S,IAChB+S,EAAQK,MAAM,4BACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,4BACN8J,GAEF3G,EAAI1W,EACb,CAGA,SAASqd,EAAYrd,GAInB,OAHAqU,EAAKG,eAAerB,KAClB4J,EACA1I,EAAKuE,eAAe7F,EAAQQ,KAAK,mBAAmB,GAAM1X,OACrDmX,EAAGhT,EACZ,CACF,EAnIEyU,aAAc,CACZjB,SAwIJ,SAAkCT,EAASC,EAAI0D,GAC7C,IAAMrC,EAAO5W,KAEb,OADA4W,EAAKG,eAAeI,gBAAahP,EAC1BmN,EAAQyC,MAAMqB,GAAWsG,EAASK,GAGzC,SAASL,EAAQnd,GAOf,OANAqU,EAAKG,eAAeiJ,kBAClBpJ,EAAKG,eAAeiJ,mBACpBpJ,EAAKG,eAAe+I,iBAIfzK,GACLC,EACAC,EACA,iBACAqB,EAAKG,eAAerB,KAAO,EAJtBL,CAKL9S,EACJ,CAGA,SAASwd,EAASxd,GAChB,OAAIqU,EAAKG,eAAeiJ,oBAAsB/K,GAAc1S,IAC1DqU,EAAKG,eAAeiJ,uBAAoB7X,EACxCyO,EAAKG,eAAe+I,sBAAmB3X,EAChC8X,EAAiB1d,KAE1BqU,EAAKG,eAAeiJ,uBAAoB7X,EACxCyO,EAAKG,eAAe+I,sBAAmB3X,EAChCmN,EAAQY,QAAQgK,GAAiB3K,EAAI0K,EAArC3K,CAAuD/S,GAChE,CAGA,SAAS0d,EAAiB1d,GAOxB,OALAqU,EAAKG,eAAeI,YAAa,EAEjCP,EAAKiB,eAAY1P,EAGVkN,GACLC,EACAA,EAAQY,QAAQzC,GAAM8B,EAAI0D,GAC1B,aACArC,EAAKT,OAAO/B,WAAW8E,QAAQC,KAAK5L,SAAS,qBACzCpF,EACA,EANCkN,CAOL9S,EACJ,CACF,GAxLEuT,KAsNF,SAAyBR,GACvBA,EAAQQ,KAAK9V,KAAK+W,eAAexV,KACnC,GApNMoe,GAAoC,CACxC5J,SAyNF,SAA0CT,EAASC,EAAI0D,GACrD,IAAMrC,EAAO5W,KAIb,OAAOqV,GACLC,GASF,SAAqB/S,GACnB,IAAM2Y,EAAOtE,EAAKU,OAAOV,EAAKU,OAAOlZ,OAAS,GAC9C,OAAQ6W,GAAc1S,IACpB2Y,GACiB,6BAAjBA,EAAK,GAAG3Z,KACNgU,EAAGhT,GACH0W,EAAI1W,EACV,GAdE,2BACAqU,EAAKT,OAAO/B,WAAW8E,QAAQC,KAAK5L,SAAS,qBACzCpF,EACA,EAYR,EA/OEmR,SAAS,GAIL4G,GAAkB,CACtBnK,SAmLF,SAAwBT,EAASC,EAAI0D,GACnC,IAAMrC,EAAO5W,KACb,OAAOqV,GACLC,GAOF,SAAqB/S,GACnB,IAAM2Y,EAAOtE,EAAKU,OAAOV,EAAKU,OAAOlZ,OAAS,GAC9C,OAAO8c,GACY,mBAAjBA,EAAK,GAAG3Z,MACR2Z,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9c,SAAWwY,EAAKG,eAAerB,KACnEH,EAAGhT,GACH0W,EAAI1W,EACV,GAZE,iBACAqU,EAAKG,eAAerB,KAAO,EAY/B,EApME4D,SAAS,GCvBJ,IAAM6G,GAAa,CACxB/iB,KAAM,aACN2Y,SAWF,SAAiCT,EAASC,EAAI0D,GAC5C,IAAMrC,EAAO5W,KACb,OAYA,SAAeuC,GACb,GAAa,KAATA,EAAa,CACf,IAAM8a,EAAQzG,EAAKG,eAWnB,OAVKsG,EAAM+C,OACT9K,EAAQK,MAAM,aAAc,CAC1BsE,YAAY,IAEdoD,EAAM+C,MAAO,GAEf9K,EAAQK,MAAM,oBACdL,EAAQK,MAAM,oBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,oBACNuD,CACT,CACA,OAAOJ,EAAI1W,EACb,EAYA,SAAS8W,EAAM9W,GACb,OAAI0S,GAAc1S,IAChB+S,EAAQK,MAAM,8BACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,8BACbR,EAAQQ,KAAK,oBACNP,IAETD,EAAQQ,KAAK,oBACNP,EAAGhT,GACZ,CACF,EA/DEyU,aAAc,CACZjB,SA4EJ,SAAwCT,EAASC,EAAI0D,GACnD,IAAMrC,EAAO5W,KACb,OAeA,SAAmBuC,GACjB,GAAI0S,GAAc1S,GAGhB,OAAO8S,GACLC,EACA+K,EACA,aACAzJ,EAAKT,OAAO/B,WAAW8E,QAAQC,KAAK5L,SAAS,qBACzCpF,EACA,EANCkN,CAOL9S,GAEJ,OAAO8d,EAAW9d,EACpB,EAeA,SAAS8d,EAAW9d,GAClB,OAAO+S,EAAQY,QAAQiK,GAAY5K,EAAI0D,EAAhC3D,CAAqC/S,EAC9C,CACF,GA3HEuT,KA8HF,SAAcR,GACZA,EAAQQ,KAAK,aACf,GCjGO,SAASwK,GACdhL,EACAC,EACA0D,EACA1X,EACAgf,EACAC,EACAC,EACAC,EACAlL,GAEA,IAAMC,EAAQD,GAAOzE,OAAOC,kBACxB2P,EAAU,EACd,OAcA,SAAepe,GACb,GAAa,KAATA,EAMF,OALA+S,EAAQK,MAAMpU,GACd+T,EAAQK,MAAM4K,GACdjL,EAAQK,MAAM6K,GACdlL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK0K,GACNI,EAIT,GAAa,OAATre,GAA0B,KAATA,GAAwB,KAATA,GAAeoS,GAAapS,GAC9D,OAAO0W,EAAI1W,GAQb,OANA+S,EAAQK,MAAMpU,GACd+T,EAAQK,MAAM8K,GACdnL,EAAQK,MAAM+K,GACdpL,EAAQK,MAAM,cAAe,CAC3BY,YAAa,WAERsK,EAAIte,EACb,EAYA,SAASqe,EAAere,GACtB,OAAa,KAATA,GACF+S,EAAQK,MAAM6K,GACdlL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK0K,GACblL,EAAQQ,KAAKyK,GACbjL,EAAQQ,KAAKvU,GACNgU,IAETD,EAAQK,MAAM+K,GACdpL,EAAQK,MAAM,cAAe,CAC3BY,YAAa,WAERuK,EAASve,GAClB,CAYA,SAASue,EAASve,GAChB,OAAa,KAATA,GACF+S,EAAQQ,KAAK,eACbR,EAAQQ,KAAK4K,GACNE,EAAere,IAEX,OAATA,GAA0B,KAATA,GAAewS,GAAmBxS,GAC9C0W,EAAI1W,IAEb+S,EAAQO,QAAQtT,GACA,KAATA,EAAcwe,EAAiBD,EACxC,CAYA,SAASC,EAAexe,GACtB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChC+S,EAAQO,QAAQtT,GACTue,GAEFA,EAASve,EAClB,CAYA,SAASse,EAAIte,GACX,OACGoe,GACS,OAATpe,GAA0B,KAATA,IAAeyS,GAA0BzS,GAQzDoe,EAAUlL,GAAkB,KAATlT,GACrB+S,EAAQO,QAAQtT,GAChBoe,IACOE,GAEI,KAATte,GACF+S,EAAQO,QAAQtT,GAChBoe,IACOE,GAMI,OAATte,GAA0B,KAATA,GAAwB,KAATA,GAAeoS,GAAapS,GACvD0W,EAAI1W,IAEb+S,EAAQO,QAAQtT,GACA,KAATA,EAAcye,EAAYH,IAxB/BvL,EAAQQ,KAAK,eACbR,EAAQQ,KAAK4K,GACbpL,EAAQQ,KAAK2K,GACbnL,EAAQQ,KAAKvU,GACNgU,EAAGhT,GAqBd,CAYA,SAASye,EAAUze,GACjB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChC+S,EAAQO,QAAQtT,GACTse,GAEFA,EAAIte,EACb,CACF,CCzLO,SAAS0e,GAAa3L,EAASC,EAAI0D,EAAK1X,EAAM2f,EAAYR,GAC/D,IAGI1H,EAHEpC,EAAO5W,KACT0V,EAAO,EAGX,OAYA,SAAenT,GAMb,OALA+S,EAAQK,MAAMpU,GACd+T,EAAQK,MAAMuL,GACd5L,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAKoL,GACb5L,EAAQK,MAAM+K,GACP5E,CACT,EAYA,SAASA,EAAQvZ,GACf,OACEmT,EAAO,KACE,OAATnT,GACS,KAATA,GACU,KAATA,IAAgByW,GAMP,KAATzW,IACEmT,GACD,2BAA4BkB,EAAKT,OAAO/B,WAEnC6E,EAAI1W,GAEA,KAATA,GACF+S,EAAQQ,KAAK4K,GACbpL,EAAQK,MAAMuL,GACd5L,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAKoL,GACb5L,EAAQQ,KAAKvU,GACNgU,GAILR,GAAmBxS,IACrB+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNgG,IAETxG,EAAQK,MAAM,cAAe,CAC3BY,YAAa,WAER4K,EAAY5e,GACrB,CAYA,SAAS4e,EAAY5e,GACnB,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACAwS,GAAmBxS,IACnBmT,IAAS,KAETJ,EAAQQ,KAAK,eACNgG,EAAQvZ,KAEjB+S,EAAQO,QAAQtT,GACXyW,IAAMA,GAAQ/D,GAAc1S,IACjB,KAATA,EAAc6e,EAAcD,EACrC,CAYA,SAASC,EAAY7e,GACnB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAChC+S,EAAQO,QAAQtT,GAChBmT,IACOyL,GAEFA,EAAY5e,EACrB,CACF,CCtHO,SAAS8e,GAAa/L,EAASC,EAAI0D,EAAK1X,EAAM2f,EAAYR,GAE/D,IAAItB,EACJ,OAYA,SAAe7c,GACb,GAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EAMhC,OALA+S,EAAQK,MAAMpU,GACd+T,EAAQK,MAAMuL,GACd5L,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAKoL,GACb9B,EAAkB,KAAT7c,EAAc,GAAKA,EACrB+e,EAET,OAAOrI,EAAI1W,EACb,EAcA,SAAS+e,EAAM/e,GACb,OAAIA,IAAS6c,GACX9J,EAAQK,MAAMuL,GACd5L,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAKoL,GACb5L,EAAQQ,KAAKvU,GACNgU,IAETD,EAAQK,MAAM+K,GACP5E,EAAQvZ,GACjB,CAYA,SAASuZ,EAAQvZ,GACf,OAAIA,IAAS6c,GACX9J,EAAQQ,KAAK4K,GACNY,EAAMlC,IAEF,OAAT7c,EACK0W,EAAI1W,GAITwS,GAAmBxS,IAErB+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNT,GAAaC,EAASwG,EAAS,gBAExCxG,EAAQK,MAAM,cAAe,CAC3BY,YAAa,WAERkJ,EAAOld,GAChB,CAOA,SAASkd,EAAOld,GACd,OAAIA,IAAS6c,GAAmB,OAAT7c,GAAiBwS,GAAmBxS,IACzD+S,EAAQQ,KAAK,eACNgG,EAAQvZ,KAEjB+S,EAAQO,QAAQtT,GACA,KAATA,EAAcgf,EAAS9B,EAChC,CAYA,SAAS8B,EAAOhf,GACd,OAAIA,IAAS6c,GAAmB,KAAT7c,GACrB+S,EAAQO,QAAQtT,GACTkd,GAEFA,EAAOld,EAChB,CACF,CClIO,SAASif,GAAkBlM,EAASC,GAEzC,IAAIyD,EACJ,OAGA,SAASrZ,EAAM4C,GACb,GAAIwS,GAAmBxS,GAKrB,OAJA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACbkD,GAAO,EACArZ,EAET,GAAIsV,GAAc1S,GAChB,OAAO8S,GACLC,EACA3V,EACAqZ,EAAO,aAAe,aAHjB3D,CAIL9S,GAEJ,OAAOgT,EAAGhT,EACZ,CACF,CC7BO,SAASkf,GAAoBlkB,GAClC,OACEA,EAEG0B,QAAQ,cAAe,KAEvBA,QAAQ,SAAU,IAOlByiB,cACA1e,aAEP,CChBO,IAAM2e,GAAa,CACxBvkB,KAAM,aACN2Y,SAaF,SAA4BT,EAASC,EAAI0D,GACvC,IAEI2I,EAFEhL,EAAO5W,KAGb,OAYA,SAAeuC,GAKb,OADA+S,EAAQK,MAAM,cAchB,SAAgBpT,GAGd,OAAO0e,GAAavkB,KAClBka,EACAtB,EACAuM,EAEA5I,EACA,kBACA,wBACA,wBARKgI,CASL1e,EACJ,CA1BS+R,CAAO/R,EAChB,EAqCA,SAASsf,EAAWtf,GAIlB,OAHAqf,EAAaH,GACX7K,EAAKuE,eAAevE,EAAKU,OAAOV,EAAKU,OAAOlZ,OAAS,GAAG,IAAI4C,MAAM,GAAI,IAE3D,KAATuB,GACF+S,EAAQK,MAAM,oBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,oBACNgM,GAEF7I,EAAI1W,EACb,CAYA,SAASuf,EAAYvf,GAEnB,OAAOyS,GAA0BzS,GAC7Bif,GAAkBlM,EAASyM,EAA3BP,CAA8Cjf,GAC9Cwf,EAAkBxf,EACxB,CAYA,SAASwf,EAAkBxf,GACzB,OAAO+d,GACLhL,EACA0M,EAEA/I,EACA,wBACA,+BACA,qCACA,2BACA,8BATKqH,CAUL/d,EACJ,CAYA,SAASyf,EAAiBzf,GACxB,OAAO+S,EAAQY,QAAQ+L,GAAa5I,EAAOA,EAApC/D,CAA2C/S,EACpD,CAcA,SAAS8W,EAAM9W,GACb,OAAO0S,GAAc1S,GACjB8S,GAAaC,EAAS4M,EAAiB,aAAvC7M,CAAqD9S,GACrD2f,EAAgB3f,EACtB,CAcA,SAAS2f,EAAgB3f,GACvB,OAAa,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,cAKbc,EAAKT,OAAOgM,QAAQvhB,KAAKghB,GAKlBrM,EAAGhT,IAEL0W,EAAI1W,EACb,CACF,GAtLM0f,GAAc,CAClBlM,SA2LF,SAA6BT,EAASC,EAAI0D,GACxC,OAcA,SAAqB1W,GACnB,OAAOyS,GAA0BzS,GAC7Bif,GAAkBlM,EAAS8M,EAA3BZ,CAAyCjf,GACzC0W,EAAI1W,EACV,EAaA,SAAS6f,EAAa7f,GACpB,OAAO8e,GACL/L,EACA+M,EACApJ,EACA,kBACA,wBACA,wBANKoI,CAOL9e,EACJ,CAYA,SAAS8f,EAAW9f,GAClB,OAAO0S,GAAc1S,GACjB8S,GAAaC,EAASgN,EAA8B,aAApDjN,CAAkE9S,GAClE+f,EAA6B/f,EACnC,CAYA,SAAS+f,EAA6B/f,GACpC,OAAgB,OAATA,GAAiBwS,GAAmBxS,GAAQgT,EAAGhT,GAAQ0W,EAAI1W,EACpE,CACF,EAlQE+W,SAAS,GCjBJ,IAAMiJ,GAAe,CAC1BnlB,KAAM,eACN2Y,SAaF,SAA8BT,EAASC,EAAI0D,GACzC,IAAMrC,EAAO5W,KACb,OAgBA,SAAeuC,GAMb,OAHA+S,EAAQK,MAAM,gBAGPN,GAAaC,EAASkN,EAAa,aAAc,EAAjDnN,CAAwD9S,EACjE,EAYA,SAASigB,EAAYjgB,GACnB,IAAM2Y,EAAOtE,EAAKU,OAAOV,EAAKU,OAAOlZ,OAAS,GAC9C,OAAO8c,GACY,eAAjBA,EAAK,GAAG3Z,MACR2Z,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9c,QAAU,EAC9C0d,EAAQvZ,GACR0W,EAAI1W,EACV,CAYA,SAASuZ,EAAQvZ,GACf,OAAa,OAATA,EACK8W,EAAM9W,GAEXwS,GAAmBxS,GACd+S,EAAQY,QAAQuM,GAAc3G,EAASzC,EAAvC/D,CAA8C/S,IAEvD+S,EAAQK,MAAM,iBACP8J,EAAOld,GAChB,CAYA,SAASkd,EAAOld,GACd,OAAa,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,iBACNgG,EAAQvZ,KAEjB+S,EAAQO,QAAQtT,GACTkd,EACT,CAGA,SAASpG,EAAM9W,GAKb,OAJA+S,EAAQQ,KAAK,gBAINP,EAAGhT,EACZ,CACF,GAvGMkgB,GAAe,CACnB1M,SA4GF,SAA8BT,EAASC,EAAI0D,GACzC,IAAMrC,EAAO5W,KACb,OAAOyiB,EAaP,SAASA,EAAalgB,GAGpB,OAAIqU,EAAKT,OAAOgC,KAAKvB,EAAKwB,MAAMxY,MACvBqZ,EAAI1W,GAETwS,GAAmBxS,IACrB+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACN2M,GASFpN,GAAaC,EAASkN,EAAa,aAAc,EAAjDnN,CAAwD9S,EACjE,CAYA,SAASigB,EAAYjgB,GACnB,IAAM2Y,EAAOtE,EAAKU,OAAOV,EAAKU,OAAOlZ,OAAS,GAC9C,OAAO8c,GACY,eAAjBA,EAAK,GAAG3Z,MACR2Z,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9c,QAAU,EAC9CmX,EAAGhT,GACHwS,GAAmBxS,GACnBkgB,EAAalgB,GACb0W,EAAI1W,EACV,CACF,EApKE+W,SAAS,GCDJ,IAAMoJ,GAAa,CACxBtlB,KAAM,aACN2Y,SA2DF,SAA4BT,EAASC,EAAI0D,GACvC,IAAIvD,EAAO,EACX,OAYA,SAAenT,GAGb,OADA+S,EAAQK,MAAM,cAchB,SAAgBpT,GAEd,OADA+S,EAAQK,MAAM,sBACPgN,EAAapgB,EACtB,CAhBS+R,CAAO/R,EAChB,EA2BA,SAASogB,EAAapgB,GACpB,OAAa,KAATA,GAAemT,IAAS,GAC1BJ,EAAQO,QAAQtT,GACTogB,GAII,OAATpgB,GAAiByS,GAA0BzS,IAC7C+S,EAAQQ,KAAK,sBACNgG,EAAQvZ,IAEV0W,EAAI1W,EACb,CAYA,SAASuZ,EAAQvZ,GACf,OAAa,KAATA,GACF+S,EAAQK,MAAM,sBACPiN,EAAgBrgB,IAEZ,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,cAINP,EAAGhT,IAER0S,GAAc1S,GACT8S,GAAaC,EAASwG,EAAS,aAA/BzG,CAA6C9S,IAKtD+S,EAAQK,MAAM,kBACP1I,EAAK1K,GACd,CAcA,SAASqgB,EAAgBrgB,GACvB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTqgB,IAETtN,EAAQQ,KAAK,sBACNgG,EAAQvZ,GACjB,CAYA,SAAS0K,EAAK1K,GACZ,OAAa,OAATA,GAA0B,KAATA,GAAeyS,GAA0BzS,IAC5D+S,EAAQQ,KAAK,kBACNgG,EAAQvZ,KAEjB+S,EAAQO,QAAQtT,GACT0K,EACT,CACF,EA5LEmF,QAIF,SAA2BkF,EAAQ6C,GACjC,IAGIha,EAEAwb,EALAb,EAAaxD,EAAOlZ,OAAS,EAC7B6X,EAAe,EAOkB,eAAjCqB,EAAOrB,GAAc,GAAG1U,OAC1B0U,GAAgB,GAKhB6E,EAAa,EAAI7E,GACc,eAA/BqB,EAAOwD,GAAY,GAAGvZ,OAEtBuZ,GAAc,GAGiB,uBAA/BxD,EAAOwD,GAAY,GAAGvZ,OACrB0U,IAAiB6E,EAAa,GAC5BA,EAAa,EAAI7E,GACmB,eAAnCqB,EAAOwD,EAAa,GAAG,GAAGvZ,QAE9BuZ,GAAc7E,EAAe,IAAM6E,EAAa,EAAI,GAElDA,EAAa7E,GAYfzC,EAAO8D,EAAQrB,EAAc6E,EAAa7E,EAAe,EAAG,CAC1D,CAAC,QAZH9V,EAAU,CACRoB,KAAM,iBACN5B,MAAO2X,EAAOrB,GAAc,GAAGtW,MAC/BM,IAAKqX,EAAOwD,GAAY,GAAG7a,KASRka,GACnB,CAAC,QARHwB,EAAO,CACLpa,KAAM,YACN5B,MAAO2X,EAAOrB,GAAc,GAAGtW,MAC/BM,IAAKqX,EAAOwD,GAAY,GAAG7a,IAC3BsW,YAAa,QAIG4D,GAChB,CAAC,OAAQwB,EAAMxB,GACf,CAAC,OAAQha,EAASga,KAGtB,OAAO7C,CACT,GC5DO,IAAMuL,GAAkB,CAC7BzlB,KAAM,kBACN2Y,SAkEF,SAAiCT,EAASC,EAAI0D,GAC5C,IAEImG,EAFExI,EAAO5W,KAGb,OAaA,SAAeuC,GACb,IAEIugB,EAFAha,EAAQ8N,EAAKU,OAAOlZ,OAIxB,KAAO0K,KAGL,GACiC,eAA/B8N,EAAKU,OAAOxO,GAAO,GAAGvH,MACS,eAA/BqV,EAAKU,OAAOxO,GAAO,GAAGvH,MACS,YAA/BqV,EAAKU,OAAOxO,GAAO,GAAGvH,KACtB,CACAuhB,EAA2C,cAA/BlM,EAAKU,OAAOxO,GAAO,GAAGvH,KAClC,KACF,CAKF,IAAKqV,EAAKT,OAAOgC,KAAKvB,EAAKwB,MAAMxY,QAAUgX,EAAKiB,WAAaiL,GAG3D,OAFAxN,EAAQK,MAAM,qBACdyJ,EAAS7c,EAiBb,SAAgBA,GAEd,OADA+S,EAAQK,MAAM,6BACP8J,EAAOld,EAChB,CAnBW+R,CAAO/R,GAEhB,OAAO0W,EAAI1W,EACb,EA6BA,SAASkd,EAAOld,GACd,OAAIA,IAAS6c,GACX9J,EAAQO,QAAQtT,GACTkd,IAETnK,EAAQQ,KAAK,6BACNb,GAAc1S,GACjB8S,GAAaC,EAAS+D,EAAO,aAA7BhE,CAA2C9S,GAC3C8W,EAAM9W,GACZ,CAaA,SAAS8W,EAAM9W,GACb,OAAa,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,qBACNP,EAAGhT,IAEL0W,EAAI1W,EACb,CACF,EAtKE2c,UAIF,SAAkC5H,EAAQ6C,GAExC,IAEIha,EAEAwb,EAEAgG,EANA7Y,EAAQwO,EAAOlZ,OAUnB,KAAO0K,KACL,GAAyB,UAArBwO,EAAOxO,GAAO,GAAgB,CAChC,GAA8B,YAA1BwO,EAAOxO,GAAO,GAAGvH,KAAoB,CACvCpB,EAAU2I,EACV,KACF,CAC8B,cAA1BwO,EAAOxO,GAAO,GAAGvH,OACnBoa,EAAO7S,EAEX,KAGgC,YAA1BwO,EAAOxO,GAAO,GAAGvH,MAEnB+V,EAAO9D,OAAO1K,EAAO,GAElB6Y,GAAwC,eAA1BrK,EAAOxO,GAAO,GAAGvH,OAClCogB,EAAa7Y,GAInB,IAAMia,EAAU,CACdxhB,KAAM,gBACN5B,MAAO5D,OAAOsV,OAAO,CAAC,EAAGiG,EAAOqE,GAAM,GAAGhc,OACzCM,IAAKlE,OAAOsV,OAAO,CAAC,EAAGiG,EAAOA,EAAOlZ,OAAS,GAAG,GAAG6B,MAItDqX,EAAOqE,GAAM,GAAGpa,KAAO,oBAInBogB,GACFrK,EAAO9D,OAAOmI,EAAM,EAAG,CAAC,QAASoH,EAAS5I,IAC1C7C,EAAO9D,OAAOmO,EAAa,EAAG,EAAG,CAAC,OAAQrK,EAAOnX,GAAS,GAAIga,IAC9D7C,EAAOnX,GAAS,GAAGF,IAAMlE,OAAOsV,OAAO,CAAC,EAAGiG,EAAOqK,GAAY,GAAG1hB,MAEjEqX,EAAOnX,GAAS,GAAK4iB,EAKvB,OADAzL,EAAO1W,KAAK,CAAC,OAAQmiB,EAAS5I,IACvB7C,CACT,GC3DO,IAAM0L,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,MAeWC,GAAe,CAAC,MAAO,SAAU,QAAS,YCxE1CC,GAAW,CACtB9lB,KAAM,WACN2Y,SAsCF,SAA0BT,EAASC,EAAI0D,GACrC,IAEImG,EAEA+D,EAEAnW,EAEAlE,EAEAsa,EAVExM,EAAO5W,KAWb,OAYA,SAAeuC,GAEb,OAaF,SAAgBA,GAId,OAHA+S,EAAQK,MAAM,YACdL,EAAQK,MAAM,gBACdL,EAAQO,QAAQtT,GACT6d,CACT,CAlBS9L,CAAO/R,EAChB,EAiCA,SAAS6d,EAAK7d,GACZ,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACT8gB,GAEI,KAAT9gB,GACF+S,EAAQO,QAAQtT,GAChB4gB,GAAa,EACNG,GAEI,KAAT/gB,GACF+S,EAAQO,QAAQtT,GAChB6c,EAAS,EAMFxI,EAAKiB,UAAYtC,EAAKgO,GAI3BhP,GAAWhS,IACb+S,EAAQO,QAAQtT,GAEhByK,EAASnK,OAAOC,aAAaP,GACtBihB,GAEFvK,EAAI1W,EACb,CAgBA,SAAS8gB,EAAgB9gB,GACvB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GAChB6c,EAAS,EACFqE,GAEI,KAATlhB,GACF+S,EAAQO,QAAQtT,GAChB6c,EAAS,EACTtW,EAAQ,EACD4a,GAILnP,GAAWhS,IACb+S,EAAQO,QAAQtT,GAChB6c,EAAS,EAGFxI,EAAKiB,UAAYtC,EAAKgO,GAExBtK,EAAI1W,EACb,CAYA,SAASkhB,EAAkBlhB,GACzB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GAGTqU,EAAKiB,UAAYtC,EAAKgO,GAExBtK,EAAI1W,EACb,CAYA,SAASmhB,EAAgBnhB,GACvB,IAAMhF,EAAQ,SACd,OAAIgF,IAAShF,EAAM0F,WAAW6F,MAC5BwM,EAAQO,QAAQtT,GACFhF,IAAVuL,EAGK8N,EAAKiB,UAAYtC,EAAKyB,EAExB0M,GAEFzK,EAAI1W,EACb,CAYA,SAAS+gB,EAAc/gB,GACrB,OAAIgS,GAAWhS,IACb+S,EAAQO,QAAQtT,GAEhByK,EAASnK,OAAOC,aAAaP,GACtBihB,GAEFvK,EAAI1W,EACb,CAcA,SAASihB,EAAQjhB,GACf,GACW,OAATA,GACS,KAATA,GACS,KAATA,GACAyS,GAA0BzS,GAC1B,CACA,IAAMohB,EAAiB,KAATphB,EACRnF,EAAO4P,EAAO0U,cACpB,OAAKiC,GAAUR,IAAcF,GAAa1V,SAASnQ,GAM/C4lB,GAAezV,SAASP,EAAO0U,gBACjCtC,EAAS,EACLuE,GACFrO,EAAQO,QAAQtT,GACTqhB,GAKFhN,EAAKiB,UAAYtC,EAAGhT,GAAQyU,EAAazU,KAElD6c,EAAS,EAEFxI,EAAKiB,YAAcjB,EAAKT,OAAOgC,KAAKvB,EAAKwB,MAAMxY,MAClDqZ,EAAI1W,GACJ4gB,EACAU,EAAwBthB,GACxBuhB,EAA4BvhB,KAtB9B6c,EAAS,EAGFxI,EAAKiB,UAAYtC,EAAGhT,GAAQyU,EAAazU,GAoBpD,CAGA,OAAa,KAATA,GAAekS,GAAkBlS,IACnC+S,EAAQO,QAAQtT,GAChByK,GAAUnK,OAAOC,aAAaP,GACvBihB,GAEFvK,EAAI1W,EACb,CAYA,SAASqhB,EAAiBrhB,GACxB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GAGTqU,EAAKiB,UAAYtC,EAAKyB,GAExBiC,EAAI1W,EACb,CAYA,SAASshB,EAAwBthB,GAC/B,OAAI0S,GAAc1S,IAChB+S,EAAQO,QAAQtT,GACTshB,GAEFE,EAAYxhB,EACrB,CAyBA,SAASuhB,EAA4BvhB,GACnC,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTwhB,GAII,KAATxhB,GAAwB,KAATA,GAAegS,GAAWhS,IAC3C+S,EAAQO,QAAQtT,GACTyhB,GAEL/O,GAAc1S,IAChB+S,EAAQO,QAAQtT,GACTuhB,GAEFC,EAAYxhB,EACrB,CAgBA,SAASyhB,EAAsBzhB,GAE7B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACAkS,GAAkBlS,IAElB+S,EAAQO,QAAQtT,GACTyhB,GAEFC,EAA2B1hB,EACpC,CAeA,SAAS0hB,EAA2B1hB,GAClC,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACT2hB,GAELjP,GAAc1S,IAChB+S,EAAQO,QAAQtT,GACT0hB,GAEFH,EAA4BvhB,EACrC,CAeA,SAAS2hB,EAA6B3hB,GACpC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEO0W,EAAI1W,GAEA,KAATA,GAAwB,KAATA,GACjB+S,EAAQO,QAAQtT,GAChB6gB,EAAU7gB,EACH4hB,GAELlP,GAAc1S,IAChB+S,EAAQO,QAAQtT,GACT2hB,GAEFE,EAA+B7hB,EACxC,CAcA,SAAS4hB,EAA6B5hB,GACpC,OAAIA,IAAS6gB,GACX9N,EAAQO,QAAQtT,GAChB6gB,EAAU,KACHiB,GAEI,OAAT9hB,GAAiBwS,GAAmBxS,GAC/B0W,EAAI1W,IAEb+S,EAAQO,QAAQtT,GACT4hB,EACT,CAYA,SAASC,EAA+B7hB,GACtC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACAyS,GAA0BzS,GAEnB0hB,EAA2B1hB,IAEpC+S,EAAQO,QAAQtT,GACT6hB,EACT,CAaA,SAASC,EAAkC9hB,GACzC,OAAa,KAATA,GAAwB,KAATA,GAAe0S,GAAc1S,GACvCuhB,EAA4BvhB,GAE9B0W,EAAI1W,EACb,CAYA,SAASwhB,EAAYxhB,GACnB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACT+hB,GAEFrL,EAAI1W,EACb,CAYA,SAAS+hB,EAAc/hB,GACrB,OAAa,OAATA,GAAiBwS,GAAmBxS,GAG/ByU,EAAazU,GAElB0S,GAAc1S,IAChB+S,EAAQO,QAAQtT,GACT+hB,GAEFrL,EAAI1W,EACb,CAYA,SAASyU,EAAazU,GACpB,OAAa,KAATA,GAA0B,IAAX6c,GACjB9J,EAAQO,QAAQtT,GACTgiB,GAEI,KAAThiB,GAA0B,IAAX6c,GACjB9J,EAAQO,QAAQtT,GACTiiB,GAEI,KAATjiB,GAA0B,IAAX6c,GACjB9J,EAAQO,QAAQtT,GACTkiB,GAEI,KAATliB,GAA0B,IAAX6c,GACjB9J,EAAQO,QAAQtT,GACTghB,GAEI,KAAThhB,GAA0B,IAAX6c,GACjB9J,EAAQO,QAAQtT,GACTmiB,IAEL3P,GAAmBxS,IAAqB,IAAX6c,GAA2B,IAAXA,EAQpC,OAAT7c,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,gBACN6O,EAAkBpiB,KAE3B+S,EAAQO,QAAQtT,GACTyU,IAZL1B,EAAQQ,KAAK,gBACNR,EAAQyC,MACb6M,GACAC,EACAF,EAHKrP,CAIL/S,GAQN,CAaA,SAASoiB,EAAkBpiB,GACzB,OAAO+S,EAAQyC,MACb+M,GACAC,EACAF,EAHKvP,CAIL/S,EACJ,CAaA,SAASwiB,EAAyBxiB,GAIhC,OAHA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNkP,CACT,CAaA,SAASA,EAAmBziB,GAC1B,OAAa,OAATA,GAAiBwS,GAAmBxS,GAC/BoiB,EAAkBpiB,IAE3B+S,EAAQK,MAAM,gBACPqB,EAAazU,GACtB,CAYA,SAASgiB,EAA0BhiB,GACjC,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTghB,GAEFvM,EAAazU,EACtB,CAYA,SAASiiB,EAAuBjiB,GAC9B,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GAChByK,EAAS,GACFiY,GAEFjO,EAAazU,EACtB,CAYA,SAAS0iB,EAAsB1iB,GAC7B,GAAa,KAATA,EAAa,CACf,IAAMnF,EAAO4P,EAAO0U,cACpB,OAAIuB,GAAa1V,SAASnQ,IACxBkY,EAAQO,QAAQtT,GACTkiB,GAEFzN,EAAazU,EACtB,CACA,OAAIgS,GAAWhS,IAASyK,EAAO5O,OAAS,GACtCkX,EAAQO,QAAQtT,GAEhByK,GAAUnK,OAAOC,aAAaP,GACvB0iB,GAEFjO,EAAazU,EACtB,CAYA,SAASmiB,EAAwBniB,GAC/B,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTghB,GAEFvM,EAAazU,EACtB,CAoBA,SAASghB,EAA8BhhB,GACrC,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTkiB,GAII,KAATliB,GAA0B,IAAX6c,GACjB9J,EAAQO,QAAQtT,GACTghB,GAEFvM,EAAazU,EACtB,CAYA,SAASkiB,EAAkBliB,GACzB,OAAa,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,gBACN+O,EAAkBtiB,KAE3B+S,EAAQO,QAAQtT,GACTkiB,EACT,CAYA,SAASI,EAAkBtiB,GAMzB,OALA+S,EAAQQ,KAAK,YAKNP,EAAGhT,EACZ,CACF,EArzBE2c,UAeF,SAA2B5H,GACzB,IAAIxO,EAAQwO,EAAOlZ,OACnB,KAAO0K,MACoB,UAArBwO,EAAOxO,GAAO,IAA4C,aAA1BwO,EAAOxO,GAAO,GAAGvH,QAInDuH,EAAQ,GAAmC,eAA9BwO,EAAOxO,EAAQ,GAAG,GAAGvH,OAEpC+V,EAAOxO,GAAO,GAAGnJ,MAAQ2X,EAAOxO,EAAQ,GAAG,GAAGnJ,MAE9C2X,EAAOxO,EAAQ,GAAG,GAAGnJ,MAAQ2X,EAAOxO,EAAQ,GAAG,GAAGnJ,MAElD2X,EAAO9D,OAAO1K,EAAQ,EAAG,IAE3B,OAAOwO,CACT,EA9BEK,UAAU,GAINiN,GAAkB,CACtB7O,SAk2BF,SAAiCT,EAASC,EAAI0D,GAC5C,OAaA,SAAe1W,GAIb,OAHA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNR,EAAQY,QAAQkD,GAAW7D,EAAI0D,EACxC,CACF,EAr3BEK,SAAS,GAELwL,GAA2B,CAC/B/O,SAizBF,SAA0CT,EAASC,EAAI0D,GACrD,IAAMrC,EAAO5W,KACb,OAaA,SAAeuC,GACb,GAAIwS,GAAmBxS,GAIrB,OAHA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNuD,EAET,OAAOJ,EAAI1W,EACb,EAaA,SAAS8W,EAAM9W,GACb,OAAOqU,EAAKT,OAAOgC,KAAKvB,EAAKwB,MAAMxY,MAAQqZ,EAAI1W,GAAQgT,EAAGhT,EAC5D,CACF,EAv1BE+W,SAAS,GCvBX,IAAM4L,GAAsB,CAC1BnP,SAwbF,SAAqCT,EAASC,EAAI0D,GAChD,IAAMrC,EAAO5W,KACb,OAOA,SAAeuC,GACb,GAAa,OAATA,EACF,OAAO0W,EAAI1W,GAKb,OAHA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNO,CACT,EAOA,SAASA,EAAU9T,GACjB,OAAOqU,EAAKT,OAAOgC,KAAKvB,EAAKwB,MAAMxY,MAAQqZ,EAAI1W,GAAQgT,EAAGhT,EAC5D,CACF,EAldE+W,SAAS,GAIE6L,GAAa,CACxB/nB,KAAM,aACN2Y,SAQF,SAA4BT,EAASC,EAAI0D,GACvC,IASImG,EATExI,EAAO5W,KAEPolB,EAAa,CACjBrP,SA+SF,SAA4BT,EAASC,EAAI0D,GACvC,IAAIvD,EAAO,EACX,OAAO2P,EAOP,SAASA,EAAY9iB,GAInB,OAHA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNnW,CACT,CAcA,SAASA,EAAM4C,GAKb,OADA+S,EAAQK,MAAM,mBACPV,GAAc1S,GACjB8S,GACEC,EACAgQ,EACA,aACA1O,EAAKT,OAAO/B,WAAW8E,QAAQC,KAAK5L,SAAS,qBACzCpF,EACA,EANNkN,CAOE9S,GACF+iB,EAAoB/iB,EAC1B,CAcA,SAAS+iB,EAAoB/iB,GAC3B,OAAIA,IAAS6c,GACX9J,EAAQK,MAAM,2BACP4P,EAAchjB,IAEhB0W,EAAI1W,EACb,CAcA,SAASgjB,EAAchjB,GACrB,OAAIA,IAAS6c,GACX1J,IACAJ,EAAQO,QAAQtT,GACTgjB,GAEL7P,GAAQ8P,GACVlQ,EAAQQ,KAAK,2BACNb,GAAc1S,GACjB8S,GAAaC,EAASmQ,EAAoB,aAA1CpQ,CAAwD9S,GACxDkjB,EAAmBljB,IAElB0W,EAAI1W,EACb,CAcA,SAASkjB,EAAmBljB,GAC1B,OAAa,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,mBACNP,EAAGhT,IAEL0W,EAAI1W,EACb,CACF,EA7ZE+W,SAAS,GAEPoM,EAAgB,EAChBF,EAAW,EAGf,OAcA,SAAejjB,GAEb,OAeF,SAA4BA,GAC1B,IAAM2Y,EAAOtE,EAAKU,OAAOV,EAAKU,OAAOlZ,OAAS,GAS9C,OARAsnB,EACExK,GAAyB,eAAjBA,EAAK,GAAG3Z,KACZ2Z,EAAK,GAAGC,eAAeD,EAAK,IAAI,GAAM9c,OACtC,EACNghB,EAAS7c,EACT+S,EAAQK,MAAM,cACdL,EAAQK,MAAM,mBACdL,EAAQK,MAAM,2BACPgN,EAAapgB,EACtB,CA1BSojB,CAAmBpjB,EAC5B,EAuCA,SAASogB,EAAapgB,GACpB,OAAIA,IAAS6c,GACXoG,IACAlQ,EAAQO,QAAQtT,GACTogB,GAEL6C,EAAW,EACNvM,EAAI1W,IAEb+S,EAAQQ,KAAK,2BACNb,GAAc1S,GACjB8S,GAAaC,EAASsQ,EAAY,aAAlCvQ,CAAgD9S,GAChDqjB,EAAWrjB,GACjB,CAcA,SAASqjB,EAAWrjB,GAClB,OAAa,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,mBACNc,EAAKiB,UACRtC,EAAGhT,GACH+S,EAAQyC,MAAMmN,GAAqBW,EAAgBxM,EAAnD/D,CAA0D/S,KAEhE+S,EAAQK,MAAM,uBACdL,EAAQK,MAAM,cAAe,CAC3BY,YAAa,WAERuG,EAAKva,GACd,CAcA,SAASua,EAAKva,GACZ,OAAa,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,uBACN8P,EAAWrjB,IAEhB0S,GAAc1S,IAChB+S,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,uBACNT,GAAaC,EAASwQ,EAAY,aAAlCzQ,CAAgD9S,IAE5C,KAATA,GAAeA,IAAS6c,EACnBnG,EAAI1W,IAEb+S,EAAQO,QAAQtT,GACTua,EACT,CAcA,SAASgJ,EAAWvjB,GAClB,OAAa,OAATA,GAAiBwS,GAAmBxS,GAC/BqjB,EAAWrjB,IAEpB+S,EAAQK,MAAM,uBACdL,EAAQK,MAAM,cAAe,CAC3BY,YAAa,WAERwP,EAAKxjB,GACd,CAcA,SAASwjB,EAAKxjB,GACZ,OAAa,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,uBACN8P,EAAWrjB,IAEP,KAATA,GAAeA,IAAS6c,EACnBnG,EAAI1W,IAEb+S,EAAQO,QAAQtT,GACTwjB,EACT,CAeA,SAASF,EAAetjB,GACtB,OAAO+S,EAAQY,QAAQkP,EAAY/L,EAAO2M,EAAnC1Q,CAAkD/S,EAC3D,CAcA,SAASyjB,EAAczjB,GAIrB,OAHA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNG,CACT,CAcA,SAASA,EAAa1T,GACpB,OAAOmjB,EAAgB,GAAKzQ,GAAc1S,GACtC8S,GACEC,EACA2Q,EACA,aACAP,EAAgB,EAJlBrQ,CAKE9S,GACF0jB,EAAmB1jB,EACzB,CAcA,SAAS0jB,EAAmB1jB,GAC1B,OAAa,OAATA,GAAiBwS,GAAmBxS,GAC/B+S,EAAQyC,MAAMmN,GAAqBW,EAAgBxM,EAAnD/D,CAA0D/S,IAEnE+S,EAAQK,MAAM,iBACPuQ,EAAa3jB,GACtB,CAcA,SAAS2jB,EAAa3jB,GACpB,OAAa,OAATA,GAAiBwS,GAAmBxS,IACtC+S,EAAQQ,KAAK,iBACNmQ,EAAmB1jB,KAE5B+S,EAAQO,QAAQtT,GACT2jB,EACT,CAcA,SAAS7M,EAAM9W,GAEb,OADA+S,EAAQQ,KAAK,cACNP,EAAGhT,EACZ,CAsHF,EA1aEoV,UAAU,GChBZ,IAAMwO,GAAU3P,SAAS4P,cAAc,KAMhC,SAASC,GAA8B9oB,GAC5C,IAAM+oB,EAAqB,IAAM/oB,EAAQ,IACzC4oB,GAAQI,UAAYD,EACpB,IAAME,EAAOL,GAAQM,YAUrB,OAAyC,KAArCD,EAAKvjB,WAAWujB,EAAKpoB,OAAS,IAAiC,SAAVb,KAQlDipB,IAASF,GAA6BE,EAC/C,CCjBO,IAAMF,GAAqB,CAChClpB,KAAM,qBACN2Y,SAOF,SAAoCT,EAASC,EAAI0D,GAC/C,IAGIzD,EAEAzS,EALE6T,EAAO5W,KACT0V,EAAO,EAKX,OAgBA,SAAenT,GAKb,OAJA+S,EAAQK,MAAM,sBACdL,EAAQK,MAAM,4BACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,4BACNsK,CACT,EAiBA,SAASA,EAAK7d,GACZ,OAAa,KAATA,GACF+S,EAAQK,MAAM,mCACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,mCACN4Q,IAETpR,EAAQK,MAAM,2BACdH,EAAM,GACNzS,EAAO0R,GACAlX,EAAMgF,GACf,CAcA,SAASmkB,EAAQnkB,GACf,OAAa,KAATA,GAAwB,MAATA,GACjB+S,EAAQK,MAAM,uCACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,uCACbR,EAAQK,MAAM,2BACdH,EAAM,EACNzS,EAAO8R,GACAtX,IAET+X,EAAQK,MAAM,2BACdH,EAAM,EACNzS,EAAO6R,GACArX,EAAMgF,GACf,CAmBA,SAAShF,EAAMgF,GACb,GAAa,KAATA,GAAemT,EAAM,CACvB,IAAMY,EAAQhB,EAAQQ,KAAK,2BAC3B,OACE/S,IAAS0R,IACR4R,GAA8BzP,EAAKuE,eAAe7E,KAOrDhB,EAAQK,MAAM,4BACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,4BACbR,EAAQQ,KAAK,sBACNP,GATE0D,EAAI1W,EAUf,CACA,OAAIQ,EAAKR,IAASmT,IAASF,GACzBF,EAAQO,QAAQtT,GACThF,GAEF0b,EAAI1W,EACb,CACF,GC/IO,IAAMokB,GAAkB,CAC7BvpB,KAAM,kBACN2Y,SAOF,SAAiCT,EAASC,EAAI0D,GAC5C,OAYA,SAAe1W,GAKb,OAJA+S,EAAQK,MAAM,mBACdL,EAAQK,MAAM,gBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,gBACN2J,CACT,EAYA,SAASA,EAAOld,GAEd,OAAIuS,GAAiBvS,IACnB+S,EAAQK,MAAM,wBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,wBACbR,EAAQQ,KAAK,mBACNP,GAEF0D,EAAI1W,EACb,CACF,GClDO,IAAMqkB,GAAa,CACxBxpB,KAAM,aACN2Y,SAOF,SAA4BT,EAASC,GACnC,OAGA,SAAehT,GAIb,OAHA+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNT,GAAaC,EAASC,EAAI,aACnC,CACF,GCVO,IAAMsR,GAAW,CACtBzpB,KAAM,WACN2Y,SA8IF,SAA0BT,EAASC,EAAI0D,GACrC,IAGI6N,EAEA3E,EALEvL,EAAO5W,KACT8I,EAAQ8N,EAAKU,OAAOlZ,OAOxB,KAAO0K,KACL,IACkC,eAA/B8N,EAAKU,OAAOxO,GAAO,GAAGvH,MACU,cAA/BqV,EAAKU,OAAOxO,GAAO,GAAGvH,QACvBqV,EAAKU,OAAOxO,GAAO,GAAGie,UACvB,CACAD,EAAalQ,EAAKU,OAAOxO,GAAO,GAChC,KACF,CAEF,OAiBA,SAAevG,GAEb,IAAKukB,EACH,OAAO7N,EAAI1W,GAYb,GAAIukB,EAAWE,UACb,OAAOC,EAAY1kB,GAerB,OAbA4f,EAAUvL,EAAKT,OAAOgM,QAAQ5U,SAC5BkU,GACE7K,EAAKuE,eAAe,CAClBxb,MAAOmnB,EAAW7mB,IAClBA,IAAK2W,EAAKwB,UAIhB9C,EAAQK,MAAM,YACdL,EAAQK,MAAM,eACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,YACNuD,CACT,EAkBA,SAASA,EAAM9W,GAKb,OAAa,KAATA,EACK+S,EAAQY,QACbgR,GACAC,EACAhF,EAAUgF,EAAaF,EAHlB3R,CAIL/S,GAIS,KAATA,EACK+S,EAAQY,QACbkR,GACAD,EACAhF,EAAUkF,EAAmBJ,EAHxB3R,CAIL/S,GAIG4f,EAAUgF,EAAW5kB,GAAQ0kB,EAAY1kB,EAClD,CAgBA,SAAS8kB,EAAiB9kB,GACxB,OAAO+S,EAAQY,QACboR,GACAH,EACAF,EAHK3R,CAIL/S,EACJ,CAkBA,SAAS4kB,EAAW5kB,GAElB,OAAOgT,EAAGhT,EACZ,CAkBA,SAAS0kB,EAAY1kB,GAEnB,OADAukB,EAAWC,WAAY,EAChB9N,EAAI1W,EACb,CACF,EA5TE2c,UAqCF,SAA2B5H,EAAQ6C,GACjC,IAGI7D,EAEA8J,EAEAmH,EAEAC,EATA1e,EAAQwO,EAAOlZ,OACfia,EAAS,EAWb,KAAOvP,KAEL,GADAwN,EAAQgB,EAAOxO,GAAO,GAClBsX,EAAM,CAER,GACiB,SAAf9J,EAAM/U,MACU,cAAf+U,EAAM/U,MAAwB+U,EAAM0Q,UAErC,MAKuB,UAArB1P,EAAOxO,GAAO,IAAiC,cAAfwN,EAAM/U,OACxC+U,EAAM0Q,WAAY,EAEtB,MAAO,GAAIO,GACT,GACuB,UAArBjQ,EAAOxO,GAAO,KACE,eAAfwN,EAAM/U,MAAwC,cAAf+U,EAAM/U,QACrC+U,EAAMyQ,YAEP3G,EAAOtX,EACY,cAAfwN,EAAM/U,MAAsB,CAC9B8W,EAAS,EACT,KACF,MAEsB,aAAf/B,EAAM/U,OACfgmB,EAAQze,GAGZ,IAAM2e,EAAQ,CACZlmB,KAA+B,cAAzB+V,EAAO8I,GAAM,GAAG7e,KAAuB,OAAS,QACtD5B,MAAO5D,OAAOsV,OAAO,CAAC,EAAGiG,EAAO8I,GAAM,GAAGzgB,OACzCM,IAAKlE,OAAOsV,OAAO,CAAC,EAAGiG,EAAOA,EAAOlZ,OAAS,GAAG,GAAG6B,MAEhDynB,EAAQ,CACZnmB,KAAM,QACN5B,MAAO5D,OAAOsV,OAAO,CAAC,EAAGiG,EAAO8I,GAAM,GAAGzgB,OACzCM,IAAKlE,OAAOsV,OAAO,CAAC,EAAGiG,EAAOiQ,GAAO,GAAGtnB,MAEpC0b,EAAO,CACXpa,KAAM,YACN5B,MAAO5D,OAAOsV,OAAO,CAAC,EAAGiG,EAAO8I,EAAO/H,EAAS,GAAG,GAAGpY,KACtDA,IAAKlE,OAAOsV,OAAO,CAAC,EAAGiG,EAAOiQ,EAAQ,GAAG,GAAG5nB,QAuC9C,OA/BA6nB,EAAQ5mB,GANR4mB,EAAQ,CACN,CAAC,QAASC,EAAOtN,GACjB,CAAC,QAASuN,EAAOvN,IAIC7C,EAAOtW,MAAMof,EAAO,EAAGA,EAAO/H,EAAS,IAG3DmP,EAAQ5mB,GAAK4mB,EAAO,CAAC,CAAC,QAAS7L,EAAMxB,KAKrCqN,EAAQ5mB,GACN4mB,EACAhM,GACErB,EAAQhE,OAAO/B,WAAWuT,WAAWxO,KACrC7B,EAAOtW,MAAMof,EAAO/H,EAAS,EAAGkP,EAAQ,GACxCpN,IAKJqN,EAAQ5mB,GAAK4mB,EAAO,CAClB,CAAC,OAAQ7L,EAAMxB,GACf7C,EAAOiQ,EAAQ,GACfjQ,EAAOiQ,EAAQ,GACf,CAAC,OAAQG,EAAOvN,KAIlBqN,EAAQ5mB,GAAK4mB,EAAOlQ,EAAOtW,MAAMumB,EAAQ,IAGzCC,EAAQ5mB,GAAK4mB,EAAO,CAAC,CAAC,OAAQC,EAAOtN,KACrC3G,EAAO8D,EAAQ8I,EAAM9I,EAAOlZ,OAAQopB,GAC7BlQ,CACT,EAtIEkE,WAiBF,SAA4BlE,GAC1B,IAAIxO,GAAS,EACb,OAASA,EAAQwO,EAAOlZ,QAAQ,CAC9B,IAAMkY,EAAQgB,EAAOxO,GAAO,GAEX,eAAfwN,EAAM/U,MACS,cAAf+U,EAAM/U,MACS,aAAf+U,EAAM/U,OAGN+V,EAAO9D,OAAO1K,EAAQ,EAAkB,eAAfwN,EAAM/U,KAAwB,EAAI,GAC3D+U,EAAM/U,KAAO,OACbuH,IAEJ,CACA,OAAOwO,CACT,GA7BM4P,GAAoB,CACxBnR,SA4TF,SAA0BT,EAASC,EAAI0D,GACrC,OAYA,SAAuB1W,GAKrB,OAJA+S,EAAQK,MAAM,YACdL,EAAQK,MAAM,kBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,kBACN8R,CACT,EAYA,SAASA,EAAerlB,GACtB,OAAOyS,GAA0BzS,GAC7Bif,GAAkBlM,EAASuS,EAA3BrG,CAAyCjf,GACzCslB,EAAatlB,EACnB,CAYA,SAASslB,EAAatlB,GACpB,OAAa,KAATA,EACKulB,EAAYvlB,GAEd+d,GACLhL,EACAyS,EACAC,EACA,sBACA,6BACA,mCACA,yBACA,4BACA,GATK1H,CAUL/d,EACJ,CAYA,SAASwlB,EAAyBxlB,GAChC,OAAOyS,GAA0BzS,GAC7Bif,GAAkBlM,EAAS2S,EAA3BzG,CAA4Cjf,GAC5CulB,EAAYvlB,EAClB,CAYA,SAASylB,EAA2BzlB,GAClC,OAAO0W,EAAI1W,EACb,CAYA,SAAS0lB,EAAgB1lB,GACvB,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,EACzB8e,GACL/L,EACA4S,EACAjP,EACA,gBACA,sBACA,sBANKoI,CAOL9e,GAEGulB,EAAYvlB,EACrB,CAYA,SAAS2lB,EAAmB3lB,GAC1B,OAAOyS,GAA0BzS,GAC7Bif,GAAkBlM,EAASwS,EAA3BtG,CAAwCjf,GACxCulB,EAAYvlB,EAClB,CAYA,SAASulB,EAAYvlB,GACnB,OAAa,KAATA,GACF+S,EAAQK,MAAM,kBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,kBACbR,EAAQQ,KAAK,YACNP,GAEF0D,EAAI1W,EACb,CACF,GAndM6kB,GAAyB,CAC7BrR,SAwdF,SAA+BT,EAASC,EAAI0D,GAC1C,IAAMrC,EAAO5W,KACb,OAYA,SAAuBuC,GACrB,OAAO0e,GAAavkB,KAClBka,EACAtB,EACA6S,EACAC,EACA,YACA,kBACA,kBAPKnH,CAQL1e,EACJ,EAYA,SAAS4lB,EAAmB5lB,GAC1B,OAAOqU,EAAKT,OAAOgM,QAAQ5U,SACzBkU,GACE7K,EAAKuE,eAAevE,EAAKU,OAAOV,EAAKU,OAAOlZ,OAAS,GAAG,IAAI4C,MAAM,GAAI,KAGtEuU,EAAGhT,GACH0W,EAAI1W,EACV,CAYA,SAAS6lB,EAAqB7lB,GAC5B,OAAO0W,EAAI1W,EACb,CACF,GAhhBM+kB,GAA8B,CAClCvR,SAqhBF,SAAoCT,EAASC,EAAI0D,GAC/C,OAcA,SAAiC1W,GAO/B,OAJA+S,EAAQK,MAAM,aACdL,EAAQK,MAAM,mBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,mBACNuS,CACT,EAcA,SAASA,EAAuB9lB,GAC9B,OAAa,KAATA,GACF+S,EAAQK,MAAM,mBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,mBACbR,EAAQQ,KAAK,aACNP,GAEF0D,EAAI1W,EACb,CACF,GC9lBO,IAAM+lB,GAAkB,CAC7BlrB,KAAM,kBACN2Y,SAQF,SAAiCT,EAASC,EAAI0D,GAC5C,IAAMrC,EAAO5W,KACb,OAYA,SAAeuC,GAKb,OAJA+S,EAAQK,MAAM,cACdL,EAAQK,MAAM,oBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,oBACNsK,CACT,EAYA,SAASA,EAAK7d,GACZ,OAAa,KAATA,GACF+S,EAAQK,MAAM,eACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,cACNuD,GAEFJ,EAAI1W,EACb,CA6BA,SAAS8W,EAAM9W,GAMb,OAAgB,KAATA,GAAe,2BAA4BqU,EAAKT,OAAO/B,WAC1D6E,EAAI1W,GACJgT,EAAGhT,EACT,CACF,EAvFEiZ,WAAYqL,GAASrL,YCUhB,SAAS+M,GAAkBhmB,GAChC,OACW,OAATA,GACAyS,GAA0BzS,IAC1B4S,GAAkB5S,GAEX,EAEL2S,GAAmB3S,GACd,OADT,CAGF,CClBO,IAAMimB,GAAY,CACvBprB,KAAM,YACN2Y,SA4KF,SAA2BT,EAASC,GAClC,IAKI6J,EALEqJ,EAAmBzoB,KAAKmW,OAAO/B,WAAWqU,iBAAiBtP,KAC3DnD,EAAWhW,KAAKgW,SAChB1B,EAASiU,GAAkBvS,GAIjC,OAYA,SAAezT,GAGb,OAFA6c,EAAS7c,EACT+S,EAAQK,MAAM,qBACP8J,EAAOld,EAChB,EAYA,SAASkd,EAAOld,GACd,GAAIA,IAAS6c,EAEX,OADA9J,EAAQO,QAAQtT,GACTkd,EAET,IAAMnJ,EAAQhB,EAAQQ,KAAK,qBAGrBuD,EAAQkP,GAAkBhmB,GAI1B6d,GACH/G,GAAoB,IAAVA,GAAe/E,GAAWmU,EAAiBlb,SAAShL,GAC3DglB,GACHjT,GAAsB,IAAXA,GAAgB+E,GAAUoP,EAAiBlb,SAASyI,GAGlE,OAFAM,EAAMoS,MAAQ3V,QAAmB,KAAXqM,EAAgBgB,EAAOA,IAAS9L,IAAWiT,IACjEjR,EAAMqS,OAAS5V,QAAmB,KAAXqM,EAAgBmI,EAAQA,IAAUlO,IAAU+G,IAC5D7K,EAAGhT,EACZ,CACF,EAlOEiZ,WAQF,SAA6BlE,EAAQ6C,GACnC,IAEIiG,EAEAqH,EAEA9L,EAEAiN,EAEAC,EAEAhZ,EAEAiZ,EAEAzQ,EAhBAvP,GAAS,EAsBb,OAASA,EAAQwO,EAAOlZ,QAEtB,GACuB,UAArBkZ,EAAOxO,GAAO,IACY,sBAA1BwO,EAAOxO,GAAO,GAAGvH,MACjB+V,EAAOxO,GAAO,GAAG6f,OAKjB,IAHAvI,EAAOtX,EAGAsX,KAEL,GACsB,SAApB9I,EAAO8I,GAAM,IACY,sBAAzB9I,EAAO8I,GAAM,GAAG7e,MAChB+V,EAAO8I,GAAM,GAAGsI,OAEhBvO,EAAQgB,eAAe7D,EAAO8I,GAAM,IAAInd,WAAW,KACjDkX,EAAQgB,eAAe7D,EAAOxO,GAAO,IAAI7F,WAAW,GACtD,CAKA,IACGqU,EAAO8I,GAAM,GAAGuI,QAAUrR,EAAOxO,GAAO,GAAG4f,SAC3CpR,EAAOxO,GAAO,GAAG7I,IAAIoY,OAASf,EAAOxO,GAAO,GAAGnJ,MAAM0Y,QAAU,MAE7Df,EAAO8I,GAAM,GAAGngB,IAAIoY,OACnBf,EAAO8I,GAAM,GAAGzgB,MAAM0Y,OACtBf,EAAOxO,GAAO,GAAG7I,IAAIoY,OACrBf,EAAOxO,GAAO,GAAGnJ,MAAM0Y,QACzB,GAGF,SAIFxI,EACEyH,EAAO8I,GAAM,GAAGngB,IAAIoY,OAASf,EAAO8I,GAAM,GAAGzgB,MAAM0Y,OAAS,GAC5Df,EAAOxO,GAAO,GAAG7I,IAAIoY,OAASf,EAAOxO,GAAO,GAAGnJ,MAAM0Y,OAAS,EAC1D,EACA,EACN,IAAM1Y,EAAQ5D,OAAOsV,OAAO,CAAC,EAAGiG,EAAO8I,GAAM,GAAGngB,KAC1CA,EAAMlE,OAAOsV,OAAO,CAAC,EAAGiG,EAAOxO,GAAO,GAAGnJ,OAC/CopB,GAAUppB,GAAQkQ,GAClBkZ,GAAU9oB,EAAK4P,GACf+Y,EAAkB,CAChBrnB,KAAMsO,EAAM,EAAI,iBAAmB,mBACnClQ,MAAAA,EACAM,IAAKlE,OAAOsV,OAAO,CAAC,EAAGiG,EAAO8I,GAAM,GAAGngB,MAEzC4oB,EAAkB,CAChBtnB,KAAMsO,EAAM,EAAI,iBAAmB,mBACnClQ,MAAO5D,OAAOsV,OAAO,CAAC,EAAGiG,EAAOxO,GAAO,GAAGnJ,OAC1CM,IAAAA,GAEF0b,EAAO,CACLpa,KAAMsO,EAAM,EAAI,aAAe,eAC/BlQ,MAAO5D,OAAOsV,OAAO,CAAC,EAAGiG,EAAO8I,GAAM,GAAGngB,KACzCA,IAAKlE,OAAOsV,OAAO,CAAC,EAAGiG,EAAOxO,GAAO,GAAGnJ,QAE1C8nB,EAAQ,CACNlmB,KAAMsO,EAAM,EAAI,SAAW,WAC3BlQ,MAAO5D,OAAOsV,OAAO,CAAC,EAAGuX,EAAgBjpB,OACzCM,IAAKlE,OAAOsV,OAAO,CAAC,EAAGwX,EAAgB5oB,MAEzCqX,EAAO8I,GAAM,GAAGngB,IAAMlE,OAAOsV,OAAO,CAAC,EAAGuX,EAAgBjpB,OACxD2X,EAAOxO,GAAO,GAAGnJ,MAAQ5D,OAAOsV,OAAO,CAAC,EAAGwX,EAAgB5oB,KAC3D6oB,EAAa,GAGTxR,EAAO8I,GAAM,GAAGngB,IAAIoY,OAASf,EAAO8I,GAAM,GAAGzgB,MAAM0Y,SACrDyQ,EAAaloB,GAAKkoB,EAAY,CAC5B,CAAC,QAASxR,EAAO8I,GAAM,GAAIjG,GAC3B,CAAC,OAAQ7C,EAAO8I,GAAM,GAAIjG,MAK9B2O,EAAaloB,GAAKkoB,EAAY,CAC5B,CAAC,QAASrB,EAAOtN,GACjB,CAAC,QAASyO,EAAiBzO,GAC3B,CAAC,OAAQyO,EAAiBzO,GAC1B,CAAC,QAASwB,EAAMxB,KAMlB2O,EAAaloB,GACXkoB,EACAtN,GACErB,EAAQhE,OAAO/B,WAAWuT,WAAWxO,KACrC7B,EAAOtW,MAAMof,EAAO,EAAGtX,GACvBqR,IAKJ2O,EAAaloB,GAAKkoB,EAAY,CAC5B,CAAC,OAAQnN,EAAMxB,GACf,CAAC,QAAS0O,EAAiB1O,GAC3B,CAAC,OAAQ0O,EAAiB1O,GAC1B,CAAC,OAAQsN,EAAOtN,KAId7C,EAAOxO,GAAO,GAAG7I,IAAIoY,OAASf,EAAOxO,GAAO,GAAGnJ,MAAM0Y,QACvDA,EAAS,EACTyQ,EAAaloB,GAAKkoB,EAAY,CAC5B,CAAC,QAASxR,EAAOxO,GAAO,GAAIqR,GAC5B,CAAC,OAAQ7C,EAAOxO,GAAO,GAAIqR,MAG7B9B,EAAS,EAEX7E,EAAO8D,EAAQ8I,EAAO,EAAGtX,EAAQsX,EAAO,EAAG0I,GAC3ChgB,EAAQsX,EAAO0I,EAAW1qB,OAASia,EAAS,EAC5C,KACF,CAMNvP,GAAS,EACT,OAASA,EAAQwO,EAAOlZ,QACQ,sBAA1BkZ,EAAOxO,GAAO,GAAGvH,OACnB+V,EAAOxO,GAAO,GAAGvH,KAAO,QAG5B,OAAO+V,CACT,GAyEA,SAASyR,GAAUlgB,EAAOwP,GACxBxP,EAAMxJ,QAAUgZ,EAChBxP,EAAMwP,QAAUA,EAChBxP,EAAMyT,cAAgBjE,CACxB,CCvPO,IAAM2Q,GAAW,CACtB5rB,KAAM,WACN2Y,SAOF,SAA0BT,EAASC,EAAI0D,GACrC,IAAIvD,EAAO,EACX,OAcA,SAAenT,GAMb,OALA+S,EAAQK,MAAM,YACdL,EAAQK,MAAM,kBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,kBACbR,EAAQK,MAAM,oBACPyK,CACT,EAcA,SAASA,EAAK7d,GACZ,OAAIgS,GAAWhS,IACb+S,EAAQO,QAAQtT,GACT0mB,GAEFC,EAAW3mB,EACpB,CAcA,SAAS0mB,EAAmB1mB,GAE1B,OAAa,KAATA,GAAwB,KAATA,GAAwB,KAATA,GAAekS,GAAkBlS,IAEjEmT,EAAO,EACAyT,EAAyB5mB,IAE3B2mB,EAAW3mB,EACpB,CAcA,SAAS4mB,EAAyB5mB,GAChC,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GAChBmT,EAAO,EACA0T,IAKG,KAAT7mB,GAAwB,KAATA,GAAwB,KAATA,GAAekS,GAAkBlS,KAChEmT,IAAS,IAETJ,EAAQO,QAAQtT,GACT4mB,IAETzT,EAAO,EACAwT,EAAW3mB,GACpB,CAYA,SAAS6mB,EAAU7mB,GACjB,OAAa,KAATA,GACF+S,EAAQQ,KAAK,oBACbR,EAAQK,MAAM,kBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,kBACbR,EAAQQ,KAAK,YACNP,GAII,OAAThT,GAA0B,KAATA,GAAwB,KAATA,GAAeoS,GAAapS,GACvD0W,EAAI1W,IAEb+S,EAAQO,QAAQtT,GACT6mB,EACT,CAYA,SAASF,EAAW3mB,GAClB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACT8mB,GAEL3U,GAAWnS,IACb+S,EAAQO,QAAQtT,GACT2mB,GAEFjQ,EAAI1W,EACb,CAYA,SAAS8mB,EAAiB9mB,GACxB,OAAOkS,GAAkBlS,GAAQ+mB,EAAW/mB,GAAQ0W,EAAI1W,EAC1D,CAYA,SAAS+mB,EAAW/mB,GAClB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GAChBmT,EAAO,EACA2T,GAEI,KAAT9mB,GAEF+S,EAAQQ,KAAK,oBAAoBvU,KAAO,gBACxC+T,EAAQK,MAAM,kBACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,kBACbR,EAAQQ,KAAK,YACNP,GAEFgU,EAAWhnB,EACpB,CAcA,SAASgnB,EAAWhnB,GAElB,IAAc,KAATA,GAAekS,GAAkBlS,KAAUmT,IAAS,GAAI,CAC3D,IAAM9G,EAAgB,KAATrM,EAAcgnB,EAAaD,EAExC,OADAhU,EAAQO,QAAQtT,GACTqM,CACT,CACA,OAAOqK,EAAI1W,EACb,CACF,GCzNO,IAAMinB,GAAW,CACtBpsB,KAAM,WACN2Y,SAOF,SAA0BT,EAASC,EAAI0D,GACrC,IAEImG,EAEAtW,EAEAsV,EANExH,EAAO5W,KAOb,OAYA,SAAeuC,GAIb,OAHA+S,EAAQK,MAAM,YACdL,EAAQK,MAAM,gBACdL,EAAQO,QAAQtT,GACT6d,CACT,EAgBA,SAASA,EAAK7d,GACZ,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACT8gB,GAEI,KAAT9gB,GACF+S,EAAQO,QAAQtT,GACT+gB,GAEI,KAAT/gB,GACF+S,EAAQO,QAAQtT,GACTknB,GAILlV,GAAWhS,IACb+S,EAAQO,QAAQtT,GACTmnB,GAEFzQ,EAAI1W,EACb,CAgBA,SAAS8gB,EAAgB9gB,GACvB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTkhB,GAEI,KAATlhB,GACF+S,EAAQO,QAAQtT,GAChBuG,EAAQ,EACD4a,GAELnP,GAAWhS,IACb+S,EAAQO,QAAQtT,GACTf,GAEFyX,EAAI1W,EACb,CAYA,SAASkhB,EAAkBlhB,GACzB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTonB,GAEF1Q,EAAI1W,EACb,CAYA,SAASnB,EAAQmB,GACf,OAAa,OAATA,EACK0W,EAAI1W,GAEA,KAATA,GACF+S,EAAQO,QAAQtT,GACTqnB,GAEL7U,GAAmBxS,IACrB6b,EAAchd,EACPyoB,EAAiBtnB,KAE1B+S,EAAQO,QAAQtT,GACTnB,EACT,CAYA,SAASwoB,EAAarnB,GACpB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTonB,GAEFvoB,EAAQmB,EACjB,CAYA,SAASonB,EAAWpnB,GAClB,OAAgB,KAATA,EACHtC,EAAIsC,GACK,KAATA,EACAqnB,EAAarnB,GACbnB,EAAQmB,EACd,CAYA,SAASmhB,EAAgBnhB,GACvB,IAAMhF,EAAQ,SACd,OAAIgF,IAAShF,EAAM0F,WAAW6F,MAC5BwM,EAAQO,QAAQtT,GACChF,IAAVuL,EAAyBghB,EAAQpG,GAEnCzK,EAAI1W,EACb,CAYA,SAASunB,EAAMvnB,GACb,OAAa,OAATA,EACK0W,EAAI1W,GAEA,KAATA,GACF+S,EAAQO,QAAQtT,GACTwnB,GAELhV,GAAmBxS,IACrB6b,EAAc0L,EACPD,EAAiBtnB,KAE1B+S,EAAQO,QAAQtT,GACTunB,EACT,CAYA,SAASC,EAAWxnB,GAClB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTynB,GAEFF,EAAMvnB,EACf,CAYA,SAASynB,EAASznB,GAChB,OAAa,KAATA,EACKtC,EAAIsC,GAEA,KAATA,GACF+S,EAAQO,QAAQtT,GACTynB,GAEFF,EAAMvnB,EACf,CAYA,SAASf,EAAYe,GACnB,OAAa,OAATA,GAA0B,KAATA,EACZtC,EAAIsC,GAETwS,GAAmBxS,IACrB6b,EAAc5c,EACPqoB,EAAiBtnB,KAE1B+S,EAAQO,QAAQtT,GACTf,EACT,CAYA,SAASioB,EAAYlnB,GACnB,OAAa,OAATA,EACK0W,EAAI1W,GAEA,KAATA,GACF+S,EAAQO,QAAQtT,GACT0nB,GAELlV,GAAmBxS,IACrB6b,EAAcqL,EACPI,EAAiBtnB,KAE1B+S,EAAQO,QAAQtT,GACTknB,EACT,CAYA,SAASQ,EAAiB1nB,GACxB,OAAgB,KAATA,EAActC,EAAIsC,GAAQknB,EAAYlnB,EAC/C,CAYA,SAAS+gB,EAAc/gB,GAErB,OAAIgS,GAAWhS,IACb+S,EAAQO,QAAQtT,GACT2nB,GAEFjR,EAAI1W,EACb,CAYA,SAAS2nB,EAAS3nB,GAEhB,OAAa,KAATA,GAAekS,GAAkBlS,IACnC+S,EAAQO,QAAQtT,GACT2nB,GAEFC,EAAgB5nB,EACzB,CAYA,SAAS4nB,EAAgB5nB,GACvB,OAAIwS,GAAmBxS,IACrB6b,EAAc+L,EACPN,EAAiBtnB,IAEtB0S,GAAc1S,IAChB+S,EAAQO,QAAQtT,GACT4nB,GAEFlqB,EAAIsC,EACb,CAYA,SAASmnB,EAAQnnB,GAEf,OAAa,KAATA,GAAekS,GAAkBlS,IACnC+S,EAAQO,QAAQtT,GACTmnB,GAEI,KAATnnB,GAAwB,KAATA,GAAeyS,GAA0BzS,GACnD6nB,EAAe7nB,GAEjB0W,EAAI1W,EACb,CAYA,SAAS6nB,EAAe7nB,GACtB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTtC,GAII,KAATsC,GAAwB,KAATA,GAAegS,GAAWhS,IAC3C+S,EAAQO,QAAQtT,GACT8nB,GAELtV,GAAmBxS,IACrB6b,EAAcgM,EACPP,EAAiBtnB,IAEtB0S,GAAc1S,IAChB+S,EAAQO,QAAQtT,GACT6nB,GAEFnqB,EAAIsC,EACb,CAYA,SAAS8nB,EAAqB9nB,GAE5B,OACW,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACAkS,GAAkBlS,IAElB+S,EAAQO,QAAQtT,GACT8nB,GAEFC,EAA0B/nB,EACnC,CAaA,SAAS+nB,EAA0B/nB,GACjC,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GACTgoB,GAELxV,GAAmBxS,IACrB6b,EAAckM,EACPT,EAAiBtnB,IAEtB0S,GAAc1S,IAChB+S,EAAQO,QAAQtT,GACT+nB,GAEFF,EAAe7nB,EACxB,CAaA,SAASgoB,EAA4BhoB,GACnC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEO0W,EAAI1W,GAEA,KAATA,GAAwB,KAATA,GACjB+S,EAAQO,QAAQtT,GAChB6c,EAAS7c,EACFioB,GAELzV,GAAmBxS,IACrB6b,EAAcmM,EACPV,EAAiBtnB,IAEtB0S,GAAc1S,IAChB+S,EAAQO,QAAQtT,GACTgoB,IAETjV,EAAQO,QAAQtT,GACTkoB,EACT,CAYA,SAASD,EAA4BjoB,GACnC,OAAIA,IAAS6c,GACX9J,EAAQO,QAAQtT,GAChB6c,OAASjX,EACFuiB,GAEI,OAATnoB,EACK0W,EAAI1W,GAETwS,GAAmBxS,IACrB6b,EAAcoM,EACPX,EAAiBtnB,KAE1B+S,EAAQO,QAAQtT,GACTioB,EACT,CAYA,SAASC,EAA8BloB,GACrC,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,GACS,KAATA,EAEO0W,EAAI1W,GAEA,KAATA,GAAwB,KAATA,GAAeyS,GAA0BzS,GACnD6nB,EAAe7nB,IAExB+S,EAAQO,QAAQtT,GACTkoB,EACT,CAaA,SAASC,EAAiCnoB,GACxC,OAAa,KAATA,GAAwB,KAATA,GAAeyS,GAA0BzS,GACnD6nB,EAAe7nB,GAEjB0W,EAAI1W,EACb,CAYA,SAAStC,EAAIsC,GACX,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,gBACbR,EAAQQ,KAAK,YACNP,GAEF0D,EAAI1W,EACb,CAgBA,SAASsnB,EAAiBtnB,GAKxB,OAJA+S,EAAQQ,KAAK,gBACbR,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACN6U,CACT,CAgBA,SAASA,EAAgBpoB,GAGvB,OAAO0S,GAAc1S,GACjB8S,GACEC,EACAsV,EACA,aACAhU,EAAKT,OAAO/B,WAAW8E,QAAQC,KAAK5L,SAAS,qBACzCpF,EACA,EANNkN,CAOE9S,GACFqoB,EAAsBroB,EAC5B,CAgBA,SAASqoB,EAAsBroB,GAE7B,OADA+S,EAAQK,MAAM,gBACPyI,EAAY7b,EACrB,CACF,GC9rBO,IAAMsoB,GAAiB,CAC5BztB,KAAM,iBACN2Y,SAQF,SAAgCT,EAASC,EAAI0D,GAC3C,IAAMrC,EAAO5W,KACb,OAYA,SAAeuC,GAMb,OALA+S,EAAQK,MAAM,aACdL,EAAQK,MAAM,eACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,eACbR,EAAQQ,KAAK,aACNuD,CACT,EAGA,SAASA,EAAM9W,GAKb,OAAgB,KAATA,GAAe,2BAA4BqU,EAAKT,OAAO/B,WAC1D6E,EAAI1W,GACJgT,EAAGhT,EACT,CACF,EAxCEiZ,WAAYqL,GAASrL,YCJhB,IAAMsP,GAAkB,CAC7B1tB,KAAM,kBACN2Y,SAOF,SAAiCT,EAASC,EAAI0D,GAC5C,OAaA,SAAe1W,GAGb,OAFA+S,EAAQK,MAAM,mBACdL,EAAQO,QAAQtT,GACT8W,CACT,EAaA,SAASA,EAAM9W,GACb,OAAIwS,GAAmBxS,IACrB+S,EAAQQ,KAAK,mBACNP,EAAGhT,IAEL0W,EAAI1W,EACb,CACF,GC5CO,mBAAMwoB,GAAW,CACtB3tB,KAAM,WACN2Y,SA8EF,SAA0BT,EAASC,EAAI0D,GACrC,IAGIvD,EAEAY,EAJAkP,EAAW,EAKf,OAcA,SAAejjB,GAGb,OAFA+S,EAAQK,MAAM,YACdL,EAAQK,MAAM,oBACPgN,EAAapgB,EACtB,EAYA,SAASogB,EAAapgB,GACpB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GAChBijB,IACO7C,IAETrN,EAAQQ,KAAK,oBACNkV,EAAQzoB,GACjB,CAYA,SAASyoB,EAAQzoB,GAEf,OAAa,OAATA,EACK0W,EAAI1W,GAMA,KAATA,GACF+S,EAAQK,MAAM,SACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,SACNkV,GAII,KAATzoB,GACF+T,EAAQhB,EAAQK,MAAM,oBACtBD,EAAO,EACA6P,EAAchjB,IAEnBwS,GAAmBxS,IACrB+S,EAAQK,MAAM,cACdL,EAAQO,QAAQtT,GAChB+S,EAAQQ,KAAK,cACNkV,IAIT1V,EAAQK,MAAM,gBACP1I,EAAK1K,GACd,CAYA,SAAS0K,EAAK1K,GACZ,OACW,OAATA,GACS,KAATA,GACS,KAATA,GACAwS,GAAmBxS,IAEnB+S,EAAQQ,KAAK,gBACNkV,EAAQzoB,KAEjB+S,EAAQO,QAAQtT,GACT0K,EACT,CAYA,SAASsY,EAAchjB,GAErB,OAAa,KAATA,GACF+S,EAAQO,QAAQtT,GAChBmT,IACO6P,GAIL7P,IAAS8P,GACXlQ,EAAQQ,KAAK,oBACbR,EAAQQ,KAAK,YACNP,EAAGhT,KAIZ+T,EAAM/U,KAAO,eACN0L,EAAK1K,GACd,CACF,EA7NE6P,QAMF,SAAyBkF,GACvB,IAGIxO,EAEA6M,EALAsV,EAAgB3T,EAAOlZ,OAAS,EAChC8sB,EAAiB,EAOrB,IACsC,eAAnC5T,EAAO4T,GAAgB,GAAG3pB,MACU,UAAnC+V,EAAO4T,GAAgB,GAAG3pB,QACO,eAAlC+V,EAAO2T,GAAe,GAAG1pB,MACU,UAAlC+V,EAAO2T,GAAe,GAAG1pB,MAK3B,IAHAuH,EAAQoiB,IAGCpiB,EAAQmiB,GACf,GAA8B,iBAA1B3T,EAAOxO,GAAO,GAAGvH,KAAyB,CAE5C+V,EAAO4T,GAAgB,GAAG3pB,KAAO,kBACjC+V,EAAO2T,GAAe,GAAG1pB,KAAO,kBAChC2pB,GAAkB,EAClBD,GAAiB,EACjB,KACF,CAKJniB,EAAQoiB,EAAiB,EACzBD,IACA,OAASniB,GAASmiB,QACF9iB,IAAVwN,EACE7M,IAAUmiB,GAA2C,eAA1B3T,EAAOxO,GAAO,GAAGvH,OAC9CoU,EAAQ7M,GAGVA,IAAUmiB,GACgB,eAA1B3T,EAAOxO,GAAO,GAAGvH,OAEjB+V,EAAO3B,GAAO,GAAGpU,KAAO,eACpBuH,IAAU6M,EAAQ,IACpB2B,EAAO3B,GAAO,GAAG1V,IAAMqX,EAAOxO,EAAQ,GAAG,GAAG7I,IAC5CqX,EAAO9D,OAAOmC,EAAQ,EAAG7M,EAAQ6M,EAAQ,GACzCsV,GAAiBniB,EAAQ6M,EAAQ,EACjC7M,EAAQ6M,EAAQ,GAElBA,OAAQxN,GAGZ,OAAOmP,CACT,EA1DEtB,SAgEF,SAAkBzT,GAEhB,OACW,KAATA,GACgD,oBAAhDvC,KAAKsX,OAAOtX,KAAKsX,OAAOlZ,OAAS,GAAG,GAAGmD,IAE3C,GCzDO,IAAMiV,IAAQ2U,GAAG,CAAC,GAAJC,EAAAA,GAAAA,GAAAD,GAClB,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAK1X,KAAI2X,EAAAA,GAAAA,GAAAD,GACT,GAAKhL,IAAUgL,IAIL/U,IAAcgV,EAAAA,GAAAA,GAAA,GACxB,GAAKzJ,IAIKtG,IAAWgQ,GAAG,CAAC,GAAJD,EAAAA,GAAAA,GAAAC,IACpB,EAAI9I,KAAY6I,EAAAA,GAAAA,GAAAC,IAChB,EAAI9I,KAAY6I,EAAAA,GAAAA,GAAAC,GACjB,GAAK9I,IAAY8I,IAIP9S,IAAI+S,GAAG,CAAC,GAAJF,EAAAA,GAAAA,GAAAE,GACd,GAAK5I,KAAU0I,EAAAA,GAAAA,GAAAE,GACf,GAAKnM,KAAaiM,EAAAA,GAAAA,GAAAE,GAClB,GAAK,CAACzI,GAAiB1D,MAAciM,EAAAA,GAAAA,GAAAE,GACrC,GAAKpI,KAAQkI,EAAAA,GAAAA,GAAAE,GACb,GAAKzI,KAAeuI,EAAAA,GAAAA,GAAAE,GACpB,GAAKnM,KAAaiM,EAAAA,GAAAA,GAAAE,GAClB,GAAKnG,KAAUiG,EAAAA,GAAAA,GAAAE,GACf,IAAMnG,IAAUmG,IAINnpB,IAAMopB,GAAG,CAAC,GAAJH,EAAAA,GAAAA,GAAAG,GAChB,GAAKjF,KAAkB8E,EAAAA,GAAAA,GAAAG,GACvB,GAAK5E,IAAe4E,IAIV5P,IAAI6P,GAAG,CAAC,GAAJJ,EAAAA,GAAAA,GAAAI,IACb,EAAI5E,KAAUwE,EAAAA,GAAAA,GAAAI,IACd,EAAI5E,KAAUwE,EAAAA,GAAAA,GAAAI,IACd,EAAI5E,KAAUwE,EAAAA,GAAAA,GAAAI,GACf,GAAKlD,KAAe8C,EAAAA,GAAAA,GAAAI,GACpB,GAAKlF,KAAkB8E,EAAAA,GAAAA,GAAAI,GACvB,GAAKhD,KAAS4C,EAAAA,GAAAA,GAAAI,GACd,GAAK,CAACxC,GAAUQ,MAAS4B,EAAAA,GAAAA,GAAAI,GACzB,GAAKX,KAAcO,EAAAA,GAAAA,GAAAI,GACnB,GAAK,CAACV,GAAiBnE,MAAgByE,EAAAA,GAAAA,GAAAI,GACvC,GAAK3E,KAAQuE,EAAAA,GAAAA,GAAAI,GACb,GAAKhD,KAAS4C,EAAAA,GAAAA,GAAAI,GACd,GAAKT,IAAQS,IAIH7D,GAAa,CACxBxO,KAAM,CAACqP,GAAWiD,KAIPhD,GAAmB,CAC9BtP,KAAM,CAAC,GAAI,KAIAD,GAAU,CACrBC,KAAM,ICpFD,SAASrS,GAAM3J,GACpB,IAAM8T,EAAW9T,GAAW,CAAC,EACvBiX,E1CHD,SAA2BsX,GAKhC,IAHA,IAAMpY,EAAM,CAAC,EACTxK,GAAS,IAEJA,EAAQ4iB,EAAWttB,QAC1B2V,GAAgBT,EAAKoY,EAAW5iB,IAGlC,OAAOwK,CACT,C0CLIqY,CAAkB,CAACC,GAAiBjc,QAAArC,EAAAA,EAAAA,GAAM2D,EAASya,YAAc,MAG7DvV,EAAS,CACbgM,QAAS,GACThK,KAAM,CAAC,EACP/D,WAAAA,EACAjU,QAASwI,EAAOxI,IAChBqW,SAAU7N,EAAO6N,IACjB+B,KAAM5P,EAAO4P,IACbpW,OAAQwG,EAAOxG,IACfwZ,KAAMhT,EAAOgT,KAEf,OAAOxF,EAKP,SAASxN,EAAOyS,GACd,OAEA,SAAiBvH,GACf,OAAO0I,GAAgBpG,EAAQiF,EAASvH,EAC1C,CACF,CACF,CClCA,IAAMgY,GAAS,cCDR,SAASC,GAAgCvuB,EAAOyS,GACrD,IAAMzN,EAAOwO,OAAOgb,SAASxuB,EAAOyS,GACpC,OAEEzN,EAAO,GACE,KAATA,GACCA,EAAO,IAAMA,EAAO,IAEpBA,EAAO,KAAOA,EAAO,KAErBA,EAAO,OAASA,EAAO,OAEvBA,EAAO,OAASA,EAAO,OACL,SAAX,MAAPA,IACkB,SAAX,MAAPA,IAEDA,EAAO,QAEA,SAEFM,OAAOC,aAAaP,EAC7B,CCjCA,IAAMypB,GACJ,oEAwBF,SAASC,GAAOC,EAAIC,EAAIC,GACtB,GAAID,EAEF,OAAOA,EAKT,GAAa,KADAC,EAAGnpB,WAAW,GACV,CACf,IAAM0a,EAAOyO,EAAGnpB,WAAW,GACrBopB,EAAe,MAAT1O,GAAyB,KAATA,EAC5B,OAAOmO,GAAgCM,EAAGprB,MAAMqrB,EAAM,EAAI,GAAIA,EAAM,GAAK,GAC3E,CACA,OAAOhG,GAA8B+F,IAAOF,CAC9C,CCkHA,IAAM1b,GAAM,CAAC,EAAEvU,eAYFqwB,GAcX,SAAU/uB,EAAOoQ,EAAUxQ,GAKzB,MAJwB,kBAAbwQ,IACTxQ,EAAUwQ,EACVA,OAAWxF,GAcjB,SAAkBhL,GAEhB,IAAMovB,EAAS,CACbC,WAAY,GACZC,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,UACjE9W,MAAO,CACLqT,SAAU0D,EAAOC,IACjBC,iBAAkBC,EAClBC,cAAeD,EACfE,WAAYL,EAAO3J,IACnB5C,WAAYuM,EAAOvM,GACnBwG,gBAAiBkG,EACjBvG,mBAAoBuG,EACpB1H,WAAYuH,EAAOM,GACnBC,oBAAqBjgB,EACrBkgB,oBAAqBlgB,EACrBuV,aAAcmK,EAAOM,EAAUhgB,GAC/B+d,SAAU2B,EAAO3B,EAAU/d,GAC3BmgB,aAAcN,EACd5f,KAAM4f,EACNO,cAAeP,EACflL,WAAY+K,EAAO/K,GACnB0L,4BAA6BrgB,EAC7BsgB,sBAAuBtgB,EACvBugB,sBAAuBvgB,EACvBwgB,SAAUd,EAAOc,IACjB1C,gBAAiB4B,EAAOe,IACxBC,kBAAmBhB,EAAOe,IAC1BvK,SAAUwJ,EAAOiB,GAAM3gB,GACvB4gB,aAAcf,EACdrD,SAAUkD,EAAOiB,GAAM3gB,GACvB6gB,aAAchB,EACdiB,MAAOpB,EAAOoB,IACdpG,MAAO1a,EACP2f,KAAMD,EAAOC,IACboB,SAAUrB,EAAOqB,IACjBC,cAAeC,EACfC,YAAaxB,EAAOjZ,GAAM0a,GAC1BC,cAAe1B,EAAOjZ,IACtBqP,UAAW4J,EAAO5J,IAClBuL,UAAWC,EACXC,gBAAiBvhB,EACjBwhB,0BAA2BxhB,EAC3ByhB,oBAAqBzhB,EACrB0hB,cAAehC,EAAO3J,IACtB4L,OAAQjC,EAAOiC,IACfxP,cAAeuN,EAAOvN,KAExBrJ,KAAM,CACJiX,WAAY6B,IACZC,mBAAoBC,EACpB9F,SAAU4F,IACV9B,cAAeiC,EACfnC,iBAAkBoC,EAClB7O,WAAYyO,IACZK,qBAAsBC,EACtBC,oCAAqCC,EACrCC,gCAAiCD,EACjCE,wBAAyBC,EACzBpK,WAAYyJ,EAAOY,GACnBC,gBAAiBC,EACjBzC,oBAAqB0C,EACrBzC,oBAAqB0C,EACrBxC,cAAe8B,EACf3M,aAAcqM,EAAOiB,GACrB9E,SAAU6D,EAAOkB,GACjB3C,aAAc+B,EACdjiB,KAAMiiB,EACNvN,WAAYiN,IACZvB,4BAA6B0C,EAC7BzC,sBAAuB0C,EACvBzC,sBAAuB0C,EACvBzC,SAAUoB,IACV9D,gBAAiB8D,EAAOsB,GACxBxC,kBAAmBkB,EAAOsB,GAC1BhN,SAAU0L,EAAOuB,GACjBvC,aAAcsB,EACd1F,SAAUoF,EAAOwB,GACjBvC,aAAcqB,EACdpB,MAAOc,EAAOyB,GACd3I,MAAO4I,EACPC,UAAWC,EACX5J,WAAY6J,EACZ9D,KAAMiC,EAAO8B,GACb3C,SAAUa,IACVV,YAAaU,IACbR,cAAeQ,IACf9L,UAAW8L,IACXL,gBAAiBoC,EACjBnC,0BAA2BoC,EAC3BnC,oBAAqBoC,EACrBC,SAAUC,EACVrC,cAAeE,EAAOoC,GACtBC,0BAA2BC,EAC3BC,kBAAmBC,EACnBzC,OAAQC,IACRzP,cAAeyP,MAGnByC,GAAU9E,GAASpvB,GAAW,CAAC,GAAGm0B,iBAAmB,IAGrD,IAAMrkB,EAAO,CAAC,EACd,OAAOiF,EAUP,SAASA,EAAQoF,GAqBf,IAnBA,IAAIhF,EAAO,CACT/Q,KAAM,OACNgS,SAAU,IAGN4G,EAAU,CACdzQ,MAAO,CAAC4I,GACRif,WAAY,GACZhF,OAAAA,EACA5W,MAAAA,EACAG,KAAAA,EACA9I,OAAAA,EACAwkB,OAAAA,EACAC,QAAAA,EACAC,QAAAA,GAGIC,EAAY,GACd7oB,GAAS,IACJA,EAAQwO,EAAOlZ,QAAQ,CAG9B,GAC4B,gBAA1BkZ,EAAOxO,GAAO,GAAGvH,MACS,kBAA1B+V,EAAOxO,GAAO,GAAGvH,KAEjB,GAAyB,UAArB+V,EAAOxO,GAAO,GAChB6oB,EAAU/wB,KAAKkI,QAGfA,EAAQ8oB,EAAYta,EADPqa,EAAUhjB,MACW7F,EAGxC,CAEA,IADAA,GAAS,IACAA,EAAQwO,EAAOlZ,QAAQ,CAC9B,IAAMyzB,EAAUtF,EAAOjV,EAAOxO,GAAO,IACjC0H,GAAI9T,KAAKm1B,EAASva,EAAOxO,GAAO,GAAGvH,OACrCswB,EAAQva,EAAOxO,GAAO,GAAGvH,MAAM7E,KAC7BX,OAAOsV,OACL,CACE8J,eAAgB7D,EAAOxO,GAAO,GAAGqS,gBAEnChB,GAEF7C,EAAOxO,GAAO,GAGpB,CAGA,GAAIqR,EAAQoX,WAAWnzB,OAAS,EAAG,CACjC,IAAM8c,EAAOf,EAAQoX,WAAWpX,EAAQoX,WAAWnzB,OAAS,IAC5C8c,EAAK,IAAM4W,IACnBp1B,KAAKyd,OAAShS,EAAW+S,EAAK,GACxC,CA0BA,IAvBA5I,EAAK5S,SAAW,CACdC,MAAOkJ,GACLyO,EAAOlZ,OAAS,EACZkZ,EAAO,GAAG,GAAG3X,MACb,CACEC,KAAM,EACNP,OAAQ,EACRgZ,OAAQ,IAGhBpY,IAAK4I,GACHyO,EAAOlZ,OAAS,EACZkZ,EAAOA,EAAOlZ,OAAS,GAAG,GAAG6B,IAC7B,CACEL,KAAM,EACNP,OAAQ,EACRgZ,OAAQ,KAMlBvP,GAAS,IACAA,EAAQyjB,EAAOC,WAAWpuB,QACjCkU,EAAOia,EAAOC,WAAW1jB,GAAOwJ,IAASA,EAE3C,OAAOA,CACT,CAQA,SAASsf,EAAYta,EAAQ3X,EAAOvB,GAYlC,IAXA,IAII2vB,EAEAtU,EAEAsY,EAEAvS,EAVA1W,EAAQnJ,EAAQ,EAChBqyB,GAAoB,EACpBC,GAAa,IASRnpB,GAAS1K,GAAQ,CACxB,IAAMob,EAAQlC,EAAOxO,GAmCrB,GAjCoB,kBAAlB0Q,EAAM,GAAGjY,MACS,gBAAlBiY,EAAM,GAAGjY,MACS,eAAlBiY,EAAM,GAAGjY,MAEQ,UAAbiY,EAAM,GACRwY,IAEAA,IAEFxS,OAAWrX,GACgB,oBAAlBqR,EAAM,GAAGjY,KACD,UAAbiY,EAAM,MAENuU,GACCvO,GACAwS,GACAD,IAEDA,EAAsBjpB,GAExB0W,OAAWrX,GAGK,eAAlBqR,EAAM,GAAGjY,MACS,kBAAlBiY,EAAM,GAAGjY,MACS,mBAAlBiY,EAAM,GAAGjY,MACS,mBAAlBiY,EAAM,GAAGjY,MACS,6BAAlBiY,EAAM,GAAGjY,OAITie,OAAWrX,IAGT6pB,GACa,UAAbxY,EAAM,IACY,mBAAlBA,EAAM,GAAGjY,OACY,IAAtBywB,GACc,SAAbxY,EAAM,KACa,kBAAlBA,EAAM,GAAGjY,MACU,gBAAlBiY,EAAM,GAAGjY,MACb,CACA,GAAIwsB,EAAU,CACZ,IAAImE,EAAYppB,EAEhB,IADA2Q,OAAYtR,EACL+pB,KAAa,CAClB,IAAMC,EAAY7a,EAAO4a,GACzB,GACwB,eAAtBC,EAAU,GAAG5wB,MACS,oBAAtB4wB,EAAU,GAAG5wB,KACb,CACA,GAAqB,SAAjB4wB,EAAU,GAAe,SACzB1Y,IACFnC,EAAOmC,GAAW,GAAGlY,KAAO,kBAC5B0wB,GAAa,GAEfE,EAAU,GAAG5wB,KAAO,aACpBkY,EAAYyY,CACd,MAAO,GACiB,eAAtBC,EAAU,GAAG5wB,MACS,qBAAtB4wB,EAAU,GAAG5wB,MACS,+BAAtB4wB,EAAU,GAAG5wB,MACS,qBAAtB4wB,EAAU,GAAG5wB,MACS,mBAAtB4wB,EAAU,GAAG5wB,KAIb,KAEJ,CAEEwwB,KACEtY,GAAasY,EAAsBtY,KAErCsU,EAASqE,SAAU,GAIrBrE,EAAS9tB,IAAMlE,OAAOsV,OACpB,CAAC,EACDoI,EAAYnC,EAAOmC,GAAW,GAAG9Z,MAAQ6Z,EAAM,GAAGvZ,KAEpDqX,EAAO9D,OAAOiG,GAAa3Q,EAAO,EAAG,CAAC,OAAQilB,EAAUvU,EAAM,KAC9D1Q,IACA1K,GACF,CAGsB,mBAAlBob,EAAM,GAAGjY,OACXwsB,EAAW,CACTxsB,KAAM,WACN6wB,SAAS,EACTzyB,MAAO5D,OAAOsV,OAAO,CAAC,EAAGmI,EAAM,GAAG7Z,OAElCM,SAAKkI,GAGPmP,EAAO9D,OAAO1K,EAAO,EAAG,CAAC,QAASilB,EAAUvU,EAAM,KAClD1Q,IACA1K,IACA2zB,OAAsB5pB,EACtBqX,GAAW,EAEf,CACF,CAEA,OADAlI,EAAO3X,GAAO,GAAGyyB,QAAUH,EACpB7zB,CACT,CAcA,SAASqzB,EAAQ50B,EAAKU,GACpB0P,EAAKpQ,GAAOU,CACd,CAYA,SAASm0B,EAAQ70B,GACf,OAAOoQ,EAAKpQ,EACd,CAYA,SAAS6vB,EAAO/jB,EAAQ0pB,GACtB,OAAOjS,EAOP,SAASA,EAAK9J,GACZX,EAAMjZ,KAAKsD,KAAM2I,EAAO2N,GAAQA,GAC5B+b,GAAKA,EAAI31B,KAAKsD,KAAMsW,EAC1B,CACF,CAMA,SAAStJ,IACPhN,KAAK0J,MAAM9I,KAAK,CACdW,KAAM,WACNgS,SAAU,IAEd,CAgBA,SAASoC,EAAM9V,EAAMyW,EAAOgc,GAU1B,OATetyB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAEvCmV,SAAS3S,KAAKf,GACrBG,KAAK0J,MAAM9I,KAAKf,GAChBG,KAAKuxB,WAAW3wB,KAAK,CAAC0V,EAAOgc,IAE7BzyB,EAAKH,SAAW,CACdC,MAAOkJ,GAAMyN,EAAM3W,QAEdE,CACT,CAUA,SAAS+uB,EAAOyD,GACd,OAAO9K,EAOP,SAASA,EAAMjR,GACT+b,GAAKA,EAAI31B,KAAKsD,KAAMsW,GACxBR,EAAKpZ,KAAKsD,KAAMsW,EAClB,CACF,CAYA,SAASR,EAAKQ,EAAOic,GACnB,IAAM1yB,EAAOG,KAAK0J,MAAMiF,MAClByR,EAAOpgB,KAAKuxB,WAAW5iB,MAC7B,IAAKyR,EACH,MAAM,IAAI5f,MACR,iBACE8V,EAAM/U,KACN,MACAqH,EAAkB,CAChBjJ,MAAO2W,EAAM3W,MACbM,IAAKqW,EAAMrW,MAEb,yBAWN,OATWmgB,EAAK,GAAG7e,OAAS+U,EAAM/U,OAC5BgxB,EACFA,EAAY71B,KAAKsD,KAAMsW,EAAO8J,EAAK,KAEnBA,EAAK,IAAM0R,IACnBp1B,KAAKsD,KAAMsW,EAAO8J,EAAK,KAGnCvgB,EAAKH,SAASO,IAAM4I,GAAMyN,EAAMrW,KACzBJ,CACT,CAMA,SAAS2xB,IACP,OhDlpBG,SAAkBj0B,EAAOJ,GAC9B,IAAM8T,EAAW9T,GAAW8V,EAQ5B,OAAOC,EAAI3V,EAN2B,mBAA7B0T,EAASkC,iBACZlC,EAASkC,gBAGmB,mBAAzBlC,EAASmC,aAA4BnC,EAASmC,YAGzD,CgDwoBWjX,CAAS6D,KAAK0J,MAAMiF,MAC7B,CAUA,SAASwf,IACPsD,EAAQ,+BAA+B,EACzC,CAMA,SAASxD,EAAqB3X,GACxBob,EAAQ,iCACO1xB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCuB,MAAQoR,OAAOgb,SAAS/rB,KAAKmb,eAAe7E,GAAQ,IAC7Dmb,EAAQ,+BAEZ,CAMA,SAAS9B,IACP,IAAM1iB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCo0B,KAAOvlB,CACd,CAMA,SAAS2iB,IACP,IAAM3iB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvC2nB,KAAO9Y,CACd,CAMA,SAASyiB,IAEHgC,EAAQ,oBACZ1xB,KAAKgN,SACLykB,EAAQ,kBAAkB,GAC5B,CAMA,SAASjC,IACP,IAAMviB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCb,MAAQ0P,EAAKhO,QAAQ,2BAA4B,IACtDwyB,EAAQ,iBACV,CAMA,SAAS5B,IACP,IAAM5iB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCb,MAAQ0P,EAAKhO,QAAQ,eAAgB,GAC5C,CAMA,SAAS+wB,EAA4B1Z,GACnC,IAAMoR,EAAQ1nB,KAAKwxB,SACb3xB,EAAOG,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAC5CyB,EAAK6nB,MAAQA,EACb7nB,EAAK+hB,WAAaH,GAChBzhB,KAAKmb,eAAe7E,IACpBoL,aACJ,CAMA,SAASuO,IACP,IAAMhjB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCq0B,MAAQxlB,CACf,CAMA,SAAS8iB,IACP,IAAM9iB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvC4L,IAAMiD,CACb,CAMA,SAAS6hB,EAAyBxY,GAChC,IAAMzW,EAAOG,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAC5C,IAAKyB,EAAK6yB,MAAO,CACf,IAAMA,EAAQ1yB,KAAKmb,eAAe7E,GAAOlY,OACzCyB,EAAK6yB,MAAQA,CACf,CACF,CAMA,SAAStB,IACPK,EAAQ,gCAAgC,EAC1C,CAMA,SAASP,EAAgC5a,GAC1BtW,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCs0B,MAAqD,KAA7C1yB,KAAKmb,eAAe7E,GAAOrT,WAAW,GAAY,EAAI,CACrE,CAMA,SAAS+tB,IACPS,EAAQ,+BACV,CAOA,SAAS5E,EAAYvW,GACnB,IAAMzW,EAAOG,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACxC8c,EAAOrb,EAAK0T,SAAS1T,EAAK0T,SAASnV,OAAS,GAC3C8c,GAAsB,SAAdA,EAAK3Z,QAEhB2Z,EAAOS,MAEFjc,SAAW,CACdC,MAAOkJ,GAAMyN,EAAM3W,QAGrBE,EAAK0T,SAAS3S,KAAKsa,IAErBlb,KAAK0J,MAAM9I,KAAKsa,EAClB,CAOA,SAASgU,EAAW5Y,GAClB,IAAM4E,EAAOlb,KAAK0J,MAAMiF,MACxBuM,EAAK3d,OAASyC,KAAKmb,eAAe7E,GAClC4E,EAAKxb,SAASO,IAAM4I,GAAMyN,EAAMrW,IAClC,CAOA,SAASwwB,EAAiBna,GACxB,IAAM6D,EAAUna,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAE/C,GAAIszB,EAAQ,eAIV,OAHavX,EAAQ5G,SAAS4G,EAAQ5G,SAASnV,OAAS,GACnDsB,SAASO,IAAM4I,GAAMyN,EAAMrW,UAChCwxB,EAAQ,gBAIPC,EAAQ,iCACTnF,EAAOE,eAAelf,SAAS4M,EAAQ5Y,QAEvCsrB,EAAYnwB,KAAKsD,KAAMsW,GACvB4Y,EAAWxyB,KAAKsD,KAAMsW,GAE1B,CAOA,SAAS4Z,IACPuB,EAAQ,eAAe,EACzB,CAOA,SAAStB,IACP,IAAMljB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCb,MAAQ0P,CACf,CAOA,SAASmjB,IACP,IAAMnjB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCb,MAAQ0P,CACf,CAOA,SAAS6iB,IACP,IAAM7iB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCb,MAAQ0P,CACf,CAOA,SAASyjB,IACP,IAAM7wB,EAAOG,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAI5C,GAAIszB,EAAQ,eAAgB,CAE1B,IAAMiB,EAAgBjB,EAAQ,kBAAoB,WAClD7xB,EAAK0B,MAAQ,YAEb1B,EAAK8yB,cAAgBA,SAEd9yB,EAAKmK,WACLnK,EAAK4yB,KACd,aAES5yB,EAAK+hB,kBAEL/hB,EAAK6nB,MAEd+J,EAAQ,gBACV,CAOA,SAASpB,IACP,IAAMxwB,EAAOG,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAI5C,GAAIszB,EAAQ,eAAgB,CAE1B,IAAMiB,EAAgBjB,EAAQ,kBAAoB,WAClD7xB,EAAK0B,MAAQ,YAEb1B,EAAK8yB,cAAgBA,SAEd9yB,EAAKmK,WACLnK,EAAK4yB,KACd,aAES5yB,EAAK+hB,kBAEL/hB,EAAK6nB,MAEd+J,EAAQ,gBACV,CAOA,SAASjB,EAAgBla,GACvB,IAAMnU,EAASnC,KAAKmb,eAAe7E,GAC7Bsc,EAAW5yB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAGhDw0B,EAASlL,MDp9BN,SAAsBnqB,GAC3B,OAAOA,EAAM0B,QAAQ+sB,GAA4BC,GACnD,CCk9BqB4G,CAAa1wB,GAE9BywB,EAAShR,WAAaH,GAAoBtf,GAAQuf,aACpD,CAOA,SAAS4O,IACP,IAAMwC,EAAW9yB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAC1Cb,EAAQyC,KAAKwxB,SACb3xB,EAAOG,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAG5C,GADAqzB,EAAQ,eAAe,GACL,SAAd5xB,EAAK0B,KAAiB,CAGxB,IAAMgS,EAAWuf,EAASvf,SAC1B1T,EAAK0T,SAAWA,CAClB,MACE1T,EAAKwT,IAAM9V,CAEf,CAOA,SAASqzB,IACP,IAAM3jB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvC4L,IAAMiD,CACb,CAOA,SAAS4jB,IACP,IAAM5jB,EAAOjN,KAAKwxB,SACLxxB,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvCq0B,MAAQxlB,CACf,CAOA,SAAS8jB,IACPU,EAAQ,cACV,CAOA,SAASnD,IACPmD,EAAQ,gBAAiB,YAC3B,CAOA,SAASd,EAAsBra,GAC7B,IAAMoR,EAAQ1nB,KAAKwxB,SACb3xB,EAAOG,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GAG5CyB,EAAK6nB,MAAQA,EAEb7nB,EAAK+hB,WAAaH,GAChBzhB,KAAKmb,eAAe7E,IACpBoL,cACF+P,EAAQ,gBAAiB,OAC3B,CAOA,SAASrC,EAA+B9Y,GACtCmb,EAAQ,yBAA0Bnb,EAAM/U,KAC1C,CAMA,SAASguB,EAA8BjZ,GACrC,IAGI/Y,EAHE0P,EAAOjN,KAAKmb,eAAe7E,GAC3B/U,EAAOmwB,EAAQ,0BAGjBnwB,GACFhE,EAAQuuB,GACN7e,EACS,oCAAT1L,EAA6C,GAAK,IAEpDkwB,EAAQ,2BAGRl0B,EADe8oB,GAA8BpZ,GAG/C,IAAMiO,EAAOlb,KAAK0J,MAAMiF,MACxBuM,EAAK3d,OAASA,EACd2d,EAAKxb,SAASO,IAAM4I,GAAMyN,EAAMrW,IAClC,CAMA,SAAS+uB,EAAuB1Y,GAC9B4Y,EAAWxyB,KAAKsD,KAAMsW,GACTtW,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvC4L,IAAMhK,KAAKmb,eAAe7E,EACjC,CAMA,SAASyY,EAAoBzY,GAC3B4Y,EAAWxyB,KAAKsD,KAAMsW,GACTtW,KAAK0J,MAAM1J,KAAK0J,MAAMtL,OAAS,GACvC4L,IAAM,UAAYhK,KAAKmb,eAAe7E,EAC7C,CAOA,SAAS6J,IACP,MAAO,CACL5e,KAAM,aACNgS,SAAU,GAEd,CAGA,SAASyZ,IACP,MAAO,CACLzrB,KAAM,OACNixB,KAAM,KACNzM,KAAM,KACNxoB,MAAO,GAEX,CAGA,SAASwtB,IACP,MAAO,CACLxpB,KAAM,aACNhE,MAAO,GAEX,CAGA,SAASokB,IACP,MAAO,CACLpgB,KAAM,aACNqgB,WAAY,GACZ8F,MAAO,KACP+K,MAAO,KACPzoB,IAAK,GAET,CAGA,SAASwjB,KACP,MAAO,CACLjsB,KAAM,WACNgS,SAAU,GAEd,CAGA,SAASwP,KAEP,MAAO,CACLxhB,KAAM,UACNmxB,WAAOvqB,EACPoL,SAAU,GAEd,CAGA,SAASka,KACP,MAAO,CACLlsB,KAAM,QAEV,CAGA,SAASosB,KACP,MAAO,CACLpsB,KAAM,OACNhE,MAAO,GAEX,CAGA,SAASuwB,KACP,MAAO,CACLvsB,KAAM,QACNkxB,MAAO,KACPzoB,IAAK,GACLqJ,IAAK,KAET,CAGA,SAASsZ,KACP,MAAO,CACLprB,KAAM,OACNkxB,MAAO,KACPzoB,IAAK,GACLuJ,SAAU,GAEd,CAMA,SAASE,GAAK6C,GACZ,MAAO,CACL/U,KAAM,OACNwxB,QAAwB,gBAAfzc,EAAM/U,KACf5B,MAAO,KACPqzB,OAAQ1c,EAAM8b,QACd7e,SAAU,GAEd,CAMA,SAASwa,GAASzX,GAChB,MAAO,CACL/U,KAAM,WACNyxB,OAAQ1c,EAAM8b,QACda,QAAS,KACT1f,SAAU,GAEd,CAGA,SAASuP,KACP,MAAO,CACLvhB,KAAM,YACNgS,SAAU,GAEd,CAGA,SAASob,KACP,MAAO,CACLptB,KAAM,SACNgS,SAAU,GAEd,CAGA,SAASoI,KACP,MAAO,CACLpa,KAAM,OACNhE,MAAO,GAEX,CAGA,SAAS4hB,KACP,MAAO,CACL5d,KAAM,gBAEV,CACF,CA3kCW2xB,CAAS/1B,EAAT+1B,CChLJ,SAAqB5b,GAC1B,MAAQiC,GAAYjC,KAGpB,OAAOA,CACT,CD4KM6b,CACErsB,GAAM3J,GAASqZ,WAAWuC,MHxK3B,WACL,IAKIqa,EALA/zB,EAAS,EACT2N,EAAS,GAETrN,GAAQ,EAGZ,OAGA,SAAsBpC,EAAOoQ,EAAU1N,GAErC,IAEIT,EAEAoP,EAEAwL,EAEAiZ,EAEA9wB,EAVE0Z,EAAS,GAuBf,IAVA1e,EAAQyP,EAASzP,EAAMpB,SAASwR,GAChCyM,EAAgB,EAChBpN,EAAS,GACLrN,IAE0B,QAAxBpC,EAAM0F,WAAW,IACnBmX,IAEFza,OAAQwI,GAEHiS,EAAgB7c,EAAMa,QAAQ,CAMnC,GALAytB,GAAOyH,UAAYlZ,EAEnBiZ,GADA7zB,EAAQqsB,GAAO9qB,KAAKxD,UAEO4K,IAAhB3I,EAAMsJ,MAAsBtJ,EAAMsJ,MAAQvL,EAAMa,OAC3DmE,EAAOhF,EAAM0F,WAAWowB,IACnB7zB,EAAO,CACVwN,EAASzP,EAAMyD,MAAMoZ,GACrB,KACF,CACA,GAAa,KAAT7X,GAAe6X,IAAkBiZ,GAAeD,EAClDnX,EAAOrb,MAAM,GACbwyB,OAAmBjrB,OAUnB,OARIirB,IACFnX,EAAOrb,MAAM,GACbwyB,OAAmBjrB,GAEjBiS,EAAgBiZ,IAClBpX,EAAOrb,KAAKrD,EAAMyD,MAAMoZ,EAAeiZ,IACvCh0B,GAAUg0B,EAAcjZ,GAElB7X,GACN,KAAK,EACH0Z,EAAOrb,KAAK,OACZvB,IACA,MAEF,KAAK,EAGH,IAFAuP,EAA+B,EAAxB2kB,KAAKC,KAAKn0B,EAAS,GAC1B4c,EAAOrb,MAAM,GACNvB,IAAWuP,GAAMqN,EAAOrb,MAAM,GACrC,MAEF,KAAK,GACHqb,EAAOrb,MAAM,GACbvB,EAAS,EACT,MAEF,QACE+zB,GAAmB,EACnB/zB,EAAS,EAIf+a,EAAgBiZ,EAAc,CAChC,CAMA,OALIpzB,IACEmzB,GAAkBnX,EAAOrb,MAAM,GAC/BoM,GAAQiP,EAAOrb,KAAKoM,GACxBiP,EAAOrb,KAAK,OAEPqb,CACT,CACF,CG+EwCwX,GAAal2B,EAAOoQ,GAAU,KAGpE,EAglCF,SAAS9E,GAAMvF,GACb,MAAO,CACL1D,KAAM0D,EAAE1D,KACRP,OAAQiE,EAAEjE,OACVgZ,OAAQ/U,EAAE+U,OAEd,CAOA,SAASgZ,GAAUqC,EAAUhI,GAE3B,IADA,IAAI5iB,GAAS,IACJA,EAAQ4iB,EAAWttB,QAAQ,CAClC,IAAMb,EAAQmuB,EAAW5iB,GACrBrM,MAAMF,QAAQgB,GAChB8zB,GAAUqC,EAAUn2B,GAEpByW,GAAU0f,EAAUn2B,EAExB,CACF,CAOA,SAASyW,GAAU0f,EAAU1f,GAE3B,IAAInX,EACJ,IAAKA,KAAOmX,EACV,GAAIxD,GAAI9T,KAAKsX,EAAWnX,GACtB,GAAY,mBAARA,EAA0B,CAC5B,IACW82B,EADLxf,EAAQH,EAAUnX,GACxB,GAAIsX,GACFwf,EAAAD,EAAS72B,IAAK+D,KAAIgH,MAAA+rB,GAAArmB,EAAAA,EAAAA,GAAI6G,GAE1B,MAAO,GAAY,eAARtX,EAAsB,CAC/B,IACW+2B,EADLzf,EAAQH,EAAUnX,GACxB,GAAIsX,GACFyf,EAAAF,EAAS72B,IAAK+D,KAAIgH,MAAAgsB,GAAAtmB,EAAAA,EAAAA,GAAI6G,GAE1B,MAAO,GAAY,UAARtX,GAA2B,SAARA,EAAgB,CAC5C,IAAMsX,EAAQH,EAAUnX,GACpBsX,GACFpY,OAAOsV,OAAOqiB,EAAS72B,GAAMsX,EAEjC,CAGN,CAGA,SAAS2d,GAAe5d,EAAMC,GAC5B,MAAID,EACI,IAAI1T,MACR,iBACE0T,EAAK3S,KACL,MACAqH,EAAkB,CAChBjJ,MAAOuU,EAAKvU,MACZM,IAAKiU,EAAKjU,MAEZ,0BACAkU,EAAM5S,KACN,MACAqH,EAAkB,CAChBjJ,MAAOwU,EAAMxU,MACbM,IAAKkU,EAAMlU,MAEb,aAGE,IAAIO,MACR,oCACE2T,EAAM5S,KACN,MACAqH,EAAkB,CAChBjJ,MAAOwU,EAAMxU,MACbM,IAAKkU,EAAMlU,MAEb,kBAGR,CE31Ce,SAAS4zB,GAAY12B,GAAS,IAAAmM,EAAA,KAkB3CvN,OAAOsV,OAAOrR,KAAM,CAACyQ,OAhBN,SAACmB,GAEd,IAAMX,EAAmC3H,EAAK2D,KAAK,YAEnD,OAAOqf,GACL1a,EACA7V,OAAOsV,OAAO,CAAC,EAAGJ,EAAU9T,EAAS,CAInCuuB,WAAYpiB,EAAK2D,KAAK,wBAA0B,GAChDqkB,gBAAiBhoB,EAAK2D,KAAK,2BAA6B,KAG9D,GAGF,gBCNajJ,GAkBT,SAAUzC,EAAMuyB,EAAOv2B,GAErB,IAAMsC,EAAO,CAAC0B,KAAMsB,OAAOtB,IAmB3B,YAhBa4G,IAAV5K,GAAiC,OAAVA,GACN,kBAAVu2B,IAAsBr3B,MAAMF,QAAQu3B,GAI5C/3B,OAAOsV,OAAOxR,EAAMi0B,GAFpBv2B,EAAQu2B,EAKNr3B,MAAMF,QAAQgB,GAEhBsC,EAAK0T,SAAWhW,OACG4K,IAAV5K,GAAiC,OAAVA,IAEhCsC,EAAKtC,MAAQsF,OAAOtF,IAGfsC,CACT,ECqGSk0B,GAYT,SAAUhxB,GACR,QAAaoF,IAATpF,GAA+B,OAATA,EACxB,OAAOwS,GAGT,GAAoB,kBAATxS,EACT,OA8ER,SAAqBgV,GACnB,OAAOic,GAAYzyB,GAKnB,SAASA,EAAK1B,GACZ,OAAOA,GAAQA,EAAK0B,OAASwW,CAC/B,CACF,CAvFekc,CAAYlxB,GAGrB,GAAoB,kBAATA,EACT,OAAOtG,MAAMF,QAAQwG,GAAQmxB,GAAWnxB,GAgDhD,SAAsBgV,GACpB,OAAOic,GAAY1gB,GAMnB,SAASA,EAAIzT,GAEX,IAAIhD,EAEJ,IAAKA,KAAOkb,EAEV,GAAIlY,EAAKhD,KAASkb,EAAMlb,GAAM,OAAO,EAGvC,OAAO,CACT,CACF,CAlEwDs3B,CAAapxB,GAG/D,GAAoB,oBAATA,EACT,OAAOixB,GAAYjxB,GAGrB,MAAM,IAAIvC,MAAM,+CAClB,EAOJ,SAAS0zB,GAAWE,GAKlB,IAHA,IAAMC,EAAS,GACXvrB,GAAS,IAEJA,EAAQsrB,EAAMh2B,QACrBi2B,EAAOvrB,GAASirB,GAAQK,EAAMtrB,IAGhC,OAAOkrB,IAOP,WACgB,IAAd,IAAIlrB,GAAS,EAACoC,EAAAhN,UAAAE,OADA+Q,EAAU,IAAA1S,MAAAyO,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAAV+D,EAAU/D,GAAAlN,UAAAkN,GAGxB,OAAStC,EAAQurB,EAAOj2B,QAAQ,KAAAk2B,EAC9B,IAAIA,EAAAD,EAAOvrB,IAAOpM,KAAIkL,MAAA0sB,EAAA,CAACt0B,MAAI2P,OAAKR,IAAa,OAAO,CACtD,CAEA,OAAO,CACT,GACF,CAmDA,SAAS6kB,GAAYjc,GACnB,OAQA,SAAmBlY,GAAqB,QAAAgP,EAAA3Q,UAAAE,OAAZ+Q,EAAU,IAAA1S,MAAAoS,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAVK,EAAUL,EAAA,GAAA5Q,UAAA4Q,GACpC,OAAOiE,QACLlT,GACkB,kBAATA,GACP,SAAUA,GAEVkT,QAAQgF,EAAMrb,KAAIkL,MAAVmQ,EAAK,CAAM/X,KAAMH,GAAI8P,OAAKR,KAExC,CACF,CAEA,SAASoG,KACP,OAAO,CACT,CC5NO,IAyCMgf,GAeT,SAAUjiB,EAAMvP,EAAMyxB,EAASC,GACT,oBAAT1xB,GAA0C,oBAAZyxB,IACvCC,EAAUD,EAEVA,EAAUzxB,EACVA,EAAO,MAGT,IAAM2xB,EAAKX,GAAQhxB,GACb4xB,EAAOF,GAAW,EAAI,GAS5B,SAASG,EAAQ/0B,EAAMiJ,EAAO+rB,GAG5B,IAAMt3B,EAAQsC,GAAwB,kBAATA,EAAoBA,EAAO,CAAC,EAEzD,GAA0B,kBAAftC,EAAMgE,KAAmB,CAClC,IAAMnE,EAEqB,kBAAlBG,EAAMimB,QACTjmB,EAAMimB,QAEc,kBAAfjmB,EAAMH,KACXG,EAAMH,UACN+K,EAENpM,OAAOK,eAAe04B,EAAO,OAAQ,CACnCv3B,MACE,SAAiBsC,EAAK0B,MAAQnE,EAAO,IAAMA,EAAO,IAAM,IAAO,KAErE,CAEA,OAAO03B,EAEP,SAASA,IAEP,IAEIC,EAEA1c,EAEA2c,EANAtyB,EAAS,GAQb,KAAKK,GAAQ2xB,EAAG70B,EAAMiJ,EAAO+rB,EAAQA,EAAQz2B,OAAS,IAAM,SAC1DsE,EA0CZ,SAAkBnF,GAChB,GAAId,MAAMF,QAAQgB,GAChB,OAAOA,EAGT,GAAqB,kBAAVA,EACT,MAAO,CA5Ja,KA4JFA,GAGpB,MAAO,CAACA,EACV,CApDqB03B,CAAST,EAAQ30B,EAAMg1B,IAvGxB,QAyGJnyB,EAAO,IACT,OAAOA,EAKX,GAAI7C,EAAK0T,UA1GC,SA0GW7Q,EAAO,GAO1B,IALA2V,GAAUoc,EAAU50B,EAAK0T,SAASnV,QAAU,GAAKu2B,EAEjDK,EAAeH,EAAQllB,OAAO9P,GAGvBwY,GAAU,GAAKA,EAASxY,EAAK0T,SAASnV,QAAQ,CAInD,GA1HM,SAwHN22B,EAAYH,EAAQ/0B,EAAK0T,SAAS8E,GAASA,EAAQ2c,EAAvCJ,IAEE,GACZ,OAAOG,EAGT1c,EAC0B,kBAAjB0c,EAAU,GAAkBA,EAAU,GAAK1c,EAASsc,CAC/D,CAGF,OAAOjyB,CACT,CACF,CAvEAkyB,CAAQtiB,OAAMnK,EAAW,GAAzBysB,EAwEF,EC7EG,IAAME,GAeT,SAAUxiB,EAAMvP,EAAMyxB,EAASC,GACT,oBAAT1xB,GAA0C,oBAAZyxB,IACvCC,EAAUD,EACVA,EAAUzxB,EACVA,EAAO,MAGTwxB,GAAajiB,EAAMvP,GAMnB,SAAkBlD,EAAMg1B,GACtB,IAAMK,EAASL,EAAQA,EAAQz2B,OAAS,GACxC,OAAOo2B,EACL30B,EACAq1B,EAASA,EAAO3hB,SAASlL,QAAQxI,GAAQ,KACzCq1B,EAEJ,GAbmCT,EAcrC,ECrJSU,GAAatsB,GAAM,SAUnBusB,GAAWvsB,GAAM,OAsB9B,SAASA,GAAMtH,GACb,OAQA,SAAe1B,GACb,IAAMgJ,EAAShJ,GAAQA,EAAKH,UAAYG,EAAKH,SAAS6B,IAAU,CAAC,EAGjE,MAAO,CAEL3B,KAAMiJ,EAAMjJ,MAAQ,KAEpBP,OAAQwJ,EAAMxJ,QAAU,KAExBgZ,OAAQxP,EAAMwP,QAAU,EAAIxP,EAAMwP,OAAS,KAE/C,CACF,CChEA,IAAM7H,GAAM,CAAC,EAAEvU,eA0Cf,SAASo5B,GAAM93B,GACb,OAAOsF,OAAOtF,GAAS,IAAIyF,aAC7B,CCtDA,IAAMwN,GAAM,CAAC,EAAEvU,eAOf,SAASq5B,GAAQ5xB,EAAG7D,GAClB,IAAMoN,EAAOpN,EAAKoN,MAAQ,CAAC,EAE3B,MACE,UAAWpN,KAET2Q,GAAI9T,KAAKuQ,EAAM,UACfuD,GAAI9T,KAAKuQ,EAAM,gBACfuD,GAAI9T,KAAKuQ,EAAM,cAGVvJ,EAAE6xB,QAAQ11B,EAAMmE,GAAE,OAAQnE,EAAKtC,QAGjCmG,EAAE7D,EAAM,MAAOyT,GAAI5P,EAAG7D,GAC/B,CAMO,SAASqT,GAAIxP,EAAG7D,EAAMq1B,GAC3B,IAEI9sB,EAFE7G,EAAO1B,GAAQA,EAAK0B,KAK1B,IAAKA,EACH,MAAM,IAAIf,MAAM,uBAAyBX,EAAO,KAWlD,OAAsB,oBAPpBuI,EADEoI,GAAI9T,KAAKgH,EAAE8xB,SAAUj0B,GAClBmC,EAAE8xB,SAASj0B,GACPmC,EAAE+xB,aAAe/xB,EAAE+xB,YAAYloB,SAAShM,GAC5Cm0B,GAEAhyB,EAAEiyB,gBAG0BvtB,EAAKktB,IAAS5xB,EAAG7D,EAAMq1B,EAC5D,CAMA,SAASQ,GAAWhyB,EAAG7D,GAErB,MAAO,aAAcA,GAAI+1B,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAAO/1B,GAAI,IAAE0T,SAAUD,GAAI5P,EAAG7D,KAASA,CAClE,CAMO,SAASyT,GAAI5P,EAAGwxB,GAErB,IAAM1mB,EAAS,GAEf,GAAI,aAAc0mB,EAIhB,IAHA,IAAMW,EAAQX,EAAO3hB,SACjBzK,GAAS,IAEJA,EAAQ+sB,EAAMz3B,QAAQ,CAC7B,IAAMsE,EAASwQ,GAAIxP,EAAGmyB,EAAM/sB,GAAQosB,GAEpC,GAAIxyB,EAAQ,CACV,GAAIoG,GAAmC,UAA1B+sB,EAAM/sB,EAAQ,GAAGvH,OACvB9E,MAAMF,QAAQmG,IAA2B,SAAhBA,EAAOnB,OACnCmB,EAAOnF,MAAQmF,EAAOnF,MAAM0B,QAAQ,OAAQ,MAGzCxC,MAAMF,QAAQmG,IAA2B,YAAhBA,EAAOnB,MAAoB,CACvD,IAAMoc,EAAOjb,EAAO6Q,SAAS,GAEzBoK,GAAsB,SAAdA,EAAKpc,OACfoc,EAAKpgB,MAAQogB,EAAKpgB,MAAM0B,QAAQ,OAAQ,IAE5C,CAGExC,MAAMF,QAAQmG,GAChB8L,EAAO5N,KAAIgH,MAAX4G,GAAMlB,EAAAA,EAAAA,GAAS5K,IAEf8L,EAAO5N,KAAK8B,EAEhB,CACF,CAGF,OAAO8L,CACT,CChGO,SAAS2Q,GAAczb,EAAG7D,GAC/B,OAAO6D,EAAE7D,EAAM,KACjB,CCCO,SAAS+P,GAAKimB,EAAOC,GAE1B,IAAMpzB,EAAS,GACXoG,GAAS,EAMb,IAJIgtB,GACFpzB,EAAO9B,KAAKoD,GAAE,OAAQ,SAGf8E,EAAQ+sB,EAAMz3B,QACjB0K,GAAOpG,EAAO9B,KAAKoD,GAAE,OAAQ,OACjCtB,EAAO9B,KAAKi1B,EAAM/sB,IAOpB,OAJIgtB,GAASD,EAAMz3B,OAAS,GAC1BsE,EAAO9B,KAAKoD,GAAE,OAAQ,OAGjBtB,CACT,CClBO,SAAS+Q,GAAK/P,EAAG7D,GAEtB,IAAMi0B,EAAQ,CAAC,EACT12B,EAAOyC,EAAKkzB,QAAU,KAAO,KAC7Bpf,EAAQL,GAAI5P,EAAG7D,GACjBiJ,GAAS,EAOb,IAL0B,kBAAfjJ,EAAKF,OAAqC,IAAfE,EAAKF,QACzCm0B,EAAMn0B,MAAQE,EAAKF,SAIZmJ,EAAQ6K,EAAMvV,QAAQ,CAC7B,IAAM0Y,EAAOnD,EAAM7K,GAEnB,GACgB,YAAdgO,EAAKvV,MACY,OAAjBuV,EAAK0M,SACL1M,EAAKif,YACLt5B,MAAMF,QAAQua,EAAKif,WAAWC,YAC9Blf,EAAKif,WAAWC,UAAUzoB,SAAS,kBACnC,CACAumB,EAAMkC,UAAY,CAAC,sBACnB,KACF,CACF,CAEA,OAAOtyB,EAAE7D,EAAMzC,EAAM02B,EAAOlkB,GAAK+D,GAAO,GAC1C,CChCO,SAASsiB,GAAkBvyB,EAAG7D,GACnC,IAAMq2B,EAAgBxyB,EAAEwyB,cAClBtU,EAAa/e,OAAOhD,EAAK+hB,YACzB9Y,EAAQotB,EAAc7tB,QAAQuZ,GAC9BxC,EAASvc,QACF,IAAXiG,EAAeotB,EAAct1B,KAAKghB,GAAc9Y,EAAQ,GAG1D,OAAOpF,EACL7D,EACA,IACA,CACEuM,KAAM,MAAQgT,EACd4W,UAAW,CAAC,gBACZG,GAAI,QAAU/W,EACdgX,KAAM,eAER,CAAC1yB,EAAE7D,EAAKH,SAAU,MAAO,CAACsE,GAAE,OAAQob,MAExC,gBCbO,SAASiX,GAAO3yB,EAAG7D,GACxB,IAAMy2B,EAAUz2B,EAAK8yB,cACjB4D,EAAS,IAQb,GANgB,cAAZD,EACFC,GAAU,KACW,SAAZD,IACTC,GAAU,KAAO12B,EAAK6nB,OAAS7nB,EAAK+hB,YAAc,KAGlC,mBAAd/hB,EAAK0B,KACP,OAAOyC,GAAE,OAAQ,KAAOnE,EAAKwT,IAAMkjB,GAGrC,IAAMC,EAAWljB,GAAI5P,EAAG7D,GAClB8d,EAAO6Y,EAAS,GAElB7Y,GAAsB,SAAdA,EAAKpc,KACfoc,EAAKpgB,MAAQ,IAAMogB,EAAKpgB,MAExBi5B,EAAS1iB,QAAQ9P,GAAE,OAAQ,MAG7B,IAAMkX,EAAOsb,EAASA,EAASp4B,OAAS,GAQxC,OANI8c,GAAsB,SAAdA,EAAK3Z,KACf2Z,EAAK3d,OAASg5B,EAEdC,EAAS51B,KAAKoD,GAAE,OAAQuyB,IAGnBC,CACT,CC4DA,SAASC,GAAc52B,GACrB,IAAMmzB,EAASnzB,EAAKmzB,OAEpB,YAAkB7qB,IAAX6qB,GAAmC,OAAXA,EAC3BnzB,EAAK0T,SAASnV,OAAS,EACvB40B,CACN,CC5FO,IAAMwC,GAAW,CACtBkB,WCZK,SAAoBhzB,EAAG7D,GAC5B,OAAO6D,EAAE7D,EAAM,aAAc+P,GAAK0D,GAAI5P,EAAG7D,IAAO,GAClD,EDWE82B,MEXK,SAAmBjzB,EAAG7D,GAC3B,MAAO,CAAC6D,EAAE7D,EAAM,MAAOmE,GAAE,OAAQ,MACnC,EFUEzB,KGbK,SAAcmB,EAAG7D,GACtB,IAAMtC,EAAQsC,EAAKtC,MAAQsC,EAAKtC,MAAQ,KAAO,GAGzCi1B,EAAO3yB,EAAK2yB,MAAQ3yB,EAAK2yB,KAAKhzB,MAAM,uBAEpCs0B,EAAQ,CAAC,EAEXtB,IACFsB,EAAMkC,UAAY,CAAC,YAAcxD,IAGnC,IAAMjwB,EAAOmB,EAAE7D,EAAM,OAAQi0B,EAAO,CAAC9vB,GAAE,OAAQzG,KAM/C,OAJIsC,EAAKkmB,OACPxjB,EAAK0K,KAAO,CAAC8Y,KAAMlmB,EAAKkmB,OAGnBriB,EAAE7D,EAAKH,SAAU,MAAO,CAAC6C,GAClC,EHLEq0B,OIhBK,SAAuBlzB,EAAG7D,GAC/B,OAAO6D,EAAE7D,EAAM,MAAOyT,GAAI5P,EAAG7D,GAC/B,EJeE2tB,SKjBK,SAAkB9pB,EAAG7D,GAC1B,OAAO6D,EAAE7D,EAAM,KAAMyT,GAAI5P,EAAG7D,GAC9B,ELgBEo2B,kBAAAA,GACAY,SMnBK,SAAkBnzB,EAAG7D,GAK1B,IAJA,IAAMi3B,EAAepzB,EAAEozB,aACjBZ,EAAgBxyB,EAAEwyB,cACpBa,EAAK,EAEFA,KAAMD,GAAcC,IAE3B,IAAMnV,EAAa/e,OAAOk0B,GAa1B,OATAb,EAAct1B,KAAKghB,GAEnBkV,EAAalV,GAAc,CACzBrgB,KAAM,qBACNqgB,WAAAA,EACArO,SAAU,CAAC,CAAChS,KAAM,YAAagS,SAAU1T,EAAK0T,WAC9C7T,SAAUG,EAAKH,UAGVu2B,GAAkBvyB,EAAG,CAC1BnC,KAAM,oBACNqgB,WAAAA,EACAliB,SAAUG,EAAKH,UAEnB,ENLEqjB,QOpBK,SAAiBrf,EAAG7D,GACzB,OAAO6D,EAAE7D,EAAM,IAAMA,EAAK6yB,MAAOpf,GAAI5P,EAAG7D,GAC1C,EPmBE8tB,KQnBK,SAAcjqB,EAAG7D,GACtB,OAAO6D,EAAEszB,UAAYtzB,EAAE6xB,QAAQ11B,EAAMmE,GAAE,MAAOnE,EAAKtC,QAAU,IAC/D,ERkBE05B,eSpBK,SAAwBvzB,EAAG7D,GAChC,IAAM4e,EAAM/a,EAAEie,WAAW9hB,EAAK+hB,YAE9B,IAAKnD,EACH,OAAO4X,GAAO3yB,EAAG7D,GAInB,IAAMi0B,EAAQ,CAACh2B,IAAK8N,GAAU6S,EAAIzU,KAAO,IAAKqJ,IAAKxT,EAAKwT,KAMxD,OAJkB,OAAdoL,EAAIgU,YAAgCtqB,IAAdsW,EAAIgU,QAC5BqB,EAAMrB,MAAQhU,EAAIgU,OAGb/uB,EAAE7D,EAAM,MAAOi0B,EACxB,ETMEhG,MUtBK,SAAepqB,EAAG7D,GAEvB,IAAMi0B,EAAQ,CAACh2B,IAAK8N,GAAU/L,EAAKmK,KAAMqJ,IAAKxT,EAAKwT,KAMnD,OAJmB,OAAfxT,EAAK4yB,YAAiCtqB,IAAftI,EAAK4yB,QAC9BqB,EAAMrB,MAAQ5yB,EAAK4yB,OAGd/uB,EAAE7D,EAAM,MAAOi0B,EACxB,EVcEoD,WWxBK,SAAoBxzB,EAAG7D,GAC5B,OAAO6D,EAAE7D,EAAM,OAAQ,CAACmE,GAAE,OAAQnE,EAAKtC,MAAM0B,QAAQ,YAAa,OACpE,EXuBEk4B,cYtBK,SAAuBzzB,EAAG7D,GAC/B,IAAM4e,EAAM/a,EAAEie,WAAW9hB,EAAK+hB,YAE9B,IAAKnD,EACH,OAAO4X,GAAO3yB,EAAG7D,GAInB,IAAMi0B,EAAQ,CAAC1nB,KAAMR,GAAU6S,EAAIzU,KAAO,KAM1C,OAJkB,OAAdyU,EAAIgU,YAAgCtqB,IAAdsW,EAAIgU,QAC5BqB,EAAMrB,MAAQhU,EAAIgU,OAGb/uB,EAAE7D,EAAM,IAAKi0B,EAAOxgB,GAAI5P,EAAG7D,GACpC,EZQE8sB,KaxBK,SAAcjpB,EAAG7D,GAEtB,IAAMi0B,EAAQ,CAAC1nB,KAAMR,GAAU/L,EAAKmK,MAMpC,OAJmB,OAAfnK,EAAK4yB,YAAiCtqB,IAAftI,EAAK4yB,QAC9BqB,EAAMrB,MAAQ5yB,EAAK4yB,OAGd/uB,EAAE7D,EAAM,IAAKi0B,EAAOxgB,GAAI5P,EAAG7D,GACpC,EbgBEkuB,SDrBK,SAAkBrqB,EAAG7D,EAAMq1B,GAChC,IASMpS,EATApgB,EAAS4Q,GAAI5P,EAAG7D,GAChBi2B,EAAQZ,EA0EhB,SAAmBr1B,GACjB,IAAIi2B,EAAQj2B,EAAKmzB,OACXzf,EAAW1T,EAAK0T,SAClBzK,GAAS,EAEb,MAAQgtB,KAAWhtB,EAAQyK,EAASnV,QAClC03B,EAAQW,GAAcljB,EAASzK,IAGjC,OAAOiK,QAAQ+iB,EACjB,CApFyBsB,CAAUlC,GAAUuB,GAAc52B,GAEnDi0B,EAAQ,CAAC,EAET7kB,EAAU,GAEY,mBAAjBpP,EAAKozB,UAKZvwB,EAAO,IACY,YAAnBA,EAAO,GAAGnB,MACY,MAAtBmB,EAAO,GAAG8gB,QAEVV,EAAYpgB,EAAO,IAEnBogB,EAAYpf,EAAE,KAAM,IAAK,IACzBhB,EAAOoR,QAAQgP,IAGbA,EAAUvP,SAASnV,OAAS,GAC9B0kB,EAAUvP,SAASO,QAAQ9P,GAAE,OAAQ,MAGvC8e,EAAUvP,SAASO,QACjBpQ,EAAE,KAAM,QAAS,CACfnC,KAAM,WACN0xB,QAASpzB,EAAKozB,QACdoE,UAAU,KAMdvD,EAAMkC,UAAY,CAAC,mBAKrB,IAFA,IAAIltB,GAAS,IAEJA,EAAQpG,EAAOtE,QAAQ,CAC9B,IAAMk5B,EAAQ50B,EAAOoG,IAInBgtB,GACU,IAAVhtB,GACe,YAAfwuB,EAAM/1B,MACY,MAAlB+1B,EAAM9T,UAENvU,EAAQrO,KAAKoD,GAAE,OAAQ,OAGN,YAAfszB,EAAM/1B,MAAwC,MAAlB+1B,EAAM9T,SAAoBsS,EAGxD7mB,EAAQrO,KAAK02B,GAFbroB,EAAQrO,KAAIgH,MAAZqH,GAAO3B,EAAAA,EAAAA,GAASgqB,EAAM/jB,UAI1B,CAEA,IAAM2H,EAAOxY,EAAOA,EAAOtE,OAAS,GAOpC,OAJI8c,IAAS4a,GAAW,YAAa5a,GAA0B,MAAjBA,EAAKsI,SACjDvU,EAAQrO,KAAKoD,GAAE,OAAQ,OAGlBN,EAAE7D,EAAM,KAAMi0B,EAAO7kB,EAC9B,EChDEwE,KAAAA,GACAqP,Uc7BK,SAAmBpf,EAAG7D,GAC3B,OAAO6D,EAAE7D,EAAM,IAAKyT,GAAI5P,EAAG7D,GAC7B,Ed4BE03B,Ke5BK,SAAc7zB,EAAG7D,GAEtB,OAAO6D,EAAE6xB,QAAQ11B,EAAMmE,GAAE,OAAQ4L,GAAK0D,GAAI5P,EAAG7D,KAC/C,Ef0BE8uB,OgB/BK,SAAgBjrB,EAAG7D,GACxB,OAAO6D,EAAE7D,EAAM,SAAUyT,GAAI5P,EAAG7D,GAClC,EhB8BE23B,MiB3BK,SAAe9zB,EAAG7D,GAOvB,IANA,IAAM43B,EAAO53B,EAAK0T,SACdzK,GAAS,EACP4uB,EAAQ73B,EAAK63B,OAAS,GAEtBh1B,EAAS,KAENoG,EAAQ2uB,EAAKr5B,QAAQ,CAO5B,IANA,IAAMu5B,EAAMF,EAAK3uB,GAAOyK,SAClBnW,EAAiB,IAAV0L,EAAc,KAAO,KAC9BzH,EAAMxB,EAAK63B,MAAQA,EAAMt5B,OAASu5B,EAAIv5B,OAEpCw5B,EAAM,GAELv2B,KAAO,CACZ,IAAMw2B,EAAOF,EAAIt2B,GACjBu2B,EAAIv2B,GAAOqC,EAAEm0B,EAAMz6B,EAAM,CAACs6B,MAAOA,EAAMr2B,IAAOw2B,EAAOvkB,GAAI5P,EAAGm0B,GAAQ,GACtE,CAEAn1B,EAAOoG,GAASpF,EAAE+zB,EAAK3uB,GAAQ,KAAM8G,GAAKgoB,GAAK,GACjD,CAEA,OAAOl0B,EACL7D,EACA,QACA+P,GACE,CAAClM,EAAEhB,EAAO,GAAGhD,SAAU,QAASkQ,GAAK,CAAClN,EAAO,KAAK,KAAQiN,OACxDjN,EAAO,GACHgB,EACE,CACE/D,MAAOw1B,GAAWzyB,EAAO,IACzBzC,IAAKm1B,GAAS1yB,EAAOA,EAAOtE,OAAS,KAEvC,QACAwR,GAAKlN,EAAO1B,MAAM,IAAI,IAExB,KAEN,GAGN,EjBbE2a,KkBjCK,SAAcjY,EAAG7D,GACtB,OAAO6D,EAAE6xB,QACP11B,EACAmE,GAAE,OAAQnB,OAAOhD,EAAKtC,OAAO0B,QAAQ,0BAA2B,OAEpE,ElB6BEkgB,cAAAA,GACA2Y,KAAMC,GACNC,KAAMD,GACNpW,WAAYoW,GACZE,mBAAoBF,IAItB,SAASA,KACP,OAAO,IACT,CmBgBA,IAAMvnB,GAAM,CAAC,EAAEvU,eAQf,SAAS24B,GAAQtiB,EAAMnV,GACrB,IAAM8T,EAAW9T,GAAW,CAAC,EACvB65B,EAAY/lB,EAASinB,qBAAsB,EAE3CpB,EAAe,CAAC,EAuBtB,OArBApzB,EAAEszB,UAAYA,EACdtzB,EAAEie,W3BtDG,SAAqBrP,GAE1B,IAAM7P,EAAQ1G,OAAO4M,OAAO,MAE5B,IAAK2J,IAASA,EAAK/Q,KACjB,MAAM,IAAIf,MAAM,wCAUlB,OAPAs0B,GAAMxiB,EAAM,cAAc,SAACqP,GACzB,IAAMwU,EAAKd,GAAM1T,EAAWC,YACxBuU,IAAO3lB,GAAI9T,KAAK+F,EAAO0zB,KACzB1zB,EAAM0zB,GAAMxU,EAEhB,IAKA,SAAoBC,GAClB,IAAMuU,EAAKd,GAAMzT,GAEjB,OAAOuU,GAAM3lB,GAAI9T,KAAK+F,EAAO0zB,GAAM1zB,EAAM0zB,GAAM,IACjD,CACF,C2B+BiBgC,CAAY7lB,GAC3B5O,EAAEozB,aAAeA,EAEjBpzB,EAAEwyB,cAAgB,GAClBxyB,EAAE6xB,QAAUA,EACZ7xB,EAAE8xB,UAAQI,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAAOJ,IAAavkB,EAASukB,UACvC9xB,EAAEiyB,eAAiB1kB,EAAS0kB,eAC5BjyB,EAAE+xB,YAAcxkB,EAASwkB,YAEzBX,GAAMxiB,EAAM,sBAAsB,SAACqP,GACjC,IAAMwU,EAAKtzB,OAAO8e,EAAWC,YAAY5e,cAIpCwN,GAAI9T,KAAKo6B,EAAcX,KAC1BW,EAAaX,GAAMxU,EAEvB,IAGOje,EAQP,SAAS6xB,EAAQrhB,EAAMC,GAErB,GAAID,GAAQ,SAAUA,GAAQA,EAAKjH,KAAM,CAEvC,IAAMA,EAAOiH,EAAKjH,KAEdA,EAAKmrB,QACY,YAAfjkB,EAAM5S,OACR4S,EAAQ,CACN5S,KAAM,UACNiiB,QAAS,GACTuS,WAAY,CAAC,EACbxiB,SAAU,KAIdY,EAAMqP,QAAUvW,EAAKmrB,OAGJ,YAAfjkB,EAAM5S,MAAsB0L,EAAKorB,cACnClkB,EAAM4hB,YAAUH,EAAAA,GAAAA,IAAAA,EAAAA,GAAAA,GAAA,GAAOzhB,EAAM4hB,YAAe9oB,EAAKorB,cAG/C,aAAclkB,GAASA,EAAMZ,UAAYtG,EAAKqrB,YAChDnkB,EAAMZ,SAAWtG,EAAKqrB,UAE1B,CAEA,GAAIpkB,EAAM,CACR,IAAMqkB,EAAM,SAAUrkB,EAAOA,EAAO,CAACxU,SAAUwU,ICzH9C,SAAmBrU,GACxB,OACGA,IACAA,EAAKH,WACLG,EAAKH,SAASC,QACdE,EAAKH,SAASC,MAAMC,OACpBC,EAAKH,SAASC,MAAMN,SACpBQ,EAAKH,SAASO,MACdJ,EAAKH,SAASO,IAAIL,OAClBC,EAAKH,SAASO,IAAIZ,MAEvB,EDgHWm5B,CAAUD,KACbpkB,EAAMzU,SAAW,CAACC,MAAOw1B,GAAWoD,GAAMt4B,IAAKm1B,GAASmD,IAE5D,CAEA,OAAOpkB,CACT,CAOA,SAASzQ,EAAE7D,EAAM2jB,EAASsQ,EAAOvgB,GAO/B,OANI9W,MAAMF,QAAQu3B,KAChBvgB,EAAWugB,EACXA,EAAQ,CAAC,GAIJyB,EAAQ11B,EAAM,CACnB0B,KAAM,UACNiiB,QAAAA,EACAuS,WAAYjC,GAAS,CAAC,EACtBvgB,SAAUA,GAAY,IAE1B,CACF,CASO,SAASklB,GAAOnmB,EAAMnV,GAC3B,IAAMuG,EAAIkxB,GAAQtiB,EAAMnV,GAClB0C,EAAOqT,GAAIxP,EAAG4O,EAAM,MACpBomB,EExKD,SAAgBh1B,GAOrB,IANA,IAAMozB,EAAepzB,EAAEozB,aACjBZ,EAAgBxyB,EAAEwyB,cACpBptB,GAAS,EAEP6vB,EAAY,KAET7vB,EAAQotB,EAAc93B,QAAQ,CACrC,IAAMqgB,EAAMqY,EAAaZ,EAAcptB,GAAO9F,eAE9C,GAAKyb,EAAL,CAIA,IAAMW,EAASvc,OAAOiG,EAAQ,GACxB3I,GAAOmN,EAAAA,EAAAA,GAAOmR,EAAIlL,UAElBqlB,EAAgB,CACpBr3B,KAAM,OACNyI,IAAK,SAAWoV,EAChBnS,KAAM,CAACorB,YAAa,CAACrC,UAAW,CAAC,iBAAkBI,KAAM,iBACzD7iB,SAAU,CAAC,CAAChS,KAAM,OAAQhE,MAAO,YAE7B2d,EAAO/a,EAAQA,EAAQ/B,OAAS,GAElC8c,GAAsB,cAAdA,EAAK3Z,KACf2Z,EAAK3H,SAAS3S,KAAKg4B,GAKnBz4B,EAAQS,KAAKg4B,GAGfD,EAAU/3B,KAAK,CACbW,KAAM,WACN0L,KAAM,CAACorB,YAAa,CAAClC,GAAI,KAAO/W,EAAQgX,KAAM,gBAC9C7iB,SAAUpT,EACVT,SAAU+e,EAAI/e,UA1BhB,CA4BF,CAEA,OAAyB,IAArBi5B,EAAUv6B,OACL,KAGFsF,EACL,KACA,UACA,CAACsyB,UAAW,CAAC,aAAcI,KAAM,gBACjCxmB,GACE,CACEuP,GAAczb,GACd+P,GAAK/P,EAAG,CAACnC,KAAM,OAAQwxB,SAAS,EAAMxf,SAAUolB,MAElD,GAGN,CF8GeE,CAAOn1B,GASpB,OAPIg1B,GAIF74B,EAAK0T,SAAS3S,KAAKoD,GAAE,OAAQ,MAAO00B,GAG/Bj8B,MAAMF,QAAQsD,GAAQ,CAAC0B,KAAM,OAAQgS,SAAU1T,GAAQA,CAChE,CGvKA,IAUA,GAPI,SAAU+S,EAAazV,GACrB,OAAOyV,GAAe,QAASA,EAcrC,SAAgBA,EAAazV,GAC3B,OAAO,SAAC0C,EAAMgK,EAAM+E,GAClBgE,EAAYrE,IAAIkqB,GAAO54B,EAAM1C,GAAU0M,GAAM,SAACxJ,GAC5CuO,EAAKvO,EACP,GACF,CACF,CAnBUy4B,CAAOlmB,EAAazV,GA2B9B,SAAgBA,GAEd,OAAO,SAAC0C,GAAI,OAAK44B,GAAO54B,EAAM1C,EAAQ,CACxC,CA7BU47B,CAAOnmB,EACb,iBC5BSomB,IAAM9uB,EAAAA,EAAAA,IAOjB,SAAA8uB,EAAYp3B,EAAUq3B,EAAQC,IAAO3vB,EAAAA,EAAAA,GAAA,KAAAyvB,GACnCh5B,KAAK4B,SAAWA,EAChB5B,KAAKi5B,OAASA,EACVC,IACFl5B,KAAKk5B,MAAQA,EAEjB,ICPK,SAASC,GAAMhB,EAAae,GAOjC,IALA,IAAMt3B,EAAW,CAAC,EAEZq3B,EAAS,CAAC,EACZnwB,GAAS,IAEJA,EAAQqvB,EAAY/5B,QAC3BrC,OAAOsV,OAAOzP,EAAUu2B,EAAYrvB,GAAOlH,UAC3C7F,OAAOsV,OAAO4nB,EAAQd,EAAYrvB,GAAOmwB,QAG3C,OAAO,IAAID,GAAOp3B,EAAUq3B,EAAQC,EACtC,CCrBO,SAASttB,GAAUrO,GACxB,OAAOA,EAAMmkB,aACf,CFiBAsX,GAAOh9B,UAAU4F,SAAW,CAAC,EAE7Bo3B,GAAOh9B,UAAUi9B,OAAS,CAAC,EAE3BD,GAAOh9B,UAAUk9B,MAAQ,oBG3BZE,IAAIlvB,EAAAA,EAAAA,IAMf,SAAAkvB,EAAYx3B,EAAUy3B,IAAW9vB,EAAAA,EAAAA,GAAA,KAAA6vB,GAE/Bp5B,KAAK4B,SAAWA,EAEhB5B,KAAKq5B,UAAYA,CACnB,IAIFD,GAAKp9B,UAAUk9B,MAAQ,KACvBE,GAAKp9B,UAAUs9B,SAAU,EACzBF,GAAKp9B,UAAUu9B,YAAa,EAC5BH,GAAKp9B,UAAUw9B,mBAAoB,EACnCJ,GAAKp9B,UAAUy9B,QAAS,EACxBL,GAAKp9B,UAAU09B,gBAAiB,EAChCN,GAAKp9B,UAAU29B,gBAAiB,EAChCP,GAAKp9B,UAAU49B,uBAAwB,EACvCR,GAAKp9B,UAAU69B,iBAAkB,EACjCT,GAAKp9B,UAAUmmB,SAAU,ECxBzB,IAAI2X,GAAS,EAEAR,GAAUS,KACVR,GAAaQ,KACbP,GAAoBO,KACpBN,GAASM,KACTJ,GAAiBI,KACjBL,GAAiBK,KACjBH,GAAwBG,KAErC,SAASA,KACP,OAAAxG,KAAAyG,IAAO,IAAOF,GAChB,CCPA,IAAMzF,GAASt4B,OAAO8W,KAAKonB,GAEdC,GAAW,SAAAC,IAAAlxB,EAAAA,EAAAA,GAAAixB,EAAAC,GAAA,IAAAjxB,GAAAC,EAAAA,EAAAA,GAAA+wB,GAQtB,SAAAA,EAAYt4B,EAAUy3B,EAAWe,EAAMlB,GAAO,IAAA5vB,GAAAC,EAAAA,EAAAA,GAAA,KAAA2wB,GAC5C,IAAIpxB,GAAS,EAMb,GAJAQ,EAAAJ,EAAAxM,KAAA,KAAMkF,EAAUy3B,GAEhBgB,IAAIC,EAAAA,GAAAA,GAAAhxB,GAAO,QAAS4vB,GAEA,kBAATkB,EACT,OAAStxB,EAAQurB,GAAOj2B,QAAQ,CAC9B,IAAM2Z,EAAQsc,GAAOvrB,GACrBuxB,IAAIC,EAAAA,GAAAA,GAAAhxB,GAAO+qB,GAAOvrB,IAASsxB,EAAOH,EAAMliB,MAAYkiB,EAAMliB,GAC5D,CACD,OAAAzO,CACH,CAAC,OAAAY,EAAAA,EAAAA,GAAAgwB,EAAA,CArBqB,CAASd,IA+BjC,SAASiB,GAAK7rB,EAAQ3R,EAAKU,GACrBA,IAEFiR,EAAO3R,GAAOU,EAElB,CAZA28B,GAAYl+B,UAAUmmB,SAAU,ECbhC,IAAM3R,GAAM,CAAC,EAAEvU,eAMR,SAAS0M,GAAOgZ,GAErB,IAIIlgB,EAJEG,EAAW,CAAC,EAEZq3B,EAAS,CAAC,EAIhB,IAAKx3B,KAAQkgB,EAAWoU,WACtB,GAAIvlB,GAAI9T,KAAKilB,EAAWoU,WAAYt0B,GAAO,CACzC,IAAMlE,EAAQokB,EAAWoU,WAAWt0B,GAC9Bqb,EAAO,IAAIod,GACfz4B,EACAkgB,EAAW4Y,UAAU5Y,EAAW6Y,YAAc,CAAC,EAAG/4B,GAClDlE,EACAokB,EAAWuX,OAIXvX,EAAWkY,iBACXlY,EAAWkY,gBAAgBtsB,SAAS9L,KAEpCqb,EAAK+c,iBAAkB,GAGzBj4B,EAASH,GAAQqb,EAEjBmc,EAAOrtB,GAAUnK,IAASA,EAC1Bw3B,EAAOrtB,GAAUkR,EAAKuc,YAAc53B,CACtC,CAGF,OAAO,IAAIu3B,GAAOp3B,EAAUq3B,EAAQtX,EAAWuX,MACjD,CCvDO,IAAMuB,GAAQ9xB,GAAO,CAC1BuwB,MAAO,QACPqB,UAAS,SAACtc,EAAGxc,GACX,MAAO,SAAWA,EAAKT,MAAM,GAAG0gB,aAClC,EACAqU,WAAY,CACV2E,aAAc,KACdC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,UAAW,QCZFC,GAAMtyB,GAAO,CACxBuwB,MAAO,MACPqB,UAAS,SAACtc,EAAGxc,GACX,MAAO,OAASA,EAAKT,MAAM,GAAG0gB,aAChC,EACAqU,WAAY,CAACmF,QAAS,KAAMC,QAAS,KAAMC,SAAU,QCFhD,SAASC,GAAuBb,EAAYnB,GACjD,OAAOA,KAAamB,EAAaA,EAAWnB,GAAaA,CAC3D,CCAO,SAASiC,GAAyBd,EAAY54B,GACnD,OAAOy5B,GAAuBb,EAAY54B,EAAS8f,cACrD,CCNO,IAAM6Z,GAAQ5yB,GAAO,CAC1BuwB,MAAO,QACPsB,WAAY,CAACgB,WAAY,eACzBjB,UAAWe,GACXvF,WAAY,CAACwF,MAAO,KAAME,WAAY,QCJ3BC,GAAO/yB,GAAO,CACzB4xB,UAAS,SAACtc,EAAGxc,GACX,MAAgB,SAATA,EAAkBA,EAAO,QAAUA,EAAKT,MAAM,GAAG0gB,aAC1D,EACAqU,WAAY,CACV4F,qBAAsB,KACtBC,WAAYrC,GACZsC,iBAAkB,KAClBC,SAAUvC,GACVwC,YAAaxC,GACbyC,aAAcvC,GACdwC,aAAcxC,GACdyC,YAAazC,GACb0C,aAAcxC,GACdyC,YAAa,KACbC,gBAAiB1C,GACjB2C,YAAa,KACbC,aAAchD,GACdiD,eAAgB7C,GAChB8C,iBAAkB,KAClBC,aAAcnD,GACdoD,WAAYhD,GACZiD,YAAarD,GACbsD,aAAc,KACdC,WAAYvD,GACZwD,YAAa,KACbC,iBAAkB,KAClBC,UAAW,KACXC,eAAgBvD,GAChBwD,UAAW1D,GACX2D,SAAU,KACVC,UAAW9D,GACX+D,cAAe/D,GACfgE,oBAAqBhE,GACrBiE,gBAAiB,KACjBC,SAAU9D,GACV+D,gBAAiB,KACjBC,aAAclE,GACdmE,YAAarE,GACbsE,aAActE,GACduE,aAAc,KACdC,aAAcxE,GACdyE,oBAAqBrE,GACrBsE,aAAcxE,GACdyE,aAAczE,GACd0E,YAAa1E,GACb2E,aAAc7E,GACd8E,YAAa5E,GACb6E,SAAU,KACVC,aAAc9E,GACd+E,aAAc/E,GACdgF,aAAchF,GACdiF,cAAe,KACftI,KAAM,QC7CGzI,GAAOhlB,GAAO,CACzBuwB,MAAO,OACPsB,WAAY,CACVmE,cAAe,iBACfC,UAAW,QACXC,QAAS,MACTC,UAAW,cAEbvE,UAAWe,GACXzB,gBAAiB,CAAC,UAAW,WAAY,QAAS,YAClD9D,WAAY,CAEVgJ,KAAM,KACNC,OAAQtF,GACRuF,cAAetF,GACfuF,UAAWvF,GACXwF,OAAQ,KACRC,MAAO,KACPC,gBAAiB/F,GACjBgG,oBAAqBhG,GACrBiG,eAAgBjG,GAChBjmB,IAAK,KACLmsB,GAAI,KACJC,MAAOnG,GACPoG,eAAgB,KAChBC,aAAchG,GACdiG,UAAWtG,GACXuG,SAAUvG,GACVwG,QAASxG,GACTyG,QAAS,KACT9M,QAASqG,GACT0G,KAAM,KACNhK,UAAW2D,GACXsG,KAAMxG,GACNyG,QAAS,KACT//B,QAAS,KACTggC,gBAAiB5G,GACjB6G,SAAU9G,GACV+G,aAAc1G,GACd2G,OAAQ7G,GAASC,GACjB6G,YAAa,KACbtzB,KAAM,KACNuzB,SAAU,KACVC,SAAU,KACVC,QAASpH,GACTqH,MAAOrH,GACPsH,IAAK,KACLC,QAAS,KACTxJ,SAAUiC,GACVwH,SAAUtH,GACVuH,UAAWxH,GACXyH,QAAS,KACTC,aAAc,KACdC,KAAM,KACNC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,eAAgBhI,GAChBiI,WAAY,KACZC,QAAS7H,GACT8H,OAAQhI,GACRiI,OAAQpI,GACRqI,KAAMlI,GACNrtB,KAAM,KACNw1B,SAAU,KACVC,QAASlI,GACTmI,UAAWnI,GACXxD,GAAI,KACJ4L,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXxN,GAAI,KACJyN,MAAO7I,GACP8I,OAAQ,KACRC,SAAU1I,GACV2I,QAAS3I,GACT4I,UAAWjJ,GACXkJ,SAAU7I,GACVpa,KAAM,KACNmI,MAAO,KACP8K,KAAM,KACNiQ,SAAU,KACVhvB,KAAM,KACNivB,QAAS,KACTC,KAAMrJ,GACNsJ,IAAKnJ,GACLoJ,SAAU,KACVrtB,IAAK,KACLstB,UAAWrJ,GACXjS,MAAO,KACPub,OAAQ,KACRC,IAAK,KACLC,UAAWxJ,GACXyJ,SAAU5J,GACV6J,MAAO7J,GACPl8B,KAAM,KACNgmC,MAAO,KACPC,SAAU/J,GACVgK,WAAYhK,GACZiK,QAAS,KACTC,aAAc,KACdC,WAAY,KACZC,cAAe,KACfC,cAAe,KACfC,eAAgB,KAChBC,OAAQ,KACRC,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTC,cAAe,KACfC,cAAe,KACfC,kBAAmB,KACnBC,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,WAAY,KACZC,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTC,iBAAkB,KAClBC,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBC,UAAW,KACXC,YAAa,KACbC,UAAW,KACXC,eAAgB,KAChBC,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdC,mBAAoB,KACpBC,QAAS,KACTC,SAAU,KACVC,SAAU,KACVC,YAAa,KACbC,0BAA2B,KAC3BC,SAAU,KACVC,UAAW,KACXC,SAAU,KACVC,aAAc,KACdC,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVC,qBAAsB,KACtBC,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACXC,QAAS,KACTzoB,KAAMkZ,GACNwP,QAASrP,GACTsP,QAAS,KACTC,KAAMrP,GACNsP,YAAa,KACbC,YAAa5P,GACb6P,OAAQ,KACRC,QAAS,KACTC,SAAU/P,GACVgQ,eAAgB,KAChBC,IAAK5P,GACL6P,SAAUlQ,GACVmQ,SAAUnQ,GACV7B,KAAMgC,GACNiQ,QAASjQ,GACTkQ,QAAShQ,GACTiQ,MAAO,KACPC,OAAQvQ,GACRwQ,SAAUxQ,GACVyQ,SAAUzQ,GACV0Q,MAAO,KACPt0B,KAAM+jB,GACNwQ,MAAO,KACPC,KAAM,KACNC,KAAM1Q,GACN2Q,WAAY7Q,GACZz7B,IAAK,KACLusC,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACR5qC,MAAO85B,GACP9E,KAAM,KACNz1B,MAAO,KACPsrC,SAAU/Q,GACVv8B,OAAQ,KACRu1B,MAAO,KACPgY,UAAW,KACXlpC,KAAM,KACNmpC,cAAepR,GACfqR,OAAQ,KACRptC,MAAOg8B,GACPqR,MAAOnR,GACP7pB,KAAM,KAIN8nB,MAAO,KACPmT,MAAO,KACPC,QAASnR,GACToR,KAAM,KACNC,WAAY,KACZC,QAAS,KACTC,OAAQzR,GACR0R,YAAa,KACbC,aAAc3R,GACd4R,YAAa,KACbC,YAAa,KACb9kB,KAAM,KACN+kB,QAAS,KACTC,QAAS,KACTC,MAAO,KACPlpC,KAAM,KACNmpC,SAAU,KACVC,SAAU,KACVC,MAAO,KACPC,QAASvS,GACTwS,QAASxS,GACT9f,MAAO,KACPuyB,KAAM,KACNC,MAAO,KACPC,YAAa,KACbC,OAAQzS,GACR0S,WAAY1S,GACZ9M,KAAM,KACNyf,SAAU,KACVC,OAAQ,KACRC,aAAc7S,GACd8S,YAAa9S,GACb+S,SAAUlT,GACVmT,OAAQnT,GACRoT,QAASpT,GACTqT,OAAQrT,GACRsT,OAAQ,KACRC,QAAS,KACTC,OAAQ,KACRC,IAAK,KACLC,YAAavT,GACbv4B,MAAO,KACP+rC,OAAQ,KACRC,UAAW3T,GACX4T,QAAS,KACTC,QAAS,KACTzxB,KAAM,KACN0xB,UAAW5T,GACX6T,UAAW,KACXC,QAAS,KACTC,OAAQ,KACRC,MAAO,KACPC,OAAQjU,GAGRkU,kBAAmB,KACnBC,YAAa,KACbC,SAAU,KACVC,wBAAyBxU,GACzByU,sBAAuBzU,GACvB1jB,OAAQ,KACRhU,SAAU,KACVosC,QAASvU,GACTwU,SAAU,KACVC,aAAc,QC1SLC,GAAMxlC,GAAO,CACxBuwB,MAAO,MACPsB,WAAY,CACV4T,aAAc,gBACdC,kBAAmB,qBACnBC,WAAY,cACZC,cAAe,iBACfC,UAAW,aACXxY,UAAW,QACXyY,SAAU,YACVC,SAAU,YACVC,mBAAoB,sBACpBC,0BAA2B,8BAC3BC,aAAc,gBACdC,eAAgB,kBAChBvO,YAAa,cACbwO,SAAU,WACVC,iBAAkB,oBAClBC,iBAAkB,oBAClBC,YAAa,eACbC,SAAU,YACVC,WAAY,cACZC,aAAc,gBACdC,WAAY,cACZC,SAAU,YACVC,eAAgB,mBAChBC,YAAa,eACbC,UAAW,aACXC,YAAa,eACbC,WAAY,cACZC,UAAW,aACXC,2BAA4B,+BAC5BC,yBAA0B,6BAC1BnO,SAAU,WACVoO,UAAW,cACXC,aAAc,iBACdC,aAAc,iBACdC,eAAgB,kBAChBC,cAAe,iBACfC,cAAe,iBACfC,UAAW,aACXC,UAAW,aACXC,YAAa,eACbC,QAAS,WACTC,YAAa,gBACbC,aAAc,iBACdC,QAAS,WACTC,QAAS,WACTC,QAAS,WACTC,SAAU,YACVC,MAAO,SACPC,UAAW,cACXC,WAAY,eACZ3N,QAAS,UACT4N,WAAY,aACZ3N,aAAc,eACdG,cAAe,gBACfyN,QAAS,UACTtN,SAAU,WACVC,UAAW,YACXC,iBAAkB,mBAClBC,SAAU,WACVC,QAAS,UACTC,QAAS,UACTI,OAAQ,SACRC,YAAa,cACbC,MAAO,QACPC,WAAY,aACZC,OAAQ,SACRC,UAAW,YACXC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,OAAQ,SACRC,iBAAkB,mBAClBC,UAAW,YACXiM,MAAO,QACPhM,QAAS,UACTC,QAAS,UACTC,QAAS,UACT+L,UAAW,YACXC,WAAY,aACZ9L,aAAc,eACdC,QAAS,UACTC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,QAAS,UACTE,OAAQ,SACRC,aAAc,eACdC,iBAAkB,mBAClBE,YAAa,cACbC,UAAW,YACXE,YAAa,cACbC,aAAc,eACdC,aAAc,eACdC,YAAa,cACbC,WAAY,aACZC,YAAa,cACbC,UAAW,YACX2K,aAAc,eACd1K,UAAW,YACXC,SAAU,WACVC,WAAY,aACZC,WAAY,aACZC,QAAS,UACTC,QAAS,UACTC,OAAQ,SACRC,UAAW,YACXC,WAAY,aACZC,WAAY,aACZC,aAAc,eACdiK,SAAU,WACV/J,QAAS,UACTC,SAAU,WACVC,SAAU,WACVG,SAAU,WACVC,UAAW,YACXC,SAAU,WACVyJ,OAAQ,SACRvJ,UAAW,YACXC,UAAW,YACXC,SAAU,WACVC,UAAW,YACXC,aAAc,eACdC,SAAU,WACVE,SAAU,WACVC,eAAgB,iBAChBC,UAAW,YACX+I,OAAQ,SACRC,iBAAkB,oBAClBC,kBAAmB,qBACnBC,WAAY,cACZC,QAAS,WACTC,cAAe,iBACf1I,eAAgB,iBAChB2I,gBAAiB,mBACjBC,eAAgB,kBAChBC,UAAW,aACXC,YAAa,eACbC,sBAAuB,yBACvBC,uBAAwB,0BACxBC,gBAAiB,mBACjBC,iBAAkB,oBAClBC,cAAe,iBACfC,eAAgB,kBAChBC,iBAAkB,oBAClBC,cAAe,iBACfC,YAAa,eACbrI,SAAU,WACVsI,WAAY,cACZC,eAAgB,kBAChBC,cAAe,iBACfnsC,OAAQ,SACRosC,kBAAmB,qBACnBC,mBAAoB,sBACpBC,YAAa,eACbC,aAAc,gBACdC,WAAY,eACZC,YAAa,eACbC,SAAU,YACVC,aAAc,gBACdC,cAAe,iBACfC,aAAc,gBACdC,SAAU,aACVC,YAAa,gBACbC,YAAa,gBACbC,YAAa,eACbC,YAAa,eACbC,QAAS,WAETC,cAAe,gBACfC,cAAe,iBAEjB3Z,UAAWc,GACXtF,WAAY,CACVoe,MAAOva,GACPwU,aAAc3U,GACd2a,WAAY,KACZC,SAAU,KACVhG,kBAAmB,KACnBiG,WAAY7a,GACZ8a,UAAW9a,GACX6U,WAAY,KACZkG,OAAQ/a,GACRgb,cAAe,KACfC,cAAe,KACfC,QAASlb,GACTmb,UAAW,KACXrG,cAAe,KACfsG,cAAe,KACfC,YAAa,KACbC,KAAM,KACNzzB,MAAO,KACP0zB,KAAMvb,GACNwb,GAAI,KACJC,SAAU,KACV1G,UAAW/U,GACXzD,UAAW2D,GACXwb,KAAM,KACN1G,SAAU,KACV2G,cAAe,KACf1G,SAAU,KACV9C,MAAO,KACP+C,mBAAoB,KACpBC,0BAA2B,KAC3BC,aAAc,KACdC,eAAgB,KAChB3uC,QAAS,KACTk1C,kBAAmB,KACnBC,iBAAkB,KAClB/U,YAAa,KACbgV,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJnyC,EAAG,KACHyrC,SAAU,KACV2G,cAAe,KACfC,QAASlc,GACTmc,gBAAiBnc,GACjBoc,UAAW,KACXC,QAAS,KACTC,IAAK,KACLC,QAASvc,GACTuV,iBAAkB,KAClBlO,SAAUxH,GACV2c,GAAI,KACJC,GAAI,KACJC,SAAU,KACVC,SAAU,KACVC,UAAW5c,GACXwV,iBAAkB,KAClBhvC,IAAK,KACLuZ,MAAO,KACP88B,SAAU7c,GACV8c,0BAA2B,KAC3BC,KAAM,KACNtH,YAAazV,GACb0V,SAAU,KACVsH,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbvH,WAAY,KACZC,aAAc,KACduH,UAAW,KACXC,eAAgB,KAChBvH,WAAY,KACZC,SAAU,KACVC,eAAgB,KAChBC,YAAa,KACbC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZkH,OAAQ,KACRC,GAAI,KACJljC,KAAM,KACNmjC,GAAI,KACJC,GAAI,KACJC,GAAIxd,GACJyd,GAAIzd,GACJmW,UAAWnW,GACXoW,2BAA4B,KAC5BC,yBAA0B,KAC1BqH,SAAU,KACVC,kBAAmB,KACnBC,cAAe,KACfzlB,QAAS,KACT0lB,QAAS9d,GACT+d,kBAAmB,KACnBC,WAAY,KACZhW,OAAQ,KACRr1B,KAAM,KACNw1B,SAAU,KACVoO,UAAWvW,GACXwW,aAAcxW,GACdyW,aAAczW,GACdtD,GAAI,KACJuhB,YAAaje,GACb0W,eAAgB,KAChBwH,kBAAmB,KACnBC,GAAI,KACJC,IAAK,KACLC,UAAWre,GACX91B,EAAG81B,GACHse,GAAIte,GACJue,GAAIve,GACJwe,GAAIxe,GACJye,GAAIze,GACJ0e,aAAcve,GACdwe,iBAAkB,KAClBC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,QAAS,KACThmB,KAAM,KACNimB,aAAc,KACdrI,cAAe,KACfC,cAAe,KACfqI,kBAAmBjf,GACnBkf,MAAO,KACPrI,UAAW,KACXC,UAAW,KACXC,YAAa,KACboI,aAAc,KACdC,YAAa,KACbC,YAAa,KACb1e,KAAM,KACN2e,iBAAkB,KAClBC,UAAW,KACXC,aAAc,KACdzjC,IAAK,KACLgS,MAAO,KACP0xB,uBAAwB,KACxBC,sBAAuB,KACvBC,UAAW3f,GACX4f,UAAW,KACXtW,OAAQ,KACRC,IAAK,KACLsW,KAAM,KACNl8C,KAAM,KACNqzC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,QAAS,KACTC,QAAS,KACTC,QAAS,KACTC,SAAU,KACVC,MAAO,KACPC,UAAW,KACXC,WAAY,KACZqI,WAAY,KACZC,SAAU,KACVnhC,OAAQ,KACRkrB,QAAS,KACT4N,WAAY,KACZ3N,aAAc,KACdG,cAAe,KACfyN,QAAS,KACTtN,SAAU,KACVC,UAAW,KACXC,iBAAkB,KAClBC,SAAU,KACVC,QAAS,KACTC,QAAS,KACTI,OAAQ,KACRC,YAAa,KACbC,MAAO,KACPC,WAAY,KACZC,OAAQ,KACRC,UAAW,KACXC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,OAAQ,KACRC,iBAAkB,KAClBC,UAAW,KACXiM,MAAO,KACPhM,QAAS,KACTC,QAAS,KACTC,QAAS,KACT+L,UAAW,KACXC,WAAY,KACZ9L,aAAc,KACdC,QAAS,KACTC,UAAW,KACXC,UAAW,KACXC,WAAY,KACZC,QAAS,KACTE,OAAQ,KACRC,aAAc,KACdC,iBAAkB,KAClBE,YAAa,KACbC,UAAW,KACXE,YAAa,KACbC,aAAc,KACdC,aAAc,KACdC,YAAa,KACbC,WAAY,KACZC,YAAa,KACbC,UAAW,KACX2K,aAAc,KACd1K,UAAW,KACXC,SAAU,KACVC,WAAY,KACZC,WAAY,KACZC,QAAS,KACTC,QAAS,KACTC,OAAQ,KACRC,UAAW,KACXC,WAAY,KACZC,WAAY,KACZC,aAAc,KACdiK,SAAU,KACV/J,QAAS,KACTC,SAAU,KACVC,SAAU,KACVG,SAAU,KACVC,UAAW,KACXC,SAAU,KACVyJ,OAAQ,KACRvJ,UAAW,KACXC,UAAW,KACXC,SAAU,KACVC,UAAW,KACXC,aAAc,KACdC,SAAU,KACVE,SAAU,KACVC,eAAgB,KAChBC,UAAW,KACX+I,OAAQ,KACR8H,QAAS,KACTC,SAAU,KACV7sC,MAAO,KACP8sC,OAAQ,KACRC,YAAa,KACbvwC,OAAQ,KACRwwC,SAAU,KACVC,QAAS,KACTlI,iBAAkBnY,GAClBoY,kBAAmBpY,GACnBqY,WAAY,KACZC,QAAS,KACT5nC,KAAM,KACN4vC,WAAYtgB,GACZugB,oBAAqB,KACrBC,iBAAkB,KAClBC,aAAc,KACdC,MAAO,KACPnR,KAAMrP,GACNygB,MAAO,KACPnG,cAAe,KACfjC,cAAe,KACfqI,OAAQ,KACRC,UAAW7gB,GACX8gB,UAAW9gB,GACX+gB,UAAW/gB,GACXghB,cAAe,KACfC,oBAAqB,KACrBC,eAAgB,KAChBC,UAAW,KACXh5C,SAAUg4B,GACV71B,EAAG,KACH82C,OAAQ,KACRvR,eAAgB,KAChBwR,KAAM,KACNC,KAAM,KACNxR,IAAK3P,GACLmT,IAAKnT,GACLqY,gBAAiB,KACjB+I,YAAa,KACbC,UAAW,KACXC,mBAAoBthB,GACpBuhB,iBAAkBvhB,GAClBwhB,cAAexhB,GACfyhB,gBAAiBzhB,GACjB9I,SAAU,KACVwqB,QAAS,KACT54C,OAAQ,KACR64C,OAAQ,KACRC,GAAI,KACJC,GAAI,KACJC,MAAO,KACPC,KAAM,KACNzJ,eAAgB,KAChB0J,KAAM,KACNC,MAAO,KACPC,aAAc,KACdC,iBAAkBtiB,GAClBuiB,iBAAkBviB,GAClBwiB,aAAc,KACdC,QAAS,KACTC,YAAa,KACbC,aAAc,KACdC,MAAO,KACPC,MAAO,KACPC,YAAa,KACbpK,UAAW,KACXC,YAAa,KACbC,sBAAuB5Y,GACvB6Y,uBAAwB7Y,GACxBt3B,OAAQ,KACRq6C,OAAQ,KACRjK,gBAAiB3Y,GACjB4Y,iBAAkB,KAClBC,cAAe,KACfC,eAAgB,KAChBC,iBAAkBlZ,GAClBmZ,cAAenZ,GACfoZ,YAAa,KACb3zC,MAAO,KACPu9C,aAAchjB,GACdijB,aAAc,KACdC,oBAAqB,KACrBC,WAAY,KACZC,cAAe,KACfC,qBAAsB,KACtBC,eAAgBnjB,GAChB4Q,SAAU/Q,GACVujB,YAAa,KACb9/C,OAAQ,KACR+/C,QAASxjB,GACTyjB,QAASzjB,GACTqZ,WAAY,KACZC,eAAgB,KAChBC,cAAe,KACfmK,WAAY,KACZjJ,cAAe,KACfzhB,MAAO,KACP2qB,kBAAmB,KACnB77C,KAAM,KACNsF,OAAQ+yB,GACRyjB,GAAI,KACJ9iB,UAAW,KACX+iB,GAAI,KACJC,GAAI,KACJtK,kBAAmBxZ,GACnByZ,mBAAoBzZ,GACpB+jB,QAAS,KACTrK,YAAa,KACbC,aAAc,KACdC,WAAY5Z,GACZjrB,OAAQ,KACR8kC,YAAa7Z,GACbga,cAAeha,GACfia,aAAc,KACdH,SAAU9Z,GACV+Z,aAAc/Z,GACd8T,QAAS,KACToG,SAAUla,GACVma,YAAana,GACboa,YAAapa,GACbgkB,QAAS,KACTC,WAAY,KACZC,WAAY,KACZ/S,MAAO,KACPgT,OAAQ,KACR9J,YAAa,KACbC,YAAa,KACb1vC,EAAG,KACHw5C,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClB/J,QAASva,GACTn1B,EAAG,KACH05C,GAAI,KACJC,GAAI,KACJC,iBAAkB,KAClBx5C,EAAG,KACHy5C,WAAY,QCliBHxwB,GAAOwL,GAAM,CAAC8B,GAAKR,GAAOc,GAAOG,GAAM0iB,IAAW,QAClDjQ,GAAMhV,GAAM,CAAC8B,GAAKR,GAAOc,GAAOG,GAAM2iB,IAAU,OCM9C,SAASC,GAAanhD,GACnC,GAAIA,EAAQohD,iBAAmBphD,EAAQqhD,mBACrC,MAAM,IAAIr/C,UACR,4EAIJ,GACEhC,EAAQohD,iBACRphD,EAAQqhD,oBACRrhD,EAAQshD,aAER,OAAO,SAACnsC,GACNwiB,GAAMxiB,EAAM,WAAW,SAACzS,EAAMiJ,EAAO41C,GACnC,IAEIhrC,EAFEwhB,EAAsCwpB,EAc5C,GAVIvhD,EAAQohD,gBACV7qC,GAAUvW,EAAQohD,gBAAgBhxC,SAAS1N,EAAK2jB,SACvCrmB,EAAQqhD,qBACjB9qC,EAASvW,EAAQqhD,mBAAmBjxC,SAAS1N,EAAK2jB,WAG/C9P,GAAUvW,EAAQshD,cAAiC,kBAAV31C,IAC5C4K,GAAUvW,EAAQshD,aAAa5+C,EAAMiJ,EAAOosB,IAG1CxhB,GAA2B,kBAAV5K,EAAoB,CACQ,IAAA61C,EAA/C,GAAIxhD,EAAQyhD,kBAAoB/+C,EAAK0T,UACnCorC,EAAAzpB,EAAO3hB,UAASC,OAAM5L,MAAA+2C,EAAA,CAAC71C,EAAO,GAAC6G,QAAArC,EAAAA,EAAAA,GAAKzN,EAAK0T,iBAEzC2hB,EAAO3hB,SAASC,OAAO1K,EAAO,GAGhC,OAAOA,CACT,CAGF,GACF,CAEJ,CCjEA,IAAM+1C,GAAY,CAAC,OAAQ,QAAS,SAAU,sBCYvC,SAAS9+C,GAAW++C,GAEzB,IAAMvhD,EAEJuhD,GAA0B,kBAAVA,GAAqC,SAAfA,EAAMv9C,KAExCu9C,EAAMvhD,OAAS,GACfuhD,EAIN,MAAwB,kBAAVvhD,GAA4D,KAAtCA,EAAM0B,QAAQ,eAAgB,GACpE,CChBA,IAAM8/C,GAAQ,kBACRC,GAAO,UACPC,GAAM,SA+CZ,SAASC,GAAMhzB,GACb,MAAO,IAAMA,EAAGxK,aAClB,CAMA,SAASy9B,GAAUjzB,GACjB,OAAOA,EAAG5qB,OAAO,GAAG0B,aACtB,CC1DO,IAAMo8C,GAAc,CACzB5T,QAAS,UACTuD,SAAU,WACV3M,OAAQ,SACRmQ,gBAAiB,kBACjBC,iBAAkB,mBAClBC,cAAe,gBACfC,eAAgB,iBAChBC,iBAAkB,mBAClB9rC,OAAQ,SACR6zB,aAAc,eACdC,aAAc,eACdC,UAAW,YACXC,UAAW,YACXC,UAAW,YACXC,WAAY,aACZC,UAAW,YACXS,WAAY,6BCkFRjrB,GAAM,CAAC,EAAEvU,eAITojD,GAAgB,IAAIC,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,OAM5D,SAASC,GAAgBplC,EAASta,GAOvC,IALA,IAGIy3B,EAHE/jB,EAAW,GACbisC,GAAc,IAITA,EAAa3/C,EAAK0T,SAASnV,QAGf,aAFnBk5B,EAAQz3B,EAAK0T,SAASisC,IAEZj+C,KACRgS,EAAS3S,KAAK6+C,GAAQtlC,EAASmd,EAAOkoB,EAAY3/C,IAC1B,SAAfy3B,EAAM/1B,KASC,YAAd1B,EAAK0B,MACJ89C,GAAc/2C,IAAIzI,EAAK2jB,UACvBzjB,GAAWu3B,IAEZ/jB,EAAS3S,KAAK02B,EAAM/5B,OAEE,QAAf+5B,EAAM/1B,MAAmB4Y,EAAQhd,QAAQuiD,UAElDnsC,EAAS3S,KAAK02B,EAAM/5B,OAIxB,OAAOgW,CACT,CAQA,SAASksC,GAAQtlC,EAASta,EAAMiJ,EAAOosB,GACrC,IASItzB,EATEzE,EAAUgd,EAAQhd,QAClBwiD,EAAexlC,EAAQylC,OAGvBxiD,EAAOyC,EAAK2jB,QAEZuS,EAAa,CAAC,EAChB6pB,EAASD,EASb,GAL2B,SAAvBA,EAAazmB,OAA6B,QAAT97B,IACnCwiD,EAASzR,GACTh0B,EAAQylC,OAASA,GAGf//C,EAAKk2B,WACP,IAAKn0B,KAAY/B,EAAKk2B,WAChBvlB,GAAI9T,KAAKmD,EAAKk2B,WAAYn0B,IAC5Bi+C,GAAY9pB,EAAYn0B,EAAU/B,EAAKk2B,WAAWn0B,GAAWuY,GAKtD,OAAT/c,GAA0B,OAATA,GACnB+c,EAAQ2lC,YAGV,IAAMvsC,EAAWgsC,GAAgBplC,EAASta,GAE7B,OAATzC,GAA0B,OAATA,GACnB+c,EAAQ2lC,YAIV3lC,EAAQylC,OAASD,EAIjB,IA4OuBt+C,EA5OjB3B,EAAWG,EAAKH,UAAY,CAChCC,MAAO,CAACC,KAAM,KAAMP,OAAQ,KAAMgZ,OAAQ,MAC1CpY,IAAK,CAACL,KAAM,KAAMP,OAAQ,KAAMgZ,OAAQ,OAEpC0nC,EACJ5iD,EAAQ6iD,YAAcxvC,GAAI9T,KAAKS,EAAQ6iD,WAAY5iD,GAC/CD,EAAQ6iD,WAAW5iD,GACnBA,EACA6iD,EAA6B,kBAAdF,GAA0BA,IAAcG,EAAAA,SAE7D,IAAKC,GAAAA,mBAA2BJ,GAC9B,MAAM,IAAI5gD,UAAU,uBAADwQ,OACOvS,EAAI,uCA2DhC,GAvDA24B,EAAWl5B,IAAM,CACfO,EACAsC,EAASC,MAAMC,KACfF,EAASC,MAAMN,OACfyJ,GACAkC,KAAK,KAEM,MAAT5N,GAAgBD,EAAQijD,aAC1BrqB,EAAW74B,OACqB,oBAAvBC,EAAQijD,WACXjjD,EAAQijD,WACNv9C,OAAOkzB,EAAW3pB,MAAQ,IAC1BvM,EAAK0T,SACuB,kBAArBwiB,EAAWtD,MAAqBsD,EAAWtD,MAAQ,MAE5Dt1B,EAAQijD,YAGH,MAAThjD,GAAgBD,EAAQkjD,mBAC1BtqB,EAAW3pB,KAAOjP,EAAQkjD,iBACxBx9C,OAAOkzB,EAAW3pB,MAAQ,IAC1BvM,EAAK0T,SACuB,kBAArBwiB,EAAWtD,MAAqBsD,EAAWtD,MAAQ,OAK3DwtB,GACQ,SAAT7iD,GACgB,YAAhB83B,EAAO3zB,MACY,QAAnB2zB,EAAO1R,UAEPuS,EAAWuqB,QAAS,GAInBL,GACS,OAAT7iD,GACU,OAATA,GACS,OAATA,GACS,OAATA,GACS,OAATA,GACS,OAATA,IAEF24B,EAAWwqB,MAAQxvC,OAAOgb,SAAS3uB,EAAKkE,OAAO,GAAI,KAGxC,QAATlE,GAAkBD,EAAQqjD,oBAC5BzqB,EAAWj4B,IAAMX,EAAQqjD,kBACvB39C,OAAOkzB,EAAWj4B,KAAO,IACzB+E,OAAOkzB,EAAW1iB,KAAO,IACG,kBAArB0iB,EAAWtD,MAAqBsD,EAAWtD,MAAQ,QAIzDwtB,GAAkB,OAAT7iD,GAAiC,YAAhB83B,EAAO3zB,KAAoB,CACxD,IAAMk/C,EA0DV,SAAyB5gD,GACvB,IAAIiJ,GAAS,EAEb,OAASA,EAAQjJ,EAAK0T,SAASnV,QAAQ,CACrC,IAAMk5B,EAAQz3B,EAAK0T,SAASzK,GAE5B,GAAmB,YAAfwuB,EAAM/1B,MAAwC,UAAlB+1B,EAAM9T,QACpC,OAAO8T,CAEX,CAEA,OAAO,IACT,CAtEkBopB,CAAgB7gD,GAC9Bk2B,EAAW9C,QACTwtB,GAASA,EAAM1qB,WAAahjB,QAAQ0tC,EAAM1qB,WAAW9C,SAAW,KAClE8C,EAAWjtB,MAAQ63C,GAAuBzrB,EAAQr1B,GAClDk2B,EAAWhD,QAA6B,OAAnBmC,EAAO1R,OAC9B,CA4CA,OA1CKy8B,GAAmB,OAAT7iD,GAA0B,OAATA,IAC9B24B,EAAWhD,QAAmB,OAAT31B,EACrB24B,EAAWrD,MAAQvY,EAAQ2lC,WAGhB,OAAT1iD,GAA0B,OAATA,IACf24B,EAAW2B,QACR3B,EAAW72B,QAAO62B,EAAW72B,MAAQ,CAAC,GAE3C62B,EAAW72B,MAAM0hD,UAAY7qB,EAAW2B,aACjC3B,EAAW2B,OAGfuoB,IACHlqB,EAAW8qB,SAAoB,OAATzjD,IAIrB6iD,GAAkB,OAAT7iD,GAAiC,YAAhB83B,EAAO3zB,OACpCw0B,EAAW8qB,SAAW9tC,QAA2B,UAAnBmiB,EAAO1R,UAInCrmB,EAAQ2jD,YACV/qB,EAAW,kBAsIN,EADgB10B,EArI0B3B,GAuI3CC,MAAMC,KACV,IACAyB,EAAI1B,MAAMN,OACV,IACAgC,EAAIpB,IAAIL,KACR,IACAyB,EAAIpB,IAAIZ,QAEPgO,KAAI,SAAC/J,GAAC,OAAKT,OAAOS,EAAE,IACpB0H,KAAK,MA7IHi1C,GAAS9iD,EAAQ4jD,eACpBhrB,EAAWirB,eAAiBnhD,EAAKH,WAI9BugD,GAAS9iD,EAAQ8jD,sBACpBlrB,EAAWjtB,MAAQ63C,GAAuBzrB,EAAQr1B,GAClDk2B,EAAWmrB,aAAeP,GAAuBzrB,IAG9C+qB,IACHlqB,EAAWl2B,KAAOA,GAIb0T,EAASnV,OAAS,EACrB8hD,EAAAA,cAAoBH,EAAWhqB,EAAYxiB,GAC3C2sC,EAAAA,cAAoBH,EAAWhqB,EACrC,CAyBA,SAAS4qB,GAAuBzrB,EAAQr1B,GAItC,IAHA,IAAIiJ,GAAS,EACTq4C,EAAQ,IAEHr4C,EAAQosB,EAAO3hB,SAASnV,QAC3B82B,EAAO3hB,SAASzK,KAAWjJ,GACK,YAAhCq1B,EAAO3hB,SAASzK,GAAOvH,MAAoB4/C,IAGjD,OAAOA,CACT,CAQA,SAAStB,GAAY/rB,EAAOryB,EAAMlE,EAAOg7B,GACvC,IAAMzb,EF/VD,SAAc8iC,EAAQriD,GAC3B,IAAM07B,EAASrtB,GAAUrO,GACrBkE,EAAOlE,EACP6jD,EAAOhoB,GAEX,GAAIH,KAAU2mB,EAAO3mB,OACnB,OAAO2mB,EAAOh+C,SAASg+C,EAAO3mB,OAAOA,IAGvC,GAAIA,EAAO76B,OAAS,GAA4B,SAAvB66B,EAAOj4B,MAAM,EAAG,IAAiB+9C,GAAMh8C,KAAKxF,GAAQ,CAE3E,GAAwB,MAApBA,EAAM+D,OAAO,GAAY,CAE3B,IAAM+/C,EAAO9jD,EAAMyD,MAAM,GAAG/B,QAAQ+/C,GAAMG,IAC1C19C,EAAO,OAAS4/C,EAAK//C,OAAO,GAAG0B,cAAgBq+C,EAAKrgD,MAAM,EAC5D,KAAO,CAEL,IAAMqgD,EAAO9jD,EAAMyD,MAAM,GAEzB,IAAKg+C,GAAKj8C,KAAKs+C,GAAO,CACpB,IAAIC,EAASD,EAAKpiD,QAAQggD,GAAKC,IAEN,MAArBoC,EAAOhgD,OAAO,KAChBggD,EAAS,IAAMA,GAGjB/jD,EAAQ,OAAS+jD,CACnB,CACF,CAEAF,EAAOlnB,EACT,CAEA,OAAO,IAAIknB,EAAK3/C,EAAMlE,EACxB,CE6TegkD,CAAKhpB,EAAIqnB,OAAQn+C,GAC1BiB,EAASnF,EAIE,OAAXmF,QAA8ByF,IAAXzF,GAAwBA,IAAWA,IAMtDjG,MAAMF,QAAQmG,KAChBA,EAASoa,EAAK4c,eChUX,SAAmBlrB,EAAQrR,GAChC,IAAM8T,EAAW9T,GAAW,CAAC,EAK7B,OAF4C,KAA9BqR,EAAOA,EAAOpQ,OAAS,GAAY,GAAHuR,QAAArC,EAAAA,EAAAA,GAAOkB,GAAM,CAAE,KAAMA,GAGhExD,MACEiG,EAASuwC,SAAW,IAAM,IACzB,MACsB,IAArBvwC,EAASwwC,QAAoB,GAAK,MAEtC1iD,MACL,CDmTmC2iD,CAAOh/C,GAAiBA,EEtW3CsI,KAAK,KAAKjM,QFyWF,UAAlB+d,EAAKlb,UAA0C,kBAAXc,IACtCA,EAkBJ,SAAoBnF,GAElB,IAAMmF,EAAS,CAAC,EAEhB,IACExD,GAAM3B,EAAOyJ,EACf,CAAE,MAAA26C,GACA,CAGF,OAAOj/C,EAMP,SAASsE,EAAS5J,EAAM6G,GACtB,IAAMN,EAAyB,SAArBvG,EAAK4D,MAAM,EAAG,GAAgB,MAAH2O,OAASvS,EAAK4D,MAAM,IAAO5D,EAChEsF,EAAOiB,EAAE1E,QAAQ,YAAa2iD,KAAkB39C,CAClD,CACF,CAtCa49C,CAAWn/C,IAGlBoa,EAAKoc,OAASpc,EAAKlb,SACrBkyB,EACEtjB,GAAI9T,KAAK0iD,GAAatiC,EAAKlb,UACvBw9C,GAAYtiC,EAAKlb,UACjBkb,EAAKlb,UACPc,EACKoa,EAAKuc,YACdvF,EAAMhX,EAAKuc,WAAa32B,GAE5B,CAgCA,SAASk/C,GAAc3jC,EAAGkO,GACxB,OAAOA,EAAGnpB,aACZ,CGzYA,IAAMwN,GAAM,CAAC,EAAEvU,eACT6lD,GACJ,oEAGIC,GAAa,CACjBC,UAAW,CAAC3E,GAAI,aAAclnB,GAAI,kCAClC8rB,WAAY,CAAC9rB,GAAI,wCACjB+B,mBAAoB,CAAC/B,GAAI,wCACzB+rB,WAAY,CAAC/rB,GAAI,wCACjBj2B,OAAQ,CAACm9C,GAAI,WAAYlnB,GAAI,6BAC7BgsB,UAAW,CACT9E,GAAI,eACJlnB,GAAI,sDAENisB,aAAc,CACZ/E,GAAI,kBACJlnB,GAAI,sDAENksB,gBAAiB,CACfhF,GAAI,qBACJlnB,GAAI,sDAENmsB,iBAAkB,CAChBjF,GAAI,sBACJlnB,GAAI,mDAUD,SAASosB,GAAcplD,GAC5B,IAAK,IAAMN,KAAOklD,GAChB,GAAIvxC,GAAI9T,KAAKqlD,GAAYllD,IAAQ2T,GAAI9T,KAAKS,EAASN,GAAM,CACvD,IAAM2lD,EAAcT,GAAWllD,GAC/B4lD,QAAQC,KAAK,oCAAD/yC,OAER6yC,EAAYnF,GAAK,QAAH1tC,OAAY6yC,EAAYnF,GAAE,gBAAkB,SAAQ,MAAA1tC,OAC9D9S,EAAG,YAAA8S,OAAYmyC,GAAS,KAAAnyC,OAAI6yC,EAAYrsB,GAAE,4BAE3C4rB,GAAWllD,EACpB,CAGF,IAAMyT,EAAYP,IACfF,IAAIgkB,IAEJhkB,IAAI1S,EAAQwlD,eAAiBxlD,EAAQsU,SAAW,IAChD5B,IAAI+yC,GAAc,CAAC1qB,oBAAoB,IACvCroB,IAAI1S,EAAQ0lD,eAAiB,IAC7BhzC,IAAIyuC,GAAcnhD,GAEf0M,EAAO,IAAIiD,EAEe,kBAArB3P,EAAQoW,SACjB1J,EAAKtM,MAAQJ,EAAQoW,cACSpL,IAArBhL,EAAQoW,UAA+C,OAArBpW,EAAQoW,UACnDkvC,QAAQC,KAAK,uEAAD/yC,OACgExS,EAAQoW,SAAQ,OAI9F,IAAMuvC,EAAWxyC,EAAUiC,QAAQjC,EAAUxJ,MAAM+C,GAAOA,GAE1D,GAAsB,SAAlBi5C,EAASvhD,KACX,MAAM,IAAIpC,UAAU,0BAItB,IAAIuD,EAASw9C,EAAAA,cACXA,EAAAA,SACA,CAAC,EACDX,GAAgB,CAACpiD,QAAAA,EAASyiD,OAAQjyB,GAAMmyB,UAAW,GAAIgD,IAOzD,OAJI3lD,EAAQ64B,YACVtzB,EAASw9C,EAAAA,cAAoB,MAAO,CAAClqB,UAAW74B,EAAQ64B,WAAYtzB,IAG/DA,CACT,CAEA6/C,GAAcQ,aAAe,CAAC1C,iBPrHvB,SAAwB2C,GAC7B,IAAMh5C,GAAOg5C,GAAO,IAAIjkD,OAClBkkD,EAAQj5C,EAAI1I,OAAO,GAEzB,GAAc,MAAV2hD,GAA2B,MAAVA,EACnB,OAAOj5C,EAGT,IAAMk5C,EAAQl5C,EAAI3B,QAAQ,KAC1B,IAAe,IAAX66C,EACF,OAAOl5C,EAKT,IAFA,IAAIlB,GAAS,IAEJA,EAAQ+1C,GAAUzgD,QAAQ,CACjC,IAAMmO,EAAWsyC,GAAU/1C,GAE3B,GACEo6C,IAAU32C,EAASnO,QACnB4L,EAAIhJ,MAAM,EAAGuL,EAASnO,QAAQsjB,gBAAkBnV,EAEhD,OAAOvC,CAEX,CAGA,OAAe,KADflB,EAAQkB,EAAI3B,QAAQ,OACA66C,EAAQp6C,IAKb,KADfA,EAAQkB,EAAI3B,QAAQ,OACA66C,EAAQp6C,EAJnBkB,EASF,oBACT,GOiFAu4C,GAAcY,UAAY,CAExB5vC,SAAU6vC,GAAAA,OAEVptB,UAAWotB,GAAAA,OAEX3E,aAAc2E,GAAAA,KACd7E,gBAAiB6E,GAAAA,QAAkBA,GAAAA,QACnC5E,mBAAoB4E,GAAAA,QAAkBA,GAAAA,QACtCxE,iBAAkBwE,GAAAA,KAElBT,cAAeS,GAAAA,QACbA,GAAAA,UAAoB,CAClBA,GAAAA,OACAA,GAAAA,KACAA,GAAAA,QAAkBA,GAAAA,UAAoB,CAACA,GAAAA,OAAkBA,GAAAA,WAG7DP,cAAeO,GAAAA,QACbA,GAAAA,UAAoB,CAClBA,GAAAA,OACAA,GAAAA,KACAA,GAAAA,QAAkBA,GAAAA,UAAoB,CAACA,GAAAA,OAAkBA,GAAAA,WAI7DtC,UAAWsC,GAAAA,KACXrC,aAAcqC,GAAAA,KACd1D,SAAU0D,GAAAA,KACVnC,oBAAqBmC,GAAAA,KACrB/C,iBAAkB+C,GAAAA,UAAoB,CAACA,GAAAA,KAAgBA,GAAAA,OACvDhD,WAAYgD,GAAAA,UAAoB,CAACA,GAAAA,KAAgBA,GAAAA,SACjD5C,kBAAmB4C,GAAAA,KACnBpD,WAAYoD,GAAAA","sources":["../node_modules/extend/index.js","../node_modules/inline-style-parser/index.js","../node_modules/is-buffer/index.js","../node_modules/mdurl/encode.js","../node_modules/react-markdown/node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react-markdown/node_modules/react-is/index.js","../node_modules/style-to-object/index.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/unist-util-stringify-position/lib/index.js","../node_modules/vfile-message/lib/index.js","../node_modules/vfile/lib/minpath.browser.js","../node_modules/vfile/lib/minproc.browser.js","../node_modules/vfile/lib/minurl.shared.js","../node_modules/vfile/lib/minurl.browser.js","../node_modules/vfile/lib/index.js","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/bail/index.js","../node_modules/is-plain-obj/index.js","../node_modules/trough/index.js","../node_modules/unified/lib/index.js","../node_modules/mdast-util-to-string/lib/index.js","../node_modules/micromark-util-chunked/index.js","../node_modules/micromark-util-combine-extensions/index.js","../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js","../node_modules/micromark-util-character/index.js","../node_modules/micromark-factory-space/index.js","../node_modules/micromark/lib/initialize/content.js","../node_modules/micromark/lib/initialize/document.js","../node_modules/micromark-core-commonmark/lib/blank-line.js","../node_modules/micromark-util-subtokenize/index.js","../node_modules/micromark-core-commonmark/lib/content.js","../node_modules/micromark/lib/initialize/flow.js","../node_modules/micromark/lib/initialize/text.js","../node_modules/micromark-util-resolve-all/index.js","../node_modules/micromark/lib/create-tokenizer.js","../node_modules/micromark-core-commonmark/lib/thematic-break.js","../node_modules/micromark-core-commonmark/lib/list.js","../node_modules/micromark-core-commonmark/lib/block-quote.js","../node_modules/micromark-factory-destination/index.js","../node_modules/micromark-factory-label/index.js","../node_modules/micromark-factory-title/index.js","../node_modules/micromark-factory-whitespace/index.js","../node_modules/micromark-util-normalize-identifier/index.js","../node_modules/micromark-core-commonmark/lib/definition.js","../node_modules/micromark-core-commonmark/lib/code-indented.js","../node_modules/micromark-core-commonmark/lib/heading-atx.js","../node_modules/micromark-core-commonmark/lib/setext-underline.js","../node_modules/micromark-util-html-tag-name/index.js","../node_modules/micromark-core-commonmark/lib/html-flow.js","../node_modules/micromark-core-commonmark/lib/code-fenced.js","../node_modules/decode-named-character-reference/index.dom.js","../node_modules/micromark-core-commonmark/lib/character-reference.js","../node_modules/micromark-core-commonmark/lib/character-escape.js","../node_modules/micromark-core-commonmark/lib/line-ending.js","../node_modules/micromark-core-commonmark/lib/label-end.js","../node_modules/micromark-core-commonmark/lib/label-start-image.js","../node_modules/micromark-util-classify-character/index.js","../node_modules/micromark-core-commonmark/lib/attention.js","../node_modules/micromark-core-commonmark/lib/autolink.js","../node_modules/micromark-core-commonmark/lib/html-text.js","../node_modules/micromark-core-commonmark/lib/label-start-link.js","../node_modules/micromark-core-commonmark/lib/hard-break-escape.js","../node_modules/micromark-core-commonmark/lib/code-text.js","../node_modules/micromark/lib/constructs.js","../node_modules/micromark/lib/parse.js","../node_modules/micromark/lib/preprocess.js","../node_modules/micromark-util-decode-numeric-character-reference/index.js","../node_modules/micromark-util-decode-string/index.js","../node_modules/mdast-util-from-markdown/lib/index.js","../node_modules/micromark/lib/postprocess.js","../node_modules/remark-parse/lib/index.js","../node_modules/unist-builder/lib/index.js","../node_modules/unist-util-is/lib/index.js","../node_modules/unist-util-visit-parents/lib/index.js","../node_modules/unist-util-visit/lib/index.js","../node_modules/unist-util-position/lib/index.js","../node_modules/mdast-util-definitions/lib/index.js","../node_modules/mdast-util-to-hast/lib/traverse.js","../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../node_modules/mdast-util-to-hast/lib/wrap.js","../node_modules/mdast-util-to-hast/lib/handlers/list.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../node_modules/mdast-util-to-hast/lib/revert.js","../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../node_modules/mdast-util-to-hast/lib/handlers/index.js","../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../node_modules/mdast-util-to-hast/lib/handlers/break.js","../node_modules/mdast-util-to-hast/lib/handlers/code.js","../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../node_modules/mdast-util-to-hast/lib/handlers/footnote.js","../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../node_modules/mdast-util-to-hast/lib/handlers/html.js","../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/image.js","../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../node_modules/mdast-util-to-hast/lib/handlers/link.js","../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../node_modules/mdast-util-to-hast/lib/handlers/root.js","../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../node_modules/mdast-util-to-hast/lib/handlers/table.js","../node_modules/mdast-util-to-hast/lib/handlers/text.js","../node_modules/mdast-util-to-hast/lib/index.js","../node_modules/unist-util-generated/lib/index.js","../node_modules/mdast-util-to-hast/lib/footer.js","../node_modules/remark-rehype/index.js","../node_modules/property-information/lib/util/schema.js","../node_modules/property-information/lib/util/merge.js","../node_modules/property-information/lib/normalize.js","../node_modules/property-information/lib/util/info.js","../node_modules/property-information/lib/util/types.js","../node_modules/property-information/lib/util/defined-info.js","../node_modules/property-information/lib/util/create.js","../node_modules/property-information/lib/xlink.js","../node_modules/property-information/lib/xml.js","../node_modules/property-information/lib/util/case-sensitive-transform.js","../node_modules/property-information/lib/util/case-insensitive-transform.js","../node_modules/property-information/lib/xmlns.js","../node_modules/property-information/lib/aria.js","../node_modules/property-information/lib/html.js","../node_modules/property-information/lib/svg.js","../node_modules/property-information/index.js","../node_modules/react-markdown/lib/rehype-filter.js","../node_modules/react-markdown/lib/uri-transformer.js","../node_modules/hast-util-whitespace/index.js","../node_modules/property-information/lib/find.js","../node_modules/property-information/lib/hast-to-react.js","../node_modules/react-markdown/lib/ast-to-react.js","../node_modules/comma-separated-tokens/index.js","../node_modules/space-separated-tokens/index.js","../node_modules/react-markdown/lib/react-markdown.js"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function(style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function(node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\nmodule.exports = function isBuffer (obj) {\n  return obj != null && obj.constructor != null &&\n    typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","/** @license React v17.0.2\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var b=60103,c=60106,d=60107,e=60108,f=60114,g=60109,h=60110,k=60112,l=60113,m=60120,n=60115,p=60116,q=60121,r=60122,u=60117,v=60129,w=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var x=Symbol.for;b=x(\"react.element\");c=x(\"react.portal\");d=x(\"react.fragment\");e=x(\"react.strict_mode\");f=x(\"react.profiler\");g=x(\"react.provider\");h=x(\"react.context\");k=x(\"react.forward_ref\");l=x(\"react.suspense\");m=x(\"react.suspense_list\");n=x(\"react.memo\");p=x(\"react.lazy\");q=x(\"react.block\");r=x(\"react.server.block\");u=x(\"react.fundamental\");v=x(\"react.debug_trace_mode\");w=x(\"react.legacy_hidden\")}\nfunction y(a){if(\"object\"===typeof a&&null!==a){var t=a.$$typeof;switch(t){case b:switch(a=a.type,a){case d:case f:case e:case l:case m:return a;default:switch(a=a&&a.$$typeof,a){case h:case k:case p:case n:case g:return a;default:return t}}case c:return t}}}var z=g,A=b,B=k,C=d,D=p,E=n,F=c,G=f,H=e,I=l;exports.ContextConsumer=h;exports.ContextProvider=z;exports.Element=A;exports.ForwardRef=B;exports.Fragment=C;exports.Lazy=D;exports.Memo=E;exports.Portal=F;exports.Profiler=G;exports.StrictMode=H;\nexports.Suspense=I;exports.isAsyncMode=function(){return!1};exports.isConcurrentMode=function(){return!1};exports.isContextConsumer=function(a){return y(a)===h};exports.isContextProvider=function(a){return y(a)===g};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===b};exports.isForwardRef=function(a){return y(a)===k};exports.isFragment=function(a){return y(a)===d};exports.isLazy=function(a){return y(a)===p};exports.isMemo=function(a){return y(a)===n};\nexports.isPortal=function(a){return y(a)===c};exports.isProfiler=function(a){return y(a)===f};exports.isStrictMode=function(a){return y(a)===e};exports.isSuspense=function(a){return y(a)===l};exports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===d||a===f||a===v||a===e||a===l||a===m||a===w||\"object\"===typeof a&&null!==a&&(a.$$typeof===p||a.$$typeof===n||a.$$typeof===g||a.$$typeof===h||a.$$typeof===k||a.$$typeof===u||a.$$typeof===q||a[0]===r)?!0:!1};\nexports.typeOf=y;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","var parse = require('inline-style-parser');\n\n/**\n * Parses inline style to object.\n *\n * @example\n * // returns { 'line-height': '42' }\n * StyleToObject('line-height: 42;');\n *\n * @param  {String}      style      - The inline style.\n * @param  {Function}    [iterator] - The iterator function.\n * @return {null|Object}\n */\nfunction StyleToObject(style, iterator) {\n  var output = null;\n  if (!style || typeof style !== 'string') {\n    return output;\n  }\n\n  var declaration;\n  var declarations = parse(style);\n  var hasIterator = typeof iterator === 'function';\n  var property;\n  var value;\n\n  for (var i = 0, len = declarations.length; i < len; i++) {\n    declaration = declarations[i];\n    property = declaration.property;\n    value = declaration.value;\n\n    if (hasIterator) {\n      iterator(property, value, declaration);\n    } else if (value) {\n      output || (output = {});\n      output[property] = value;\n    }\n  }\n\n  return output;\n}\n\nmodule.exports = StyleToObject;\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason` at `place` from `origin`.\n   *\n   * When an error is passed in as `reason`, the `stack` is copied.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   *\n   *   > 👉 **Note**: you should use markdown.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // To do: next major: expose `undefined` everywhere instead of `null`.\n  constructor(reason, place, origin) {\n    /** @type {[string | null, string | null]} */\n    const parts = [null, null]\n    /** @type {Position} */\n    let position = {\n      // @ts-expect-error: we always follows the structure of `position`.\n      start: {line: null, column: null},\n      // @ts-expect-error: \"\n      end: {line: null, column: null}\n    }\n\n    super()\n\n    if (typeof place === 'string') {\n      origin = place\n      place = undefined\n    }\n\n    if (typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        parts[1] = origin\n      } else {\n        parts[0] = origin.slice(0, index)\n        parts[1] = origin.slice(index + 1)\n      }\n    }\n\n    if (place) {\n      // Node.\n      if ('type' in place || 'position' in place) {\n        if (place.position) {\n          // To do: next major: deep clone.\n          // @ts-expect-error: looks like a position.\n          position = place.position\n        }\n      }\n      // Position.\n      else if ('start' in place || 'end' in place) {\n        // @ts-expect-error: looks like a position.\n        // To do: next major: deep clone.\n        position = place\n      }\n      // Point.\n      else if ('line' in place || 'column' in place) {\n        // To do: next major: deep clone.\n        position.start = place\n      }\n    }\n\n    // Fields from `Error`.\n    /**\n     * Serialized positional info of error.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(place) || '1:1'\n\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = typeof reason === 'object' ? reason.message : reason\n\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack = ''\n\n    if (typeof reason === 'object' && reason.stack) {\n      this.stack = reason.stack\n    }\n\n    /**\n     * Reason for message.\n     *\n     * > 👉 **Note**: you should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * State of problem.\n     *\n     * * `true` — marks associated file as no longer processable (error)\n     * * `false` — necessitates a (potential) change (warning)\n     * * `null | undefined` — for things that might not need changing (info)\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | null}\n     */\n    this.line = position.start.line\n\n    /**\n     * Starting column of error.\n     *\n     * @type {number | null}\n     */\n    this.column = position.start.column\n\n    /**\n     * Full unist position.\n     *\n     * @type {Position | null}\n     */\n    this.position = position\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | null}\n     */\n    this.source = parts[0]\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | null}\n     */\n    this.ruleId = parts[1]\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | null}\n     */\n    this.file\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | null}\n     */\n    this.actual\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | null}\n     */\n    this.expected\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | null}\n     */\n    this.url\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | null}\n     */\n    this.note\n    /* eslint-enable no-unused-expressions */\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.fatal = null\nVFileMessage.prototype.column = null\nVFileMessage.prototype.line = null\nVFileMessage.prototype.source = null\nVFileMessage.prototype.ruleId = null\nVFileMessage.prototype.position = null\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const path = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | undefined} [ext]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, ext) {\n  if (ext !== undefined && typeof ext !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (ext === undefined || ext.length === 0 || ext.length > path.length) {\n    while (index--) {\n      if (path.charCodeAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (ext === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extIndex = ext.length - 1\n\n  while (index--) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {\n          if (extIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.charCodeAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.charCodeAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.charCodeAt(0) === 47 /* `/` */\n    ? '//'\n    : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.charCodeAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.charCodeAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.charCodeAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||\n          result.charCodeAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const proc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * @typedef URL\n * @property {string} hash\n * @property {string} host\n * @property {string} hostname\n * @property {string} href\n * @property {string} origin\n * @property {string} password\n * @property {string} pathname\n * @property {string} port\n * @property {string} protocol\n * @property {string} search\n * @property {any} searchParams\n * @property {string} username\n * @property {() => string} toString\n * @property {() => string} toJSON\n */\n\n/**\n * Check if `fileUrlOrPath` looks like a URL.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>\nexport function isUrl(fileUrlOrPath) {\n  return (\n    fileUrlOrPath !== null &&\n    typeof fileUrlOrPath === 'object' &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.href &&\n    // @ts-expect-error: indexable.\n    fileUrlOrPath.origin\n  )\n}\n","/// <reference lib=\"dom\" />\n\nimport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>\n\n/**\n * @param {string | URL} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.charCodeAt(index) === 37 /* `%` */ &&\n      pathname.charCodeAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.charCodeAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n\nexport {isUrl} from './minurl.shared.js'\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","/**\n * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback\n * @typedef {(...input: Array<any>) => any} Middleware\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add `fn` (middleware) to the list.\n * @typedef {{run: Run, use: Use}} Pipeline\n *   Middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error|null|undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware`.\n * Can be sync or async; return a promise, receive a callback, or return new\n * values and errors.\n *\n * @param {Middleware} middleware\n * @param {Callback} callback\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result instanceof Promise) {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('vfile').VFileCompatible} VFileCompatible\n * @typedef {import('vfile').VFileValue} VFileValue\n * @typedef {import('..').Processor} Processor\n * @typedef {import('..').Plugin} Plugin\n * @typedef {import('..').Preset} Preset\n * @typedef {import('..').Pluggable} Pluggable\n * @typedef {import('..').PluggableList} PluggableList\n * @typedef {import('..').Transformer} Transformer\n * @typedef {import('..').Parser} Parser\n * @typedef {import('..').Compiler} Compiler\n * @typedef {import('..').RunCallback} RunCallback\n * @typedef {import('..').ProcessCallback} ProcessCallback\n *\n * @typedef Context\n * @property {Node} tree\n * @property {VFile} file\n */\n\nimport {bail} from 'bail'\nimport isBuffer from 'is-buffer'\nimport extend from 'extend'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\n\n// Expose a frozen processor.\nexport const unified = base().freeze()\n\nconst own = {}.hasOwnProperty\n\n// Function to create the first processor.\n/**\n * @returns {Processor}\n */\nfunction base() {\n  const transformers = trough()\n  /** @type {Processor['attachers']} */\n  const attachers = []\n  /** @type {Record<string, unknown>} */\n  let namespace = {}\n  /** @type {boolean|undefined} */\n  let frozen\n  let freezeIndex = -1\n\n  // Data management.\n  // @ts-expect-error: overloads are handled.\n  processor.data = data\n  processor.Parser = undefined\n  processor.Compiler = undefined\n\n  // Lock.\n  processor.freeze = freeze\n\n  // Plugins.\n  processor.attachers = attachers\n  // @ts-expect-error: overloads are handled.\n  processor.use = use\n\n  // API.\n  processor.parse = parse\n  processor.stringify = stringify\n  // @ts-expect-error: overloads are handled.\n  processor.run = run\n  processor.runSync = runSync\n  // @ts-expect-error: overloads are handled.\n  processor.process = process\n  processor.processSync = processSync\n\n  // Expose.\n  return processor\n\n  // Create a new processor based on the processor in the current scope.\n  /** @type {Processor} */\n  function processor() {\n    const destination = base()\n    let index = -1\n\n    while (++index < attachers.length) {\n      destination.use(...attachers[index])\n    }\n\n    destination.data(extend(true, {}, namespace))\n\n    return destination\n  }\n\n  /**\n   * @param {string|Record<string, unknown>} [key]\n   * @param {unknown} [value]\n   * @returns {unknown}\n   */\n  function data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen)\n        namespace[key] = value\n        return processor\n      }\n\n      // Get `key`.\n      return (own.call(namespace, key) && namespace[key]) || null\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', frozen)\n      namespace = key\n      return processor\n    }\n\n    // Get space.\n    return namespace\n  }\n\n  /** @type {Processor['freeze']} */\n  function freeze() {\n    if (frozen) {\n      return processor\n    }\n\n    while (++freezeIndex < attachers.length) {\n      const [attacher, ...options] = attachers[freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      /** @type {Transformer|void} */\n      const transformer = attacher.call(processor, ...options)\n\n      if (typeof transformer === 'function') {\n        transformers.use(transformer)\n      }\n    }\n\n    frozen = true\n    freezeIndex = Number.POSITIVE_INFINITY\n\n    return processor\n  }\n\n  /**\n   * @param {Pluggable|null|undefined} [value]\n   * @param {...unknown} options\n   * @returns {Processor}\n   */\n  function use(value, ...options) {\n    /** @type {Record<string, unknown>|undefined} */\n    let settings\n\n    assertUnfrozen('use', frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, ...options)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    if (settings) {\n      namespace.settings = Object.assign(namespace.settings || {}, settings)\n    }\n\n    return processor\n\n    /**\n     * @param {import('..').Pluggable<unknown[]>} value\n     * @returns {void}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value)\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...options] = value\n          addPlugin(plugin, ...options)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {void}\n     */\n    function addPreset(result) {\n      addList(result.plugins)\n\n      if (result.settings) {\n        settings = Object.assign(settings || {}, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList|null|undefined} [plugins]\n     * @returns {void}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {...unknown} [value]\n     * @returns {void}\n     */\n    function addPlugin(plugin, value) {\n      let index = -1\n      /** @type {Processor['attachers'][number]|undefined} */\n      let entry\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entry = attachers[index]\n          break\n        }\n      }\n\n      if (entry) {\n        if (isPlainObj(entry[1]) && isPlainObj(value)) {\n          value = extend(true, entry[1], value)\n        }\n\n        entry[1] = value\n      } else {\n        // @ts-expect-error: fine.\n        attachers.push([...arguments])\n      }\n    }\n  }\n\n  /** @type {Processor['parse']} */\n  function parse(doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Parser = processor.Parser\n    assertParser('parse', Parser)\n\n    if (newable(Parser, 'parse')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Parser(String(file), file).parse()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Parser(String(file), file) // eslint-disable-line new-cap\n  }\n\n  /** @type {Processor['stringify']} */\n  function stringify(node, doc) {\n    processor.freeze()\n    const file = vfile(doc)\n    const Compiler = processor.Compiler\n    assertCompiler('stringify', Compiler)\n    assertNode(node)\n\n    if (newable(Compiler, 'compile')) {\n      // @ts-expect-error: `newable` checks this.\n      return new Compiler(node, file).compile()\n    }\n\n    // @ts-expect-error: `newable` checks this.\n    return Compiler(node, file) // eslint-disable-line new-cap\n  }\n\n  /**\n   * @param {Node} node\n   * @param {VFileCompatible|RunCallback} [doc]\n   * @param {RunCallback} [callback]\n   * @returns {Promise<Node>|void}\n   */\n  function run(node, doc, callback) {\n    assertNode(node)\n    processor.freeze()\n\n    if (!callback && typeof doc === 'function') {\n      callback = doc\n      doc = undefined\n    }\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((node: Node) => void)} resolve\n     * @param {(error: Error) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      // @ts-expect-error: `doc` can’t be a callback anymore, we checked.\n      transformers.run(node, vfile(doc), done)\n\n      /**\n       * @param {Error|null} error\n       * @param {Node} tree\n       * @param {VFile} file\n       * @returns {void}\n       */\n      function done(error, tree, file) {\n        tree = tree || node\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(tree)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, tree, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['runSync']} */\n  function runSync(node, file) {\n    /** @type {Node|undefined} */\n    let result\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.run(node, file, done)\n\n    assertDone('runSync', 'run', complete)\n\n    // @ts-expect-error: we either bailed on an error or have a tree.\n    return result\n\n    /**\n     * @param {Error|null} [error]\n     * @param {Node} [tree]\n     * @returns {void}\n     */\n    function done(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * @param {VFileCompatible} doc\n   * @param {ProcessCallback} [callback]\n   * @returns {Promise<VFile>|undefined}\n   */\n  function process(doc, callback) {\n    processor.freeze()\n    assertParser('process', processor.Parser)\n    assertCompiler('process', processor.Compiler)\n\n    if (!callback) {\n      return new Promise(executor)\n    }\n\n    executor(null, callback)\n\n    /**\n     * @param {null|((file: VFile) => void)} resolve\n     * @param {(error?: Error|null|undefined) => void} reject\n     * @returns {void}\n     */\n    function executor(resolve, reject) {\n      const file = vfile(doc)\n\n      processor.run(processor.parse(file), file, (error, tree, file) => {\n        if (error || !tree || !file) {\n          done(error)\n        } else {\n          /** @type {unknown} */\n          const result = processor.stringify(tree, file)\n\n          if (result === undefined || result === null) {\n            // Empty.\n          } else if (looksLikeAVFileValue(result)) {\n            file.value = result\n          } else {\n            file.result = result\n          }\n\n          done(error, file)\n        }\n      })\n\n      /**\n       * @param {Error|null|undefined} [error]\n       * @param {VFile|undefined} [file]\n       * @returns {void}\n       */\n      function done(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          // @ts-expect-error: `callback` is defined if `resolve` is not.\n          callback(null, file)\n        }\n      }\n    }\n  }\n\n  /** @type {Processor['processSync']} */\n  function processSync(doc) {\n    /** @type {boolean|undefined} */\n    let complete\n\n    processor.freeze()\n    assertParser('processSync', processor.Parser)\n    assertCompiler('processSync', processor.Compiler)\n\n    const file = vfile(doc)\n\n    processor.process(file, done)\n\n    assertDone('processSync', 'process', complete)\n\n    return file\n\n    /**\n     * @param {Error|null|undefined} [error]\n     * @returns {void}\n     */\n    function done(error) {\n      complete = true\n      bail(error)\n    }\n  }\n}\n\n/**\n * Check if `value` is a constructor.\n *\n * @param {unknown} value\n * @param {string} name\n * @returns {boolean}\n */\nfunction newable(value, name) {\n  return (\n    typeof value === 'function' &&\n    // Prototypes do exist.\n    // type-coverage:ignore-next-line\n    value.prototype &&\n    // A function with keys in its prototype is probably a constructor.\n    // Classes’ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    // type-coverage:ignore-next-line\n    (keys(value.prototype) || name in value.prototype)\n  )\n}\n\n/**\n * Check if `value` is an object with keys.\n *\n * @param {Record<string, unknown>} value\n * @returns {boolean}\n */\nfunction keys(value) {\n  /** @type {string} */\n  let key\n\n  for (key in value) {\n    if (own.call(value, key)) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `Compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {VFileCompatible} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is VFileValue}\n */\nfunction looksLikeAVFileValue(value) {\n  return typeof value === 'string' || isBuffer(value)\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Content} Node\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s.\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML.\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} value\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Node}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {void}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n  return items\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Handles} Handles\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {Array<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n * @param {Array<unknown>} list\n * @returns {void}\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {Array<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   A single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {void}\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","// This module is generated by `script/`.\n//\n// CommonMark handles attention (emphasis, strong) markers based on what comes\n// before or after them.\n// One such difference is if those characters are Unicode punctuation.\n// This script is generated from the Unicode data.\n\n/**\n * Regular expression that matches a unicode punctuation character.\n */\nexport const unicodePunctuationRegex =\n  /[!-\\/:-@\\[-`\\{-~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1B7D\\u1B7E\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {unicodePunctuationRegex} from './lib/unicode-punctuation-regex.js'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(unicodePunctuationRegex)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n * @returns {(code: Code) => boolean}\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && regex.test(String.fromCharCode(code))\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, contentStart, 'linePrefix')\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter('paragraph')\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter('chunkText', {\n      contentType: 'text',\n      previous\n    })\n    if (previous) {\n      previous.next = token\n    }\n    previous = token\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit('chunkText')\n      effects.exit('paragraph')\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit('chunkText')\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n}\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n      return checkNewContainers(code)\n    }\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter('chunkFlow', {\n      contentType: 'flow',\n      previous: childToken,\n      _tokenizer: childFlow\n    })\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit('chunkFlow'), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit('chunkFlow'))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   * @param {boolean | undefined} [eof]\n   * @returns {void}\n   */\n  function writeToChild(token, eof) {\n    const stream = self.sliceStream(token)\n    if (eof) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === 'chunkFlow'\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n          seen = true\n        }\n      }\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n      while (index < self.events.length) {\n        self.events[index][1].end = Object.assign({}, point)\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   * @returns {void}\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      entry[0].exit.call(self, effects)\n    }\n    stack.length = size\n  }\n  function closeFlow() {\n    childFlow.write([null])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    'linePrefix',\n    this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blankLine = {\n  tokenize: tokenizeBlankLine,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'linePrefix')(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {splice} from 'micromark-util-chunked'\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} events\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\nexport function subtokenize(events) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n    event = events[index]\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === 'chunkFlow' &&\n      events[index - 1][1].type === 'listItemPrefix'\n    ) {\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'lineEndingBlank'\n      ) {\n        otherIndex += 2\n      }\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === 'content'\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === 'content') {\n            break\n          }\n          if (subevents[otherIndex][1].type === 'chunkText') {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n      while (otherIndex--) {\n        otherEvent = events[otherIndex]\n        if (\n          otherEvent[1].type === 'lineEnding' ||\n          otherEvent[1].type === 'lineEndingBlank'\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events[lineIndex][1].type = 'lineEndingBlank'\n            }\n            otherEvent[1].type = 'lineEnding'\n            lineIndex = otherIndex\n          }\n        } else {\n          break\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = Object.assign({}, events[lineIndex][1].start)\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        splice(events, lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {Array<Event>} events\n * @param {number} eventIndex\n * @returns {Record<string, number>}\n */\nfunction subcontent(events, eventIndex) {\n  const token = events[eventIndex][1]\n  const context = events[eventIndex][2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  const tokenizer =\n    token._tokenizer || context.parser[token.contentType](token.start)\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events[++startPosition][1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition)\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n      if (!current.next) {\n        stream.push(null)\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n      tokenizer.write(stream)\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    jumps.unshift([start, start + slice.length - 1])\n    splice(events, start, 2, slice)\n  }\n  index = -1\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n  return gaps\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  tokenize: tokenizeContent,\n  resolve: resolveContent\n}\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  tokenize: tokenizeContinuation,\n  partial: true\n}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter('content')\n    previous = effects.enter('chunkContent', {\n      contentType: 'content'\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit('chunkContent')\n    effects.exit('content')\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code)\n    effects.exit('chunkContent')\n    previous.next = effects.enter('chunkContent', {\n      contentType: 'content',\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit('chunkContent')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, prefixed, 'linePrefix')\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1]\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n    ) {\n      return ok(code)\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Initializer}\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        'linePrefix'\n      )\n    )\n  )\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEndingBlank')\n    effects.consume(code)\n    effects.exit('lineEndingBlank')\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code)\n      return\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').Initializer} Initializer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n * @returns {InitialConstruct}\n */\nfunction initializeFactory(field) {\n  return {\n    tokenize: initializeText,\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    )\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code)\n        return\n      }\n      effects.enter('data')\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit('data')\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     * @returns {boolean}\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true\n      }\n      const list = constructs[code]\n      let index = -1\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n * @returns {Resolver}\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === 'data') {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== 'data') {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n        enter = undefined\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === 'lineEnding') &&\n      events[eventIndex - 1][1].type === 'data'\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n      while (index--) {\n        const chunk = chunks[index]\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++\n            bufferIndex--\n          }\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true\n          size++\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length || tabs || size < 2\n              ? 'lineSuffix'\n              : 'hardBreakTrailing',\n          start: {\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size,\n            _index: data.start._index + index,\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex\n          },\n          end: Object.assign({}, data.end)\n        }\n        data.end = Object.assign({}, token.start)\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n      eventIndex++\n    }\n  }\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {Array<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenType} TokenType\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n */\n\n/**\n * @callback Restore\n * @returns {void}\n *\n * @typedef Info\n * @property {Restore} restore\n * @property {number} from\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n * @param {Info} info\n * @returns {void}\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n * @param {InitialConstruct} initialize\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n * @returns {TokenizeContext}\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = Object.assign(\n    from\n      ? Object.assign({}, from)\n      : {\n          line: 1,\n          column: 1,\n          offset: 0\n        },\n    {\n      _index: 0,\n      _bufferIndex: -1\n    }\n  )\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    consume,\n    enter,\n    exit,\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    previous: null,\n    code: null,\n    containerState: {},\n    events: [],\n    parser,\n    sliceStream,\n    sliceSerialize,\n    now,\n    defineSkip,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | void}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return []\n    }\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {line, column, offset, _index, _bufferIndex} = point\n    return {\n      line,\n      column,\n      offset,\n      _index,\n      _bufferIndex\n    }\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {void}\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   * @returns {void}\n   */\n  function go(code) {\n    consumed = undefined\n    expectedCode = code\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === -3 ? 2 : 1\n      accountForPotentialSkip()\n    } else if (code !== -1) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      // @ts-expect-error Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      if (point._bufferIndex === chunks[point._index].length) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n    context.events.push(['enter', token, context])\n    stack.push(token)\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop()\n    token.end = now()\n    context.events.push(['exit', token, context])\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | Construct | ConstructRecord} constructs\n     * @param {State} returnState\n     * @param {State | undefined} [bogusState]\n     * @returns {State}\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {Array<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n      return Array.isArray(constructs) /* c8 ignore next 1 */\n        ? handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n        ? // @ts-expect-error Looks like a construct.\n          handleListOfConstructs([constructs])\n        : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       * @returns {State}\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const def = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(def) ? def : def ? [def] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {Array<Construct>} list\n       * @returns {State}\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n        if (list.length === 0) {\n          return bogusState\n        }\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       * @returns {State}\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true\n        info.restore()\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   * @param {number} from\n   * @returns {void}\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n    return {\n      restore,\n      from: startEventsIndex\n    }\n\n    /**\n     * Restore state.\n     *\n     * @returns {void}\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {void}\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {Array<Chunk>} chunks\n * @param {Pick<Token, 'end' | 'start'>} token\n * @returns {Array<Chunk>}\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n      } else {\n        view.shift()\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {Array<Chunk>} chunks\n * @param {boolean | undefined} [expandTabs=false]\n * @returns {string}\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case -5: {\n          value = '\\r'\n          break\n        }\n        case -4: {\n          value = '\\n'\n          break\n        }\n        case -3: {\n          value = '\\r' + '\\n'\n          break\n        }\n        case -2: {\n          value = expandTabs ? ' ' : '\\t'\n          break\n        }\n        case -1: {\n          if (!expandTabs && atTab) continue\n          value = ' '\n          break\n        }\n        default: {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n    atTab = chunk === -2\n    result.push(value)\n  }\n  return result.join('')\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('thematicBreak')\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter('thematicBreakSequence')\n      return sequence(code)\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit('thematicBreak')\n      return ok(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n    effects.exit('thematicBreakSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, 'whitespace')(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').ContainerState} ContainerState\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  name: 'list',\n  tokenize: tokenizeListStart,\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  tokenize: tokenizeListItemPrefixWhitespace,\n  partial: true\n}\n\n/** @type {Construct} */\nconst indentConstruct = {\n  tokenize: tokenizeIndent,\n  partial: true\n}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === 'linePrefix'\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    const kind =\n      self.containerState.type ||\n      (code === 42 || code === 43 || code === 45\n        ? 'listUnordered'\n        : 'listOrdered')\n    if (\n      kind === 'listUnordered'\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {\n          _container: true\n        })\n      }\n      if (kind === 'listUnordered') {\n        effects.enter('listItemPrefix')\n        return code === 42 || code === 45\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter('listItemPrefix')\n        effects.enter('listItemValue')\n        return inside(code)\n      }\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code)\n      return inside\n    }\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === 41 || code === 46)\n    ) {\n      effects.exit('listItemValue')\n      return atMarker(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter('listItemMarker')\n    effects.consume(code)\n    effects.exit('listItemMarker')\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter('listItemPrefixWhitespace')\n      effects.consume(code)\n      effects.exit('listItemPrefixWhitespace')\n      return endOfPrefix\n    }\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit('listItemPrefix'), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n  self.containerState._closeFlow = undefined\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      'listItemIndent',\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      'linePrefix',\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : 4\n    )(code)\n  }\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemIndent',\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'listItemIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @type {Exiter}\n * @this {TokenizeContext}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @type {Tokenizer}\n * @this {TokenizeContext}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'listItemPrefixWhitespace',\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : 4 + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === 'listItemPrefixWhitespace'\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState\n      if (!state.open) {\n        effects.enter('blockQuote', {\n          _container: true\n        })\n        state.open = true\n      }\n      effects.enter('blockQuotePrefix')\n      effects.enter('blockQuoteMarker')\n      effects.consume(code)\n      effects.exit('blockQuoteMarker')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter('blockQuotePrefixWhitespace')\n      effects.consume(code)\n      effects.exit('blockQuotePrefixWhitespace')\n      effects.exit('blockQuotePrefix')\n      return ok\n    }\n    effects.exit('blockQuotePrefix')\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(\n        effects,\n        contBefore,\n        'linePrefix',\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : 4\n      )(code)\n    }\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit('blockQuote')\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code)\n      return enclosed\n    }\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === null || code === 41 || markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit('chunkString')\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n    if (code === 41) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return code === 92 ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code)\n      return raw\n    }\n    return raw(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > 999 ||\n      code === null ||\n      code === 91 ||\n      (code === 93 && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === 94 &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return atBreak\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === null ||\n      code === 91 ||\n      code === 93 ||\n      markdownLineEnding(code) ||\n      size++ > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === 92 ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n    return labelInside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenType} TokenType\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */ // eslint-disable-next-line max-params\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === 40 ? 41 : code\n      return begin\n    }\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return factorySpace(effects, atBreak, 'linePrefix')\n    }\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return code === 92 ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code)\n      return inside\n    }\n    return inside(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Effects} Effects\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      seen = true\n      return start\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? 'linePrefix' : 'lineSuffix'\n      )(code)\n    }\n    return ok(code)\n  }\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, ' ')\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n}\n\n/** @type {Construct} */\nconst titleBefore = {\n  tokenize: tokenizeTitleBefore,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter('definition')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionLabel',\n      'definitionLabelMarker',\n      'definitionLabelString'\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n    if (code === 58) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n      return markerAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      'definitionDestination',\n      'definitionDestinationLiteral',\n      'definitionDestinationLiteralMarker',\n      'definitionDestinationRaw',\n      'definitionDestinationString'\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, 'whitespace')(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('definition')\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      'definitionTitle',\n      'definitionTitleMarker',\n      'definitionTitleString'\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {\n  tokenize: tokenizeFurtherStart,\n  partial: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter('codeIndented')\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code)\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit('codeIndented')\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'linePrefix' &&\n      tail[2].sliceSerialize(tail[1], true).length >= 4\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? furtherStart(code)\n      : nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  tokenize: tokenizeHeadingAtx,\n  resolve: resolveHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === 'whitespace') {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === 'whitespace'\n  ) {\n    contentEnd -= 2\n  }\n  if (\n    events[contentEnd][1].type === 'atxHeadingSequence' &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === 'whitespace'))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: 'atxHeadingText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: 'chunkText',\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: 'text'\n    }\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter('atxHeading')\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('atxHeadingSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingSequence')\n      return atBreak(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter('atxHeadingSequence')\n      return sequenceFurther(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('atxHeading')\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, 'whitespace')(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter('atxHeadingText')\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n    effects.exit('atxHeadingSequence')\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit('atxHeadingText')\n      return atBreak(code)\n    }\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  tokenize: tokenizeSetextUnderline,\n  resolveTo: resolveToSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === 'content') {\n        content = index\n        break\n      }\n      if (events[index][1].type === 'paragraph') {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === 'content') {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n      if (!definition && events[index][1].type === 'definition') {\n        definition = index\n      }\n    }\n  }\n  const heading = {\n    type: 'setextHeading',\n    start: Object.assign({}, events[text][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = 'setextHeadingText'\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = Object.assign({}, events[definition][1].end)\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== 'lineEnding' &&\n        self.events[index][1].type !== 'linePrefix' &&\n        self.events[index][1].type !== 'content'\n      ) {\n        paragraph = self.events[index][1].type === 'paragraph'\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter('setextHeadingLine')\n      marker = code\n      return before(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('setextHeadingLineSequence')\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    effects.exit('setextHeadingLineSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, after, 'lineSuffix')(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('setextHeadingLine')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  name: 'htmlFlow',\n  tokenize: tokenizeHtmlFlow,\n  resolveTo: resolveToHtmlFlow,\n  concrete: true\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  tokenize: tokenizeBlankLineBefore,\n  partial: true\n}\nconst nonLazyContinuationStart = {\n  tokenize: tokenizeNonLazyContinuationStart,\n  partial: true\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {\n      break\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === 'linePrefix') {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter('htmlFlow')\n    effects.enter('htmlFlowData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      marker = 3\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      marker = 2\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      marker = 5\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = 4\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n      return cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === null ||\n      code === 47 ||\n      code === 62 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === 47\n      const name = buffer.toLowerCase()\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n      marker = 7\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n        ? completeClosingTagAfter(code)\n        : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 47 ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96 ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code)\n      return continuationClose\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit('htmlFlowData')\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationStart(code)\n    }\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n    effects.enter('htmlFlowData')\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase()\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n      return continuation(code)\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      effects.consume(code)\n      // @ts-expect-error: not null.\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('htmlFlowData')\n      return continuationAfter(code)\n    }\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit('htmlFlow')\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  tokenize: tokenizeNonLazyContinuation,\n  partial: true\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced,\n  concrete: true\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {\n    tokenize: tokenizeCloseStart,\n    partial: true\n  }\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === 'linePrefix'\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n    marker = code\n    effects.enter('codeFenced')\n    effects.enter('codeFencedFence')\n    effects.enter('codeFencedFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n    if (sizeOpen < 3) {\n      return nok(code)\n    }\n    effects.exit('codeFencedFenceSequence')\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, 'whitespace')(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFencedFence')\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFencedFenceInfo')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return infoBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceInfo')\n      return factorySpace(effects, metaBefore, 'whitespace')(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n    effects.enter('codeFencedFenceMeta')\n    effects.enter('chunkString', {\n      contentType: 'string'\n    })\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('chunkString')\n      effects.exit('codeFencedFenceMeta')\n      return infoBefore(code)\n    }\n    if (code === 96 && code === marker) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          'linePrefix',\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n    effects.enter('codeFlowValue')\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('codeFlowValue')\n      return beforeContentChunk(code)\n    }\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit('codeFenced')\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter('codeFencedFence')\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            'linePrefix',\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : 4\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter('codeFencedFenceSequence')\n        return sequenceClose(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n      if (size >= sizeOpen) {\n        effects.exit('codeFencedFenceSequence')\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)\n          : sequenceCloseAfter(code)\n      }\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit('codeFencedFence')\n        return ok(code)\n      }\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/// <reference lib=\"dom\" />\n\n/* eslint-env browser */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string|false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const char = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return char === characterReference ? false : char\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterReference')\n    effects.enter('characterReferenceMarker')\n    effects.consume(code)\n    effects.exit('characterReferenceMarker')\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter('characterReferenceMarkerNumeric')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerNumeric')\n      return numeric\n    }\n    effects.enter('characterReferenceValue')\n    max = 31\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter('characterReferenceMarkerHexadecimal')\n      effects.consume(code)\n      effects.exit('characterReferenceMarkerHexadecimal')\n      effects.enter('characterReferenceValue')\n      max = 6\n      test = asciiHexDigit\n      return value\n    }\n    effects.enter('characterReferenceValue')\n    max = 7\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit('characterReferenceValue')\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter('characterReferenceMarker')\n      effects.consume(code)\n      effects.exit('characterReferenceMarker')\n      effects.exit('characterReference')\n      return ok\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {asciiPunctuation} from 'micromark-util-character'\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('characterEscape')\n    effects.enter('escapeMarker')\n    effects.consume(code)\n    effects.exit('escapeMarker')\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter('characterEscapeValue')\n      effects.consume(code)\n      effects.exit('characterEscapeValue')\n      effects.exit('characterEscape')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return factorySpace(effects, ok, 'linePrefix')\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  tokenize: tokenizeLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  resolveAll: resolveAllLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n}\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  while (++index < events.length) {\n    const token = events[index][1]\n    if (\n      token.type === 'labelImage' ||\n      token.type === 'labelLink' ||\n      token.type === 'labelEnd'\n    ) {\n      // Remove the marker.\n      events.splice(index + 1, token.type === 'labelImage' ? 4 : 2)\n      token.type = 'data'\n      index++\n    }\n  }\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === 'link' ||\n        (token.type === 'labelLink' && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === 'labelLink') {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === 'labelImage' || token.type === 'labelLink') &&\n        !token._balanced\n      ) {\n        open = index\n        if (token.type !== 'labelLink') {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === 'labelEnd') {\n      close = index\n    }\n  }\n  const group = {\n    type: events[open][1].type === 'labelLink' ? 'link' : 'image',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  const label = {\n    type: 'label',\n    start: Object.assign({}, events[open][1].start),\n    end: Object.assign({}, events[close][1].end)\n  }\n  const text = {\n    type: 'labelText',\n    start: Object.assign({}, events[open + offset + 2][1].end),\n    end: Object.assign({}, events[close - 2][1].start)\n  }\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n  splice(events, open, events.length, media)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === 'labelImage' ||\n        self.events[index][1].type === 'labelLink') &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({\n          start: labelStart.end,\n          end: self.now()\n        })\n      )\n    )\n    effects.enter('labelEnd')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelEnd')\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter('resource')\n    effects.enter('resourceMarker')\n    effects.consume(code)\n    effects.exit('resourceMarker')\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code)\n    }\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      'resourceDestination',\n      'resourceDestinationLiteral',\n      'resourceDestinationLiteralMarker',\n      'resourceDestinationRaw',\n      'resourceDestinationString',\n      32\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        'resourceTitle',\n        'resourceTitleMarker',\n        'resourceTitleString'\n      )(code)\n    }\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter('resourceMarker')\n      effects.consume(code)\n      effects.exit('resourceMarker')\n      effects.exit('resource')\n      return ok\n    }\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      'reference',\n      'referenceMarker',\n      'referenceString'\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter('reference')\n    effects.enter('referenceMarker')\n    effects.consume(code)\n    effects.exit('referenceMarker')\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter('referenceMarker')\n      effects.consume(code)\n      effects.exit('referenceMarker')\n      effects.exit('reference')\n      return ok\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  tokenize: tokenizeLabelStartImage,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelImage')\n    effects.enter('labelImageMarker')\n    effects.consume(code)\n    effects.exit('labelImageMarker')\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter('labelMarker')\n      effects.consume(code)\n      effects.exit('labelMarker')\n      effects.exit('labelImage')\n      return after\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === null ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return 1\n  }\n  if (unicodePunctuation(code)) {\n    return 2\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Point} Point\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  tokenize: tokenizeAttention,\n  resolveAll: resolveAllAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n          const start = Object.assign({}, events[open][1].end)\n          const end = Object.assign({}, events[index][1].start)\n          movePoint(start, -use)\n          movePoint(end, use)\n          openingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start,\n            end: Object.assign({}, events[open][1].end)\n          }\n          closingSequence = {\n            type: use > 1 ? 'strongSequence' : 'emphasisSequence',\n            start: Object.assign({}, events[index][1].start),\n            end\n          }\n          text = {\n            type: use > 1 ? 'strongText' : 'emphasisText',\n            start: Object.assign({}, events[open][1].end),\n            end: Object.assign({}, events[index][1].start)\n          }\n          group = {\n            type: use > 1 ? 'strong' : 'emphasis',\n            start: Object.assign({}, openingSequence.start),\n            end: Object.assign({}, closingSequence.end)\n          }\n          events[open][1].end = Object.assign({}, openingSequence.start)\n          events[index][1].start = Object.assign({}, closingSequence.end)\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n          splice(events, open - 1, index - open + 3, nextEvents)\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n\n    const open =\n      !after || (after === 2 && before) || attentionMarkers.includes(code)\n    const close =\n      !before || (before === 2 && after) || attentionMarkers.includes(previous)\n    token._open = Boolean(marker === 42 ? open : open && (before || !close))\n    token._close = Boolean(marker === 42 ? close : close && (after || !open))\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n * @param {number} offset\n * @returns {void}\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('autolink')\n    effects.enter('autolinkMarker')\n    effects.consume(code)\n    effects.exit('autolinkMarker')\n    effects.enter('autolinkProtocol')\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&\n      size++ < 32\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit('autolinkProtocol')\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code)\n    }\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit('autolinkProtocol').type = 'autolinkEmail'\n      effects.enter('autolinkMarker')\n      effects.consume(code)\n      effects.exit('autolinkMarker')\n      effects.exit('autolink')\n      return ok\n    }\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlpha,\n  asciiAlphanumeric,\n  markdownLineEnding,\n  markdownLineEndingOrSpace,\n  markdownSpace\n} from 'micromark-util-character'\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('htmlText')\n    effects.enter('htmlTextData')\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code)\n      return declarationOpen\n    }\n    if (code === 47) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n    if (code === 91) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 45) {\n      effects.consume(code)\n      return commentClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code)\n      return commentEnd\n    }\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62\n      ? end(code)\n      : code === 45\n      ? commentClose(code)\n      : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = 'CDATA['\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code)\n    }\n    if (code === 93) {\n      effects.consume(code)\n      return cdataEnd\n    }\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code)\n    }\n    if (code === 63) {\n      effects.consume(code)\n      return instructionClose\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === 45 ||\n      code === 46 ||\n      code === 58 ||\n      code === 95 ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === null ||\n      code === 60 ||\n      code === 61 ||\n      code === 62 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n    if (code === null) {\n      return nok(code)\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === null ||\n      code === 34 ||\n      code === 39 ||\n      code === 60 ||\n      code === 61 ||\n      code === 96\n    ) {\n      return nok(code)\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code)\n    }\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code)\n      effects.exit('htmlTextData')\n      effects.exit('htmlText')\n      return ok\n    }\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit('htmlTextData')\n    effects.enter('lineEnding')\n    effects.consume(code)\n    effects.exit('lineEnding')\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          'linePrefix',\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : 4\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter('htmlTextData')\n    return returnState(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('labelLink')\n    effects.enter('labelMarker')\n    effects.consume(code)\n    effects.exit('labelMarker')\n    effects.exit('labelLink')\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('hardBreakEscape')\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit('hardBreakEscape')\n      return ok(code)\n    }\n    return nok(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {markdownLineEnding} from 'micromark-util-character'\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  tokenize: tokenizeCodeText,\n  resolve: resolveCodeText,\n  previous\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'codeTextData') {\n        // Then we have padding.\n        events[headEnterIndex][1].type = 'codeTextPadding'\n        events[tailExitIndex][1].type = 'codeTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'codeTextData'\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n      enter = undefined\n    }\n  }\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 96 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('codeText')\n    effects.enter('codeTextSequence')\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n    effects.exit('codeTextSequence')\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter('codeTextSequence')\n      size = 0\n      return sequenceClose(code)\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return between\n    }\n\n    // Data.\n    effects.enter('codeTextData')\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 96 ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit('codeTextData')\n      return between(code)\n    }\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('codeTextSequence')\n      effects.exit('codeText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'codeTextData'\n    return data(code)\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Extension} Extension\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n}\n","/**\n * @typedef {import('micromark-util-types').Create} Create\n * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension\n * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct\n * @typedef {import('micromark-util-types').ParseContext} ParseContext\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {text, string} from './initialize/text.js'\nimport {createTokenizer} from './create-tokenizer.js'\nimport * as defaultConstructs from './constructs.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n * @returns {ParseContext}\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs =\n    /** @type {FullNormalizedExtension} */\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n\n  /** @type {ParseContext} */\n  const parser = {\n    defined: [],\n    lazy: {},\n    constructs,\n    content: create(content),\n    document: create(document),\n    flow: create(flow),\n    string: create(string),\n    text: create(text)\n  }\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Chunk} Chunk\n * @typedef {import('micromark-util-types').Code} Code\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Value} Value\n */\n\n/**\n * @callback Preprocessor\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {boolean | null | undefined} [end=false]\n * @returns {Array<Chunk>}\n */\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    // @ts-expect-error `Buffer` does allow an encoding.\n    value = buffer + value.toString(encoding)\n    startPosition = 0\n    buffer = ''\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++\n      }\n      start = undefined\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5)\n          atCarriageReturn = undefined\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n        switch (code) {\n          case 0: {\n            chunks.push(65533)\n            column++\n            break\n          }\n          case 9: {\n            next = Math.ceil(column / 4) * 4\n            chunks.push(-2)\n            while (column++ < next) chunks.push(-1)\n            break\n          }\n          case 10: {\n            chunks.push(-4)\n            column = 1\n            break\n          }\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n      startPosition = endPosition + 1\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5)\n      if (buffer) chunks.push(buffer)\n      chunks.push(null)\n    }\n    return chunks\n  }\n}\n","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < 9 ||\n    code === 11 ||\n    (code > 13 && code < 32) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > 126 && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55295 && code < 57344) ||\n    // Noncharacters.\n    (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||\n    (code & 65535) === 65535 ||\n    (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||\n    // Out of range\n    code > 1114111\n  ) {\n    return '\\uFFFD'\n  }\n  return String.fromCharCode(code)\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @param {string} $2\n * @returns {string}\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n  if (head === 35) {\n    const head = $2.charCodeAt(1)\n    const hex = head === 120 || head === 88\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)\n  }\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @typedef {import('micromark-util-types').Encoding} Encoding\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').ParseOptions} ParseOptions\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Value} Value\n *\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist').Point} Point\n *\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Break} Break\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('mdast').Code} Code\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('mdast').Image} Image\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').List} List\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('mdast').Text} Text\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('mdast').ReferenceType} ReferenceType\n * @typedef {import('../index.js').CompileData} CompileData\n */\n\n/**\n * @typedef {Root | Content} Node\n * @typedef {Extract<Node, UnistParent>} Parent\n *\n * @typedef {Omit<UnistParent, 'type' | 'children'> & {type: 'fragment', children: Array<PhrasingContent>}} Fragment\n */\n\n/**\n * @callback Transform\n *   Extra transform, to change the AST afterwards.\n * @param {Root} tree\n *   Tree to transform.\n * @returns {Root | undefined | null | void}\n *   New tree or nothing (in which case the current tree is used).\n *\n * @callback Handle\n *   Handle a token.\n * @param {CompileContext} this\n *   Context.\n * @param {Token} token\n *   Current token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {Record<string, Handle>} Handles\n *   Token types mapping to handles\n *\n * @callback OnEnterError\n *   Handle the case where the `right` token is open, but it is closed (by the\n *   `left` token) or because we reached the end of the document.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token | undefined} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @callback OnExitError\n *   Handle the case where the `right` token is open but it is closed by\n *   exiting the `left` token.\n * @param {Omit<CompileContext, 'sliceSerialize'>} this\n *   Context.\n * @param {Token} left\n *   Left token.\n * @param {Token} right\n *   Right token.\n * @returns {void}\n *   Nothing.\n *\n * @typedef {[Token, OnEnterError | undefined]} TokenTuple\n *   Open token on the stack, with an optional error handler for when\n *   that token isn’t closed properly.\n */\n\n/**\n * @typedef Config\n *   Configuration.\n *\n *   We have our defaults, but extensions will add more.\n * @property {Array<string>} canContainEols\n *   Token types where line endings are used.\n * @property {Handles} enter\n *   Opening handles.\n * @property {Handles} exit\n *   Closing handles.\n * @property {Array<Transform>} transforms\n *   Tree transforms.\n *\n * @typedef {Partial<Config>} Extension\n *   Change how markdown tokens from micromark are turned into mdast.\n *\n * @typedef CompileContext\n *   mdast compiler context.\n * @property {Array<Node | Fragment>} stack\n *   Stack of nodes.\n * @property {Array<TokenTuple>} tokenStack\n *   Stack of tokens.\n * @property {<Key extends keyof CompileData>(key: Key) => CompileData[Key]} getData\n *   Get data from the key/value store.\n * @property {<Key extends keyof CompileData>(key: Key, value?: CompileData[Key]) => void} setData\n *   Set data into the key/value store.\n * @property {(this: CompileContext) => void} buffer\n *   Capture some of the output data.\n * @property {(this: CompileContext) => string} resume\n *   Stop capturing and access the output data.\n * @property {<Kind extends Node>(this: CompileContext, node: Kind, token: Token, onError?: OnEnterError) => Kind} enter\n *   Enter a token.\n * @property {(this: CompileContext, token: Token, onError?: OnExitError) => Node} exit\n *   Exit a token.\n * @property {TokenizeContext['sliceSerialize']} sliceSerialize\n *   Get the string value of a token.\n * @property {Config} config\n *   Configuration.\n *\n * @typedef FromMarkdownOptions\n *   Configuration for how to build mdast.\n * @property {Array<Extension | Array<Extension>> | null | undefined} [mdastExtensions]\n *   Extensions for this utility to change how tokens are turned into a tree.\n *\n * @typedef {ParseOptions & FromMarkdownOptions} Options\n *   Configuration.\n */\n\n// To do: micromark: create a registry of tokens?\n// To do: next major: don’t return given `Node` from `enter`.\n// To do: next major: remove setter/getter.\n\nimport {toString} from 'mdast-util-to-string'\nimport {parse} from 'micromark/lib/parse.js'\nimport {preprocess} from 'micromark/lib/preprocess.js'\nimport {postprocess} from 'micromark/lib/postprocess.js'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\nconst own = {}.hasOwnProperty\n\n/**\n * @param value\n *   Markdown to parse.\n * @param encoding\n *   Character encoding for when `value` is `Buffer`.\n * @param options\n *   Configuration.\n * @returns\n *   mdast tree.\n */\nexport const fromMarkdown =\n  /**\n   * @type {(\n   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &\n   *   ((value: Value, options?: Options | null | undefined) => Root)\n   * )}\n   */\n\n  /**\n   * @param {Value} value\n   * @param {Encoding | Options | null | undefined} [encoding]\n   * @param {Options | null | undefined} [options]\n   * @returns {Root}\n   */\n  function (value, encoding, options) {\n    if (typeof encoding !== 'string') {\n      options = encoding\n      encoding = undefined\n    }\n    return compiler(options)(\n      postprocess(\n        parse(options).document().write(preprocess()(value, encoding, true))\n      )\n    )\n  }\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    }\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      setData,\n      getData\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === 'listOrdered' ||\n        events[index][1].type === 'listUnordered'\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n    index = -1\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {\n              sliceSerialize: events[index][2].sliceSerialize\n            },\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0\n          ? events[0][1].start\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {\n              line: 1,\n              column: 1,\n              offset: 0\n            }\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n    while (++index <= length) {\n      const event = events[index]\n      if (\n        event[1].type === 'listUnordered' ||\n        event[1].type === 'listOrdered' ||\n        event[1].type === 'blockQuote'\n      ) {\n        if (event[0] === 'enter') {\n          containerBalance++\n        } else {\n          containerBalance--\n        }\n        atMarker = undefined\n      } else if (event[1].type === 'lineEndingBlank') {\n        if (event[0] === 'enter') {\n          if (\n            listItem &&\n            !atMarker &&\n            !containerBalance &&\n            !firstBlankLineIndex\n          ) {\n            firstBlankLineIndex = index\n          }\n          atMarker = undefined\n        }\n      } else if (\n        event[1].type === 'linePrefix' ||\n        event[1].type === 'listItemValue' ||\n        event[1].type === 'listItemMarker' ||\n        event[1].type === 'listItemPrefix' ||\n        event[1].type === 'listItemPrefixWhitespace'\n      ) {\n        // Empty.\n      } else {\n        atMarker = undefined\n      }\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === 'listItemPrefix') ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === 'listUnordered' ||\n            event[1].type === 'listOrdered'))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n            if (\n              tailEvent[1].type === 'lineEnding' ||\n              tailEvent[1].type === 'lineEndingBlank'\n            ) {\n              if (tailEvent[0] === 'exit') continue\n              if (lineIndex) {\n                events[lineIndex][1].type = 'lineEndingBlank'\n                listSpread = true\n              }\n              tailEvent[1].type = 'lineEnding'\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === 'linePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefix' ||\n              tailEvent[1].type === 'blockQuotePrefixWhitespace' ||\n              tailEvent[1].type === 'blockQuoteMarker' ||\n              tailEvent[1].type === 'listItemIndent'\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === 'listItemPrefix') {\n          listItem = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          // @ts-expect-error: `listItem` is most definitely defined, TS...\n          events.splice(index, 0, ['enter', listItem, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Set data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @param {CompileData[Key]} [value]\n   *   New value.\n   * @returns {void}\n   *   Nothing.\n   */\n  function setData(key, value) {\n    data[key] = value\n  }\n\n  /**\n   * Get data.\n   *\n   * @template {keyof CompileData} Key\n   *   Field type.\n   * @param {Key} key\n   *   Key of field.\n   * @returns {CompileData[Key]}\n   *   Value.\n   */\n  function getData(key) {\n    return data[key]\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Node} create\n   *   Create a node.\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {void}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    })\n  }\n\n  /**\n   * @template {Node} Kind\n   *   Node type.\n   * @this {CompileContext}\n   *   Context.\n   * @param {Kind} node\n   *   Node to enter.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnEnterError | undefined} [errorHandler]\n   *   Handle the case where this token is open, but it is closed by something else.\n   * @returns {Kind}\n   *   The given node.\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    // @ts-expect-error: Assume `Node` can exist as a child of `parent`.\n    parent.children.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler])\n    // @ts-expect-error: `end` will be patched later.\n    node.position = {\n      start: point(token.start)\n    }\n    return node\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {void}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   *   Context.\n   * @param {Token} token\n   *   Corresponding token.\n   * @param {OnExitError | undefined} [onExitError]\n   *   Handle the case where another token is open.\n   * @returns {Node}\n   *   The closed node.\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    const open = this.tokenStack.pop()\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({\n            start: token.start,\n            end: token.end\n          }) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n    node.position.end = point(token.end)\n    return node\n  }\n\n  /**\n   * @this {CompileContext}\n   * @returns {string}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    setData('expectingFirstListItemValue', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (getData('expectingFirstListItemValue')) {\n      const ancestor = this.stack[this.stack.length - 2]\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10)\n      setData('expectingFirstListItemValue')\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (getData('flowCodeInside')) return\n    this.buffer()\n    setData('flowCodeInside', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    setData('flowCodeInside')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    setData('setextHeadingSlurpLineEnding', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    setData('setextHeadingSlurpLineEnding')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    let tail = node.children[node.children.length - 1]\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      // @ts-expect-error: we’ll add `end` later.\n      tail.position = {\n        start: point(token.start)\n      }\n      // @ts-expect-error: Assume `parent` accepts `text`.\n      node.children.push(tail)\n    }\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    // If we’re at a hard break, include the line ending in there.\n    if (getData('atHardBreak')) {\n      const tail = context.children[context.children.length - 1]\n      tail.position.end = point(token.end)\n      setData('atHardBreak')\n      return\n    }\n    if (\n      !getData('setextHeadingSlurpLineEnding') &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    setData('atHardBreak', true)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n    // To do: clean.\n    if (getData('inReference')) {\n      /** @type {ReferenceType} */\n      const referenceType = getData('referenceType') || 'shortcut'\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n    setData('referenceType')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // Assume a reference.\n    setData('inReference', true)\n    if (node.type === 'link') {\n      /** @type {Array<StaticPhrasingContent>} */\n      // @ts-expect-error: Assume static phrasing content.\n      const children = fragment.children\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    setData('inReference')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    setData('referenceType', 'collapsed')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    setData('referenceType', 'full')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    setData('characterReferenceType', token.type)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = getData('characterReferenceType')\n    /** @type {string} */\n    let value\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === 'characterReferenceMarkerNumeric' ? 10 : 16\n      )\n      setData('characterReferenceType')\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      value = result\n    }\n    const tail = this.stack.pop()\n    tail.value += value\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    }\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    }\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    }\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    }\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    // @ts-expect-error `depth` will be set later.\n    return {\n      type: 'heading',\n      depth: undefined,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    }\n  }\n\n  /** @returns {HTML} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    }\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    }\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    }\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    }\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    }\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    }\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Extension | Array<Extension>>} extensions\n * @returns {void}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n  while (++index < extensions.length) {\n    const value = extensions[index]\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {void}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      if (key === 'canContainEols') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'transforms') {\n        const right = extension[key]\n        if (right) {\n          combined[key].push(...right)\n        }\n      } else if (key === 'enter' || key === 'exit') {\n        const right = extension[key]\n        if (right) {\n          Object.assign(combined[key], right)\n        }\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({\n          start: left.start,\n          end: left.end\n        }) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({\n          start: right.start,\n          end: right.end\n        }) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n * @returns {Array<Event>}\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * @this {import('unified').Processor}\n * @type {import('unified').Plugin<[Options?] | void[], string, Root>}\n */\nexport default function remarkParse(options) {\n  /** @type {import('unified').ParserFunction<Root>} */\n  const parser = (doc) => {\n    // Assume options.\n    const settings = /** @type {Options} */ (this.data('settings'))\n\n    return fromMarkdown(\n      doc,\n      Object.assign({}, settings, options, {\n        // Note: these options are not in the readme.\n        // The goal is for them to be set by plugins on `data` instead of being\n        // passed by users.\n        extensions: this.data('micromarkExtensions') || [],\n        mdastExtensions: this.data('fromMarkdownExtensions') || []\n      })\n    )\n  }\n\n  Object.assign(this, {Parser: parser})\n}\n","/**\n * @typedef {import('unist').Node} Node\n */\n\n/**\n * @typedef {Array<Node> | string} ChildrenOrValue\n *   List to use as `children` or value to use as `value`.\n *\n * @typedef {Record<string, unknown>} Props\n *   Other fields to add to the node.\n */\n\n/**\n * Build a node.\n *\n * @param type\n *   Node type.\n * @param props\n *   Fields assigned to node.\n * @param value\n *   Children of node or value of `node` (cast to string).\n * @returns\n *   Built node.\n */\nexport const u =\n  /**\n   * @type {(\n   *   (<T extends string>(type: T) => {type: T}) &\n   *   (<T extends string, P extends Props>(type: T, props: P) => {type: T} & P) &\n   *   (<T extends string>(type: T, value: string) => {type: T, value: string}) &\n   *   (<T extends string, P extends Props>(type: T, props: P, value: string) => {type: T, value: string} & P) &\n   *   (<T extends string, C extends Array<Node>>(type: T, children: C) => {type: T, children: C}) &\n   *   (<T extends string, P extends Props, C extends Array<Node>>(type: T, props: P, children: C) => {type: T, children: C} & P)\n   * )}\n   */\n  (\n    /**\n     * @param {string} type\n     * @param {Props | ChildrenOrValue | null | undefined} [props]\n     * @param {ChildrenOrValue | null | undefined} [value]\n     * @returns {Node}\n     */\n    function (type, props, value) {\n      /** @type {Node} */\n      const node = {type: String(type)}\n\n      if (\n        (value === undefined || value === null) &&\n        (typeof props === 'string' || Array.isArray(props))\n      ) {\n        value = props\n      } else {\n        Object.assign(node, props)\n      }\n\n      if (Array.isArray(value)) {\n        // @ts-expect-error: create a parent.\n        node.children = value\n      } else if (value !== undefined && value !== null) {\n        // @ts-expect-error: create a literal.\n        node.value = String(value)\n      }\n\n      return node\n    }\n  )\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @typedef {Record<string, unknown>} Props\n * @typedef {null | undefined | string | Props | TestFunctionAnything | Array<string | Props | TestFunctionAnything>} Test\n *   Check for an arbitrary node, unaware of TypeScript inferral.\n *\n * @callback TestFunctionAnything\n *   Check if a node passes a test, unaware of TypeScript inferral.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | void}\n *   Whether this node passes the test.\n */\n\n/**\n * @template {Node} Kind\n *   Node type.\n * @typedef {Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind> | Array<Kind['type'] | Partial<Kind> | TestFunctionPredicate<Kind>>} PredicateTest\n *   Check for a node that can be inferred by TypeScript.\n */\n\n/**\n * Check if a node passes a certain test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback TestFunctionPredicate\n *   Complex test function for a node that can be inferred by TypeScript.\n * @param {Node} node\n *   A node.\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this node passes the test.\n */\n\n/**\n * @callback AssertAnything\n *   Check that an arbitrary value is a node, unaware of TypeScript inferral.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if a node is a node and passes a certain node test.\n *\n * @template {Node} Kind\n *   Node type.\n * @callback AssertPredicate\n *   Check that an arbitrary value is a specific node, aware of TypeScript.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {node is Kind}\n *   Whether this is a node and passes a test.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @param test\n *   A check for a specific node.\n * @param index\n *   The node’s position in its parent.\n * @param parent\n *   The node’s parent.\n * @returns\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  /**\n   * @type {(\n   *   (() => false) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index: number, parent: Parent, context?: unknown) => node is Kind) &\n   *   (<Kind extends Node = Node>(node: unknown, test: PredicateTest<Kind>, index?: null | undefined, parent?: null | undefined, context?: unknown) => node is Kind) &\n   *   ((node: unknown, test: Test, index: number, parent: Parent, context?: unknown) => boolean) &\n   *   ((node: unknown, test?: Test, index?: null | undefined, parent?: null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function is(node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      // @ts-expect-error Looks like a node.\n      return node && node.type && typeof node.type === 'string'\n        ? Boolean(check.call(context, node, index, parent))\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns\n *   An assertion.\n */\nexport const convert =\n  /**\n   * @type {(\n   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &\n   *   ((test?: Test) => AssertAnything)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {AssertAnything}\n     */\n    function (test) {\n      if (test === undefined || test === null) {\n        return ok\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<string | Props | TestFunctionAnything>} tests\n * @returns {AssertAnything}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<AssertAnything>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].call(this, ...parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {AssertAnything}\n */\nfunction propsFactory(check) {\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      // @ts-expect-error: hush, it sure works as an index.\n      if (node[key] !== check[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {AssertAnything}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunctionAnything} check\n * @returns {AssertAnything}\n */\nfunction castFactory(check) {\n  return assertion\n\n  /**\n   * @this {unknown}\n   * @param {unknown} node\n   * @param {Array<unknown>} parameters\n   * @returns {boolean}\n   */\n  function assertion(node, ...parameters) {\n    return Boolean(\n      node &&\n        typeof node === 'object' &&\n        'type' in node &&\n        // @ts-expect-error: fine.\n        Boolean(check.call(this, node, ...parameters))\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n */\n\n/**\n * @typedef {boolean | 'skip'} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<Ancestor>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   Tree type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {Visitor<import('./complex-types.js').Matches<import('./complex-types.js').InclusiveDescendant<Tree>, Check>, Extract<import('./complex-types.js').InclusiveDescendant<Tree>, Parent>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from './color.js'\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visitParents =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor<Node>} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        // @ts-expect-error no visitor given, so `visitor` is test.\n        visitor = test\n        test = null\n      }\n\n      const is = convert(test)\n      const step = reverse ? -1 : 1\n\n      factory(tree, undefined, [])()\n\n      /**\n       * @param {Node} node\n       * @param {number | undefined} index\n       * @param {Array<Parent>} parents\n       */\n      function factory(node, index, parents) {\n        /** @type {Record<string, unknown>} */\n        // @ts-expect-error: hush\n        const value = node && typeof node === 'object' ? node : {}\n\n        if (typeof value.type === 'string') {\n          const name =\n            // `hast`\n            typeof value.tagName === 'string'\n              ? value.tagName\n              : // `xast`\n              typeof value.name === 'string'\n              ? value.name\n              : undefined\n\n          Object.defineProperty(visit, 'name', {\n            value:\n              'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n          })\n        }\n\n        return visit\n\n        function visit() {\n          /** @type {ActionTuple} */\n          let result = []\n          /** @type {ActionTuple} */\n          let subresult\n          /** @type {number} */\n          let offset\n          /** @type {Array<Parent>} */\n          let grandparents\n\n          if (!test || is(node, index, parents[parents.length - 1] || null)) {\n            result = toResult(visitor(node, parents))\n\n            if (result[0] === EXIT) {\n              return result\n            }\n          }\n\n          // @ts-expect-error looks like a parent.\n          if (node.children && result[0] !== SKIP) {\n            // @ts-expect-error looks like a parent.\n            offset = (reverse ? node.children.length : -1) + step\n            // @ts-expect-error looks like a parent.\n            grandparents = parents.concat(node)\n\n            // @ts-expect-error looks like a parent.\n            while (offset > -1 && offset < node.children.length) {\n              // @ts-expect-error looks like a parent.\n              subresult = factory(node.children[offset], offset, grandparents)()\n\n              if (subresult[0] === EXIT) {\n                return subresult\n              }\n\n              offset =\n                typeof subresult[1] === 'number' ? subresult[1] : offset + step\n            }\n          }\n\n          return result\n        }\n      }\n    }\n  )\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {ActionTuple}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n * @typedef {import('unist-util-is').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * Check if `Child` can be a child of `Ancestor`.\n *\n * Returns the ancestor when `Child` can be a child of `Ancestor`, or returns\n * `never`.\n *\n * @template {Node} Ancestor\n *   Node type.\n * @template {Node} Child\n *   Node type.\n * @typedef {(\n *   Ancestor extends Parent\n *     ? Child extends Ancestor['children'][number]\n *       ? Ancestor\n *       : never\n *     : never\n * )} ParentsOf\n */\n\n/**\n * @template {Node} [Visited=Node]\n *   Visited node type.\n * @template {Parent} [Ancestor=Parent]\n *   Ancestor type.\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends Node ? number | null : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends Node ? Ancestor | null : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n */\n\n/**\n * Build a typed `Visitor` function from a node and all possible parents.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Visited\n *   Node type.\n * @template {Parent} Ancestor\n *   Parent type.\n * @typedef {Visitor<Visited, ParentsOf<Ancestor, Visited>>} BuildVisitorFromMatch\n */\n\n/**\n * Build a typed `Visitor` function from a list of descendants and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     import('unist-util-visit-parents/complex-types.js').Matches<Descendant, Check>,\n *     Extract<Descendant, Parent>\n *   >\n * )} BuildVisitorFromDescendants\n */\n\n/**\n * Build a typed `Visitor` function from a tree and a test.\n *\n * It will infer which values are passed as `node` and which as `parent`.\n *\n * @template {Node} [Tree=Node]\n *   Node type.\n * @template {Test} [Check=string]\n *   Test type.\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     import('unist-util-visit-parents/complex-types.js').InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @param tree\n *   Tree to traverse.\n * @param test\n *   `unist-util-is`-compatible test\n * @param visitor\n *   Handle each node.\n * @param reverse\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns\n *   Nothing.\n */\nexport const visit =\n  /**\n   * @type {(\n   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &\n   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)\n   * )}\n   */\n  (\n    /**\n     * @param {Node} tree\n     * @param {Test} test\n     * @param {Visitor} visitor\n     * @param {boolean | null | undefined} [reverse]\n     * @returns {void}\n     */\n    function (tree, test, visitor, reverse) {\n      if (typeof test === 'function' && typeof visitor !== 'function') {\n        reverse = visitor\n        visitor = test\n        test = null\n      }\n\n      visitParents(tree, test, overload, reverse)\n\n      /**\n       * @param {Node} node\n       * @param {Array<Parent>} parents\n       */\n      function overload(node, parents) {\n        const parent = parents[parents.length - 1]\n        return visitor(\n          node,\n          parent ? parent.children.indexOf(node) : null,\n          parent\n        )\n      }\n    }\n  )\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n","/**\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {NodeLike | Node | null | undefined} [node]\n *   Node.\n * @returns {Position}\n *   Position.\n */\nexport function position(node) {\n  return {start: pointStart(node), end: pointEnd(node)}\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'start' | 'end'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {NodeLike | Node | null | undefined} [node]\n   * @returns {Point}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    // To do: next major: don’t return points when invalid.\n    return {\n      // @ts-expect-error: in practice, null is allowed.\n      line: point.line || null,\n      // @ts-expect-error: in practice, null is allowed.\n      column: point.column || null,\n      // @ts-expect-error: in practice, null is allowed.\n      offset: point.offset > -1 ? point.offset : null\n    }\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').Definition} Definition\n */\n\n/**\n * @typedef {Root | Content} Node\n *\n * @callback GetDefinition\n *   Get a definition by identifier.\n * @param {string | null | undefined} [identifier]\n *   Identifier of definition.\n * @returns {Definition | null}\n *   Definition corresponding to `identifier` or `null`.\n */\n\nimport {visit} from 'unist-util-visit'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find definitions in `tree`.\n *\n * Uses CommonMark precedence, which means that earlier definitions are\n * preferred over duplicate later definitions.\n *\n * @param {Node} tree\n *   Tree to check.\n * @returns {GetDefinition}\n *   Getter.\n */\nexport function definitions(tree) {\n  /** @type {Record<string, Definition>} */\n  const cache = Object.create(null)\n\n  if (!tree || !tree.type) {\n    throw new Error('mdast-util-definitions expected node')\n  }\n\n  visit(tree, 'definition', (definition) => {\n    const id = clean(definition.identifier)\n    if (id && !own.call(cache, id)) {\n      cache[id] = definition\n    }\n  })\n\n  return definition\n\n  /** @type {GetDefinition} */\n  function definition(identifier) {\n    const id = clean(identifier)\n    // To do: next major: return `undefined` when not found.\n    return id && own.call(cache, id) ? cache[id] : null\n  }\n}\n\n/**\n * @param {string | null | undefined} [value]\n * @returns {string}\n */\nfunction clean(value) {\n  return String(value || '').toUpperCase()\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('./index.js').H} H\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Transform an unknown node.\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction unknown(h, node) {\n  const data = node.data || {}\n\n  if (\n    'value' in node &&\n    !(\n      own.call(data, 'hName') ||\n      own.call(data, 'hProperties') ||\n      own.call(data, 'hChildren')\n    )\n  ) {\n    return h.augment(node, u('text', node.value))\n  }\n\n  return h(node, 'div', all(h, node))\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nexport function one(h, node, parent) {\n  const type = node && node.type\n  /** @type {Handler} */\n  let fn\n\n  // Fail on non-nodes.\n  if (!type) {\n    throw new Error('Expected node, got `' + node + '`')\n  }\n\n  if (own.call(h.handlers, type)) {\n    fn = h.handlers[type]\n  } else if (h.passThrough && h.passThrough.includes(type)) {\n    fn = returnNode\n  } else {\n    fn = h.unknownHandler\n  }\n\n  return (typeof fn === 'function' ? fn : unknown)(h, node, parent)\n}\n\n/**\n * @type {Handler}\n * @param {MdastNode} node\n */\nfunction returnNode(h, node) {\n  // @ts-expect-error: Pass through custom node.\n  return 'children' in node ? {...node, children: all(h, node)} : node\n}\n\n/**\n * @param {H} h\n * @param {MdastNode} parent\n */\nexport function all(h, parent) {\n  /** @type {Array.<Content>} */\n  const values = []\n\n  if ('children' in parent) {\n    const nodes = parent.children\n    let index = -1\n\n    while (++index < nodes.length) {\n      const result = one(h, nodes[index], parent)\n\n      if (result) {\n        if (index && nodes[index - 1].type === 'break') {\n          if (!Array.isArray(result) && result.type === 'text') {\n            result.value = result.value.replace(/^\\s+/, '')\n          }\n\n          if (!Array.isArray(result) && result.type === 'element') {\n            const head = result.children[0]\n\n            if (head && head.type === 'text') {\n              head.value = head.value.replace(/^\\s+/, '')\n            }\n          }\n        }\n\n        if (Array.isArray(result)) {\n          values.push(...result)\n        } else {\n          values.push(result)\n        }\n      }\n    }\n  }\n\n  return values\n}\n","/**\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n */\n\n/**\n * @type {Handler}\n * @param {ThematicBreak} [node]\n * @returns {Element}\n */\nexport function thematicBreak(h, node) {\n  return h(node, 'hr')\n}\n","/**\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Wrap `nodes` with line feeds between each entry.\n * Optionally adds line feeds at the start and end.\n *\n * @param {Array.<Content>} nodes\n * @param {boolean} [loose=false]\n * @returns {Array.<Content>}\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array.<Content>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push(u('text', '\\n'))\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push(u('text', '\\n'))\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push(u('text', '\\n'))\n  }\n\n  return result\n}\n","/**\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {List} node\n * @returns {Element}\n */\nexport function list(h, node) {\n  /** @type {Properties} */\n  const props = {}\n  const name = node.ordered ? 'ol' : 'ul'\n  const items = all(h, node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    props.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < items.length) {\n    const item = items[index]\n\n    if (\n      item.type === 'element' &&\n      item.tagName === 'li' &&\n      item.properties &&\n      Array.isArray(item.properties.className) &&\n      item.properties.className.includes('task-list-item')\n    ) {\n      props.className = ['contains-task-list']\n      break\n    }\n  }\n\n  return h(node, name, props, wrap(items, true))\n}\n","/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {FootnoteReference} node\n */\nexport function footnoteReference(h, node) {\n  const footnoteOrder = h.footnoteOrder\n  const identifier = String(node.identifier)\n  const index = footnoteOrder.indexOf(identifier)\n  const marker = String(\n    index === -1 ? footnoteOrder.push(identifier) : index + 1\n  )\n\n  return h(\n    node,\n    'a',\n    {\n      href: '#fn' + marker,\n      className: ['footnote-ref'],\n      id: 'fnref' + marker,\n      role: 'doc-noteref'\n    },\n    [h(node.position, 'sup', [u('text', marker)])]\n  )\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('./index.js').Handler} Handler\n * @typedef {import('./index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from './traverse.js'\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @type {Handler}\n * @param {ImageReference|LinkReference} node\n * @returns {Content|Array.<Content>}\n */\nexport function revert(h, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return u('text', '![' + node.alt + suffix)\n  }\n\n  const contents = all(h, node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift(u('text', '['))\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push(u('text', suffix))\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').List} List\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {ListItem} node\n * @param {List} parent\n */\nexport function listItem(h, node, parent) {\n  const result = all(h, node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const props = {}\n  /** @type {Array.<Content>} */\n  const wrapped = []\n\n  if (typeof node.checked === 'boolean') {\n    /** @type {Element} */\n    let paragraph\n\n    if (\n      result[0] &&\n      result[0].type === 'element' &&\n      result[0].tagName === 'p'\n    ) {\n      paragraph = result[0]\n    } else {\n      paragraph = h(null, 'p', [])\n      result.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift(u('text', ' '))\n    }\n\n    paragraph.children.unshift(\n      h(null, 'input', {\n        type: 'checkbox',\n        checked: node.checked,\n        disabled: true\n      })\n    )\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    props.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < result.length) {\n    const child = result[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      wrapped.push(u('text', '\\n'))\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      wrapped.push(...child.children)\n    } else {\n      wrapped.push(child)\n    }\n  }\n\n  const tail = result[result.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || !('tagName' in tail) || tail.tagName !== 'p')) {\n    wrapped.push(u('text', '\\n'))\n  }\n\n  return h(node, 'li', props, wrapped)\n}\n\n/**\n * @param {List} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = node.spread\n  const children = node.children\n  let index = -1\n\n  while (!loose && ++index < children.length) {\n    loose = listItemLoose(children[index])\n  }\n\n  return Boolean(loose)\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === undefined || spread === null\n    ? node.children.length > 1\n    : spread\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {footnote} from './footnote.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  footnote,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  root,\n  strong,\n  table,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return null\n}\n","/**\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Blockquote} node\n */\nexport function blockquote(h, node) {\n  return h(node, 'blockquote', wrap(all(h, node), true))\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Break} node\n * @returns {Array<Element|Text>}\n */\nexport function hardBreak(h, node) {\n  return [h(node, 'br'), u('text', '\\n')]\n}\n","/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Code} node\n */\nexport function code(h, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  // To do: next major, use `node.lang` w/o regex, the splitting’s been going\n  // on for years in remark now.\n  const lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/)\n  /** @type {Properties} */\n  const props = {}\n\n  if (lang) {\n    props.className = ['language-' + lang]\n  }\n\n  const code = h(node, 'code', props, [u('text', value)])\n\n  if (node.meta) {\n    code.data = {meta: node.meta}\n  }\n\n  return h(node.position, 'pre', [code])\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Delete} node\n */\nexport function strikethrough(h, node) {\n  return h(node, 'del', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Emphasis} node\n */\nexport function emphasis(h, node) {\n  return h(node, 'em', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Footnote} Footnote\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {footnoteReference} from './footnote-reference.js'\n\n/**\n * @type {Handler}\n * @param {Footnote} node\n */\nexport function footnote(h, node) {\n  const footnoteById = h.footnoteById\n  const footnoteOrder = h.footnoteOrder\n  let no = 1\n\n  while (no in footnoteById) no++\n\n  const identifier = String(no)\n\n  // No need to check if `identifier` exists in `footnoteOrder`, it’s guaranteed\n  // to not exist because we just generated it.\n  footnoteOrder.push(identifier)\n\n  footnoteById[identifier] = {\n    type: 'footnoteDefinition',\n    identifier,\n    children: [{type: 'paragraph', children: node.children}],\n    position: node.position\n  }\n\n  return footnoteReference(h, {\n    type: 'footnoteReference',\n    identifier,\n    position: node.position\n  })\n}\n","/**\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Heading} node\n */\nexport function heading(h, node) {\n  return h(node, 'h' + node.depth, all(h, node))\n}\n","/**\n * @typedef {import('mdast').HTML} HTML\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * Return either a `raw` node in dangerous mode, otherwise nothing.\n *\n * @type {Handler}\n * @param {HTML} node\n */\nexport function html(h, node) {\n  return h.dangerous ? h.augment(node, u('raw', node.value)) : null\n}\n","/**\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {revert} from '../revert.js'\n\n/**\n * @type {Handler}\n * @param {ImageReference} node\n */\nexport function imageReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {src: normalize(def.url || ''), alt: node.alt}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').Image} Image\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\n\n/**\n * @type {Handler}\n * @param {Image} node\n */\nexport function image(h, node) {\n  /** @type {Properties} */\n  const props = {src: normalize(node.url), alt: node.alt}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'img', props)\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {InlineCode} node\n */\nexport function inlineCode(h, node) {\n  return h(node, 'code', [u('text', node.value.replace(/\\r?\\n|\\r/g, ' '))])\n}\n","/**\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {revert} from '../revert.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {LinkReference} node\n */\nexport function linkReference(h, node) {\n  const def = h.definition(node.identifier)\n\n  if (!def) {\n    return revert(h, node)\n  }\n\n  /** @type {Properties} */\n  const props = {href: normalize(def.url || '')}\n\n  if (def.title !== null && def.title !== undefined) {\n    props.title = def.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Link} Link\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport normalize from 'mdurl/encode.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Link} node\n */\nexport function link(h, node) {\n  /** @type {Properties} */\n  const props = {href: normalize(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    props.title = node.title\n  }\n\n  return h(node, 'a', props, all(h, node))\n}\n","/**\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Paragraph} node\n */\nexport function paragraph(h, node) {\n  return h(node, 'p', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\nimport {all} from '../traverse.js'\nimport {wrap} from '../wrap.js'\n\n/**\n * @type {Handler}\n * @param {Root} node\n */\nexport function root(h, node) {\n  // @ts-expect-error `root`s are also fine.\n  return h.augment(node, u('root', wrap(all(h, node))))\n}\n","/**\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Strong} node\n */\nexport function strong(h, node) {\n  return h(node, 'strong', all(h, node))\n}\n","/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').Handler} Handler\n * @typedef {import('../index.js').Content} Content\n */\n\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {wrap} from '../wrap.js'\nimport {all} from '../traverse.js'\n\n/**\n * @type {Handler}\n * @param {Table} node\n */\nexport function table(h, node) {\n  const rows = node.children\n  let index = -1\n  const align = node.align || []\n  /** @type {Array.<Element>} */\n  const result = []\n\n  while (++index < rows.length) {\n    const row = rows[index].children\n    const name = index === 0 ? 'th' : 'td'\n    let pos = node.align ? align.length : row.length\n    /** @type {Array.<Content>} */\n    const out = []\n\n    while (pos--) {\n      const cell = row[pos]\n      out[pos] = h(cell, name, {align: align[pos]}, cell ? all(h, cell) : [])\n    }\n\n    result[index] = h(rows[index], 'tr', wrap(out, true))\n  }\n\n  return h(\n    node,\n    'table',\n    wrap(\n      [h(result[0].position, 'thead', wrap([result[0]], true))].concat(\n        result[1]\n          ? h(\n              {\n                start: pointStart(result[1]),\n                end: pointEnd(result[result.length - 1])\n              },\n              'tbody',\n              wrap(result.slice(1), true)\n            )\n          : []\n      ),\n      true\n    )\n  )\n}\n","/**\n * @typedef {import('mdast').Text} Text\n * @typedef {import('../index.js').Handler} Handler\n */\n\nimport {u} from 'unist-builder'\n\n/**\n * @type {Handler}\n * @param {Text} node\n */\nexport function text(h, node) {\n  return h.augment(\n    node,\n    u('text', String(node.value).replace(/[ \\t]*(\\r?\\n|\\r)[ \\t]*/g, '$1'))\n  )\n}\n","/**\n * @typedef {import('mdast').Root|import('mdast').Parent['children'][number]} MdastNode\n * @typedef {import('hast').Root|import('hast').Parent['children'][number]} HastNode\n * @typedef {import('mdast').Parent} Parent\n * @typedef {import('mdast').Definition} Definition\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').ElementContent} Content\n * @typedef {import('unist-util-position').PositionLike} PositionLike\n *\n * @typedef EmbeddedHastFields\n * @property {string} [hName] Defines the tag name of an element\n * @property {Properties} [hProperties] Defines the properties of an element\n * @property {Array.<Content>} [hChildren] Defines the (hast) children of an element\n *\n * @typedef {Object.<string, unknown> & EmbeddedHastFields} Data unist data with embedded hast fields\n *\n * @typedef {MdastNode & {data?: Data}} NodeWithData unist node with embedded hast data\n *\n * @callback Handler\n * @param {H} h Handle context\n * @param {any} node mdast node to handle\n * @param {Parent|null} parent Parent of `node`\n * @returns {Content|Array.<Content>|null|undefined} hast node\n *\n * @callback HFunctionProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Properties} props Properties\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @callback HFunctionNoProps\n * @param {MdastNode|PositionLike|null|undefined} node mdast node or unist position\n * @param {string} tagName HTML tag name\n * @param {Array.<Content>?} [children] hast content\n * @returns {Element}\n *\n * @typedef HFields\n * @property {boolean} dangerous Whether HTML is allowed\n * @property {(identifier: string) => Definition|null} definition Definition cache\n * @property {Object.<string, FootnoteDefinition>} footnoteById Footnote cache\n * @property {Array.<string>} footnoteOrder Order in which footnotes occur\n * @property {Handlers} handlers Applied handlers\n * @property {Handler} unknownHandler Handler for any none not in `passThrough` or otherwise handled\n * @property {(left: NodeWithData|PositionLike|null|undefined, right: Content) => Content} augment Like `h` but lower-level and usable on non-elements.\n * @property {Array.<string>} passThrough List of node types to pass through untouched (except for their children).\n *\n * @typedef Options\n * @property {boolean} [allowDangerousHtml=false] Whether to allow `html` nodes and inject them as `raw` HTML\n * @property {Handlers} [handlers] Object mapping mdast nodes to functions handling them\n * @property {Array.<string>} [passThrough] List of custom mdast node types to pass through (keep) in hast\n * @property {Handler} [unknownHandler] Handler for all unknown nodes.\n *\n * @typedef {Record.<string, Handler>} Handlers Map of node types to handlers\n * @typedef {HFunctionProps & HFunctionNoProps & HFields} H Handle context\n */\n\nimport {u} from 'unist-builder'\nimport {visit} from 'unist-util-visit'\nimport {pointStart, pointEnd} from 'unist-util-position'\nimport {generated} from 'unist-util-generated'\nimport {definitions} from 'mdast-util-definitions'\nimport {one} from './traverse.js'\nimport {footer} from './footer.js'\nimport {handlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to transform.\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {H} `h` function\n */\nfunction factory(tree, options) {\n  const settings = options || {}\n  const dangerous = settings.allowDangerousHtml || false\n  /** @type {Object.<string, FootnoteDefinition>} */\n  const footnoteById = {}\n\n  h.dangerous = dangerous\n  h.definition = definitions(tree)\n  h.footnoteById = footnoteById\n  /** @type {Array.<string>} */\n  h.footnoteOrder = []\n  h.augment = augment\n  h.handlers = {...handlers, ...settings.handlers}\n  h.unknownHandler = settings.unknownHandler\n  h.passThrough = settings.passThrough\n\n  visit(tree, 'footnoteDefinition', (definition) => {\n    const id = String(definition.identifier).toUpperCase()\n\n    // Mimick CM behavior of link definitions.\n    // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.\n    if (!own.call(footnoteById, id)) {\n      footnoteById[id] = definition\n    }\n  })\n\n  // @ts-expect-error Hush, it’s fine!\n  return h\n\n  /**\n   * Finalise the created `right`, a hast node, from `left`, an mdast node.\n   * @param {(NodeWithData|PositionLike)?} left\n   * @param {Content} right\n   * @returns {Content}\n   */\n  function augment(left, right) {\n    // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n    if (left && 'data' in left && left.data) {\n      /** @type {Data} */\n      const data = left.data\n\n      if (data.hName) {\n        if (right.type !== 'element') {\n          right = {\n            type: 'element',\n            tagName: '',\n            properties: {},\n            children: []\n          }\n        }\n\n        right.tagName = data.hName\n      }\n\n      if (right.type === 'element' && data.hProperties) {\n        right.properties = {...right.properties, ...data.hProperties}\n      }\n\n      if ('children' in right && right.children && data.hChildren) {\n        right.children = data.hChildren\n      }\n    }\n\n    if (left) {\n      const ctx = 'type' in left ? left : {position: left}\n\n      if (!generated(ctx)) {\n        right.position = {start: pointStart(ctx), end: pointEnd(ctx)}\n      }\n    }\n\n    return right\n  }\n\n  /**\n   * Create an element for `node`.\n   *\n   * @type {HFunctionProps}\n   */\n  function h(node, tagName, props, children) {\n    if (Array.isArray(props)) {\n      children = props\n      props = {}\n    }\n\n    // @ts-expect-error augmenting an element yields an element.\n    return augment(node, {\n      type: 'element',\n      tagName,\n      properties: props || {},\n      children: children || []\n    })\n  }\n}\n\n/**\n * Transform `tree` (an mdast node) to a hast node.\n *\n * @param {MdastNode} tree mdast node\n * @param {Options} [options] Configuration\n * @returns {HastNode|null|undefined} hast node\n */\nexport function toHast(tree, options) {\n  const h = factory(tree, options)\n  const node = one(h, tree, null)\n  const foot = footer(h)\n\n  if (foot) {\n    // @ts-expect-error If there’s a footer, there were definitions, meaning block\n    // content.\n    // So assume `node` is a parent node.\n    node.children.push(u('text', '\\n'), foot)\n  }\n\n  return Array.isArray(node) ? {type: 'root', children: node} : node\n}\n","/**\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef NodeLike\n * @property {PositionLike | null | undefined} [position]\n */\n\n/**\n * Check if `node` is generated.\n *\n * @param {NodeLike | null | undefined} [node]\n *   Node to check.\n * @returns {boolean}\n *   Whether `node` is generated (does not have positional info).\n */\nexport function generated(node) {\n  return (\n    !node ||\n    !node.position ||\n    !node.position.start ||\n    !node.position.start.line ||\n    !node.position.start.column ||\n    !node.position.end ||\n    !node.position.end.line ||\n    !node.position.end.column\n  )\n}\n","/**\n * @typedef {import('mdast').BlockContent} BlockContent\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast').Link} Link\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('./index.js').H} H\n */\n\nimport {thematicBreak} from './handlers/thematic-break.js'\nimport {list} from './handlers/list.js'\nimport {wrap} from './wrap.js'\n\n/**\n * @param {H} h\n */\nexport function footer(h) {\n  const footnoteById = h.footnoteById\n  const footnoteOrder = h.footnoteOrder\n  let index = -1\n  /** @type {Array.<ListItem>} */\n  const listItems = []\n\n  while (++index < footnoteOrder.length) {\n    const def = footnoteById[footnoteOrder[index].toUpperCase()]\n\n    if (!def) {\n      continue\n    }\n\n    const marker = String(index + 1)\n    const content = [...def.children]\n    /** @type {Link} */\n    const backReference = {\n      type: 'link',\n      url: '#fnref' + marker,\n      data: {hProperties: {className: ['footnote-back'], role: 'doc-backlink'}},\n      children: [{type: 'text', value: '↩'}]\n    }\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'paragraph') {\n      tail.children.push(backReference)\n    } else {\n      // @ts-expect-error Indeed, link directly added in block content.\n      // Which we do because that way at least the handlers will be called\n      // for the other HTML we’re generating (as markdown).\n      content.push(backReference)\n    }\n\n    listItems.push({\n      type: 'listItem',\n      data: {hProperties: {id: 'fn' + marker, role: 'doc-endnote'}},\n      children: content,\n      position: def.position\n    })\n  }\n\n  if (listItems.length === 0) {\n    return null\n  }\n\n  return h(\n    null,\n    'section',\n    {className: ['footnotes'], role: 'doc-endnotes'},\n    wrap(\n      [\n        thematicBreak(h),\n        list(h, {type: 'list', ordered: true, children: listItems})\n      ],\n      true\n    )\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin to bridge or mutate to rehype.\n *\n * If a destination is given, runs the destination with the new hast tree\n * (bridge-mode).\n * Without destination, returns the hast tree: further plugins run on that tree\n * (mutate-mode).\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the nlcst tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned for `toHast`.\n  return (node) => toHast(node, options)\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    capture: boolean,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","import {visit} from 'unist-util-visit'\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Element} Element\n *\n * @callback AllowElement\n * @param {Element} element\n * @param {number} index\n * @param {Element|Root} parent\n * @returns {boolean|undefined}\n *\n * @typedef Options\n * @property {Array<string>} [allowedElements]\n * @property {Array<string>} [disallowedElements=[]]\n * @property {AllowElement} [allowElement]\n * @property {boolean} [unwrapDisallowed=false]\n */\n\n/**\n * @type {import('unified').Plugin<[Options], Root>}\n */\nexport default function rehypeFilter(options) {\n  if (options.allowedElements && options.disallowedElements) {\n    throw new TypeError(\n      'Only one of `allowedElements` and `disallowedElements` should be defined'\n    )\n  }\n\n  if (\n    options.allowedElements ||\n    options.disallowedElements ||\n    options.allowElement\n  ) {\n    return (tree) => {\n      visit(tree, 'element', (node, index, parent_) => {\n        const parent = /** @type {Element|Root} */ (parent_)\n        /** @type {boolean|undefined} */\n        let remove\n\n        if (options.allowedElements) {\n          remove = !options.allowedElements.includes(node.tagName)\n        } else if (options.disallowedElements) {\n          remove = options.disallowedElements.includes(node.tagName)\n        }\n\n        if (!remove && options.allowElement && typeof index === 'number') {\n          remove = !options.allowElement(node, index, parent)\n        }\n\n        if (remove && typeof index === 'number') {\n          if (options.unwrapDisallowed && node.children) {\n            parent.children.splice(index, 1, ...node.children)\n          } else {\n            parent.children.splice(index, 1)\n          }\n\n          return index\n        }\n\n        return undefined\n      })\n    }\n  }\n}\n","const protocols = ['http', 'https', 'mailto', 'tel']\n\n/**\n * @param {string} uri\n * @returns {string}\n */\nexport function uriTransformer(uri) {\n  const url = (uri || '').trim()\n  const first = url.charAt(0)\n\n  if (first === '#' || first === '/') {\n    return url\n  }\n\n  const colon = url.indexOf(':')\n  if (colon === -1) {\n    return url\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length).toLowerCase() === protocol\n    ) {\n      return url\n    }\n  }\n\n  index = url.indexOf('?')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  index = url.indexOf('#')\n  if (index !== -1 && colon > index) {\n    return url\n  }\n\n  // eslint-disable-next-line no-script-url\n  return 'javascript:void(0)'\n}\n","/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {unknown} thing\n *   Thing to check (typically `Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`).\n *   If a node is passed it must be a `Text` node, whose `value` field is\n *   checked.\n */\nexport function whitespace(thing) {\n  /** @type {string} */\n  const value =\n    // @ts-expect-error looks like a node.\n    thing && typeof thing === 'object' && thing.type === 'text'\n      ? // @ts-expect-error looks like a text.\n        thing.value || ''\n      : thing\n\n  // HTML whitespace expression.\n  // See <https://infra.spec.whatwg.org/#ascii-whitespace>.\n  return typeof value === 'string' && value.replace(/[ \\t\\n\\f\\r]/g, '') === ''\n}\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * `hast` is close to `React`, but differs in a couple of cases.\n *\n * To get a React property from a hast property, check if it is in\n * `hastToReact`, if it is, then use the corresponding value,\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @template T\n * @typedef {import('react').ComponentType<T>} ComponentType<T>\n */\n\n/**\n * @template T\n * @typedef {import('react').ComponentPropsWithoutRef<T>} ComponentPropsWithoutRef<T>\n */\n\n/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('unist').Position} Position\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Text} Text\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').DocType} Doctype\n * @typedef {import('property-information').Info} Info\n * @typedef {import('property-information').Schema} Schema\n * @typedef {import('./complex-types').ReactMarkdownProps} ReactMarkdownProps\n *\n * @typedef Raw\n * @property {'raw'} type\n * @property {string} value\n *\n * @typedef Context\n * @property {Options} options\n * @property {Schema} schema\n * @property {number} listDepth\n *\n * @callback TransformLink\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {string}\n *\n * @callback TransformImage\n * @param {string} src\n * @param {string} alt\n * @param {string?} title\n * @returns {string}\n *\n * @typedef {import('react').HTMLAttributeAnchorTarget} TransformLinkTargetType\n *\n * @callback TransformLinkTarget\n * @param {string} href\n * @param {Array<ElementContent>} children\n * @param {string?} title\n * @returns {TransformLinkTargetType|undefined}\n *\n * @typedef {keyof JSX.IntrinsicElements} ReactMarkdownNames\n *\n * To do: is `data-sourcepos` typeable?\n *\n * @typedef {ComponentPropsWithoutRef<'code'> & ReactMarkdownProps & {inline?: boolean}} CodeProps\n * @typedef {ComponentPropsWithoutRef<'h1'> & ReactMarkdownProps & {level: number}} HeadingProps\n * @typedef {ComponentPropsWithoutRef<'li'> & ReactMarkdownProps & {checked: boolean|null, index: number, ordered: boolean}} LiProps\n * @typedef {ComponentPropsWithoutRef<'ol'> & ReactMarkdownProps & {depth: number, ordered: true}} OrderedListProps\n * @typedef {ComponentPropsWithoutRef<'table'> & ReactMarkdownProps & {style?: Record<string, unknown>, isHeader: boolean}} TableCellProps\n * @typedef {ComponentPropsWithoutRef<'tr'> & ReactMarkdownProps & {isHeader: boolean}} TableRowProps\n * @typedef {ComponentPropsWithoutRef<'ul'> & ReactMarkdownProps & {depth: number, ordered: false}} UnorderedListProps\n *\n * @typedef {ComponentType<CodeProps>} CodeComponent\n * @typedef {ComponentType<HeadingProps>} HeadingComponent\n * @typedef {ComponentType<LiProps>} LiComponent\n * @typedef {ComponentType<OrderedListProps>} OrderedListComponent\n * @typedef {ComponentType<TableCellProps>} TableCellComponent\n * @typedef {ComponentType<TableRowProps>} TableRowComponent\n * @typedef {ComponentType<UnorderedListProps>} UnorderedListComponent\n *\n * @typedef SpecialComponents\n * @property {CodeComponent|ReactMarkdownNames} code\n * @property {HeadingComponent|ReactMarkdownNames} h1\n * @property {HeadingComponent|ReactMarkdownNames} h2\n * @property {HeadingComponent|ReactMarkdownNames} h3\n * @property {HeadingComponent|ReactMarkdownNames} h4\n * @property {HeadingComponent|ReactMarkdownNames} h5\n * @property {HeadingComponent|ReactMarkdownNames} h6\n * @property {LiComponent|ReactMarkdownNames} li\n * @property {OrderedListComponent|ReactMarkdownNames} ol\n * @property {TableCellComponent|ReactMarkdownNames} td\n * @property {TableCellComponent|ReactMarkdownNames} th\n * @property {TableRowComponent|ReactMarkdownNames} tr\n * @property {UnorderedListComponent|ReactMarkdownNames} ul\n *\n * @typedef {Partial<Omit<import('./complex-types').NormalComponents, keyof SpecialComponents> & SpecialComponents>} Components\n *\n * @typedef Options\n * @property {boolean} [sourcePos=false]\n * @property {boolean} [rawSourcePos=false]\n * @property {boolean} [skipHtml=false]\n * @property {boolean} [includeElementIndex=false]\n * @property {null|false|TransformLink} [transformLinkUri]\n * @property {TransformImage} [transformImageUri]\n * @property {TransformLinkTargetType|TransformLinkTarget} [linkTarget]\n * @property {Components} [components]\n */\n\nimport React from 'react'\nimport ReactIs from 'react-is'\nimport {whitespace} from 'hast-util-whitespace'\nimport {svg, find, hastToReact} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport style from 'style-to-object'\n\nconst own = {}.hasOwnProperty\n\n// The table-related elements that must not contain whitespace text according\n// to React.\nconst tableElements = new Set(['table', 'thead', 'tbody', 'tfoot', 'tr'])\n\n/**\n * @param {Context} context\n * @param {Element|Root} node\n */\nexport function childrenToReact(context, node) {\n  /** @type {Array<ReactNode>} */\n  const children = []\n  let childIndex = -1\n  /** @type {Comment|Doctype|Element|Raw|Text} */\n  let child\n\n  while (++childIndex < node.children.length) {\n    child = node.children[childIndex]\n\n    if (child.type === 'element') {\n      children.push(toReact(context, child, childIndex, node))\n    } else if (child.type === 'text') {\n      // Currently, a warning is triggered by react for *any* white space in\n      // tables.\n      // So we drop it.\n      // See: <https://github.com/facebook/react/pull/7081>.\n      // See: <https://github.com/facebook/react/pull/7515>.\n      // See: <https://github.com/remarkjs/remark-react/issues/64>.\n      // See: <https://github.com/remarkjs/react-markdown/issues/576>.\n      if (\n        node.type !== 'element' ||\n        !tableElements.has(node.tagName) ||\n        !whitespace(child)\n      ) {\n        children.push(child.value)\n      }\n    } else if (child.type === 'raw' && !context.options.skipHtml) {\n      // Default behavior is to show (encoded) HTML.\n      children.push(child.value)\n    }\n  }\n\n  return children\n}\n\n/**\n * @param {Context} context\n * @param {Element} node\n * @param {number} index\n * @param {Element|Root} parent\n */\nfunction toReact(context, node, index, parent) {\n  const options = context.options\n  const parentSchema = context.schema\n  /** @type {ReactMarkdownNames} */\n  // @ts-expect-error assume a known HTML/SVG element.\n  const name = node.tagName\n  /** @type {Record<string, unknown>} */\n  const properties = {}\n  let schema = parentSchema\n  /** @type {string} */\n  let property\n\n  if (parentSchema.space === 'html' && name === 'svg') {\n    schema = svg\n    context.schema = schema\n  }\n\n  if (node.properties) {\n    for (property in node.properties) {\n      if (own.call(node.properties, property)) {\n        addProperty(properties, property, node.properties[property], context)\n      }\n    }\n  }\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth++\n  }\n\n  const children = childrenToReact(context, node)\n\n  if (name === 'ol' || name === 'ul') {\n    context.listDepth--\n  }\n\n  // Restore parent schema.\n  context.schema = parentSchema\n\n  // Nodes created by plugins do not have positional info, in which case we use\n  // an object that matches the position interface.\n  const position = node.position || {\n    start: {line: null, column: null, offset: null},\n    end: {line: null, column: null, offset: null}\n  }\n  const component =\n    options.components && own.call(options.components, name)\n      ? options.components[name]\n      : name\n  const basic = typeof component === 'string' || component === React.Fragment\n\n  if (!ReactIs.isValidElementType(component)) {\n    throw new TypeError(\n      `Component for name \\`${name}\\` not defined or is not renderable`\n    )\n  }\n\n  properties.key = [\n    name,\n    position.start.line,\n    position.start.column,\n    index\n  ].join('-')\n\n  if (name === 'a' && options.linkTarget) {\n    properties.target =\n      typeof options.linkTarget === 'function'\n        ? options.linkTarget(\n            String(properties.href || ''),\n            node.children,\n            typeof properties.title === 'string' ? properties.title : null\n          )\n        : options.linkTarget\n  }\n\n  if (name === 'a' && options.transformLinkUri) {\n    properties.href = options.transformLinkUri(\n      String(properties.href || ''),\n      node.children,\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (\n    !basic &&\n    name === 'code' &&\n    parent.type === 'element' &&\n    parent.tagName !== 'pre'\n  ) {\n    properties.inline = true\n  }\n\n  if (\n    !basic &&\n    (name === 'h1' ||\n      name === 'h2' ||\n      name === 'h3' ||\n      name === 'h4' ||\n      name === 'h5' ||\n      name === 'h6')\n  ) {\n    properties.level = Number.parseInt(name.charAt(1), 10)\n  }\n\n  if (name === 'img' && options.transformImageUri) {\n    properties.src = options.transformImageUri(\n      String(properties.src || ''),\n      String(properties.alt || ''),\n      typeof properties.title === 'string' ? properties.title : null\n    )\n  }\n\n  if (!basic && name === 'li' && parent.type === 'element') {\n    const input = getInputElement(node)\n    properties.checked =\n      input && input.properties ? Boolean(input.properties.checked) : null\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.ordered = parent.tagName === 'ol'\n  }\n\n  if (!basic && (name === 'ol' || name === 'ul')) {\n    properties.ordered = name === 'ol'\n    properties.depth = context.listDepth\n  }\n\n  if (name === 'td' || name === 'th') {\n    if (properties.align) {\n      if (!properties.style) properties.style = {}\n      // @ts-expect-error assume `style` is an object\n      properties.style.textAlign = properties.align\n      delete properties.align\n    }\n\n    if (!basic) {\n      properties.isHeader = name === 'th'\n    }\n  }\n\n  if (!basic && name === 'tr' && parent.type === 'element') {\n    properties.isHeader = Boolean(parent.tagName === 'thead')\n  }\n\n  // If `sourcePos` is given, pass source information (line/column info from markdown source).\n  if (options.sourcePos) {\n    properties['data-sourcepos'] = flattenPosition(position)\n  }\n\n  if (!basic && options.rawSourcePos) {\n    properties.sourcePosition = node.position\n  }\n\n  // If `includeElementIndex` is given, pass node index info to components.\n  if (!basic && options.includeElementIndex) {\n    properties.index = getElementsBeforeCount(parent, node)\n    properties.siblingCount = getElementsBeforeCount(parent)\n  }\n\n  if (!basic) {\n    properties.node = node\n  }\n\n  // Ensure no React warnings are emitted for void elements w/ children.\n  return children.length > 0\n    ? React.createElement(component, properties, children)\n    : React.createElement(component, properties)\n}\n\n/**\n * @param {Element|Root} node\n * @returns {Element?}\n */\nfunction getInputElement(node) {\n  let index = -1\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n\n    if (child.type === 'element' && child.tagName === 'input') {\n      return child\n    }\n  }\n\n  return null\n}\n\n/**\n * @param {Element|Root} parent\n * @param {Element} [node]\n * @returns {number}\n */\nfunction getElementsBeforeCount(parent, node) {\n  let index = -1\n  let count = 0\n\n  while (++index < parent.children.length) {\n    if (parent.children[index] === node) break\n    if (parent.children[index].type === 'element') count++\n  }\n\n  return count\n}\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string} prop\n * @param {unknown} value\n * @param {Context} ctx\n */\nfunction addProperty(props, prop, value, ctx) {\n  const info = find(ctx.schema, prop)\n  let result = value\n\n  // Ignore nullish and `NaN` values.\n  // eslint-disable-next-line no-self-compare\n  if (result === null || result === undefined || result !== result) {\n    return\n  }\n\n  // Accept `array`.\n  // Most props are space-separated.\n  if (Array.isArray(result)) {\n    result = info.commaSeparated ? commas(result) : spaces(result)\n  }\n\n  if (info.property === 'style' && typeof result === 'string') {\n    result = parseStyle(result)\n  }\n\n  if (info.space && info.property) {\n    props[\n      own.call(hastToReact, info.property)\n        ? hastToReact[info.property]\n        : info.property\n    ] = result\n  } else if (info.attribute) {\n    props[info.attribute] = result\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Record<string, string>}\n */\nfunction parseStyle(value) {\n  /** @type {Record<string, string>} */\n  const result = {}\n\n  try {\n    style(value, iterator)\n  } catch {\n    // Silent.\n  }\n\n  return result\n\n  /**\n   * @param {string} name\n   * @param {string} v\n   */\n  function iterator(name, v) {\n    const k = name.slice(0, 4) === '-ms-' ? `ms-${name.slice(4)}` : name\n    result[k.replace(/-([a-z])/g, styleReplacer)] = v\n  }\n}\n\n/**\n * @param {unknown} _\n * @param {string} $1\n */\nfunction styleReplacer(_, $1) {\n  return $1.toUpperCase()\n}\n\n/**\n * @param {Position|{start: {line: null, column: null, offset: null}, end: {line: null, column: null, offset: null}}} pos\n * @returns {string}\n */\nfunction flattenPosition(pos) {\n  return [\n    pos.start.line,\n    ':',\n    pos.start.column,\n    '-',\n    pos.end.line,\n    ':',\n    pos.end.column\n  ]\n    .map((d) => String(d))\n    .join('')\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('react').ReactElement<{}>} ReactElement\n * @typedef {import('unified').PluggableList} PluggableList\n * @typedef {import('hast').Root} Root\n * @typedef {import('./rehype-filter.js').Options} FilterOptions\n * @typedef {import('./ast-to-react.js').Options} TransformOptions\n *\n * @typedef CoreOptions\n * @property {string} children\n *\n * @typedef PluginOptions\n * @property {PluggableList} [plugins=[]] **deprecated**: use `remarkPlugins` instead\n * @property {PluggableList} [remarkPlugins=[]]\n * @property {PluggableList} [rehypePlugins=[]]\n *\n * @typedef LayoutOptions\n * @property {string} [className]\n *\n * @typedef {CoreOptions & PluginOptions & LayoutOptions & FilterOptions & TransformOptions} ReactMarkdownOptions\n *\n * @typedef Deprecation\n * @property {string} id\n * @property {string} [to]\n */\n\nimport React from 'react'\nimport {VFile} from 'vfile'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport PropTypes from 'prop-types'\nimport {html} from 'property-information'\nimport rehypeFilter from './rehype-filter.js'\nimport {uriTransformer} from './uri-transformer.js'\nimport {childrenToReact} from './ast-to-react.js'\n\nconst own = {}.hasOwnProperty\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {Record<string, Deprecation>} */\nconst deprecated = {\n  renderers: {to: 'components', id: 'change-renderers-to-components'},\n  astPlugins: {id: 'remove-buggy-html-in-markdown-parser'},\n  allowDangerousHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  escapeHtml: {id: 'remove-buggy-html-in-markdown-parser'},\n  source: {to: 'children', id: 'change-source-to-children'},\n  allowNode: {\n    to: 'allowElement',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  allowedTypes: {\n    to: 'allowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  disallowedTypes: {\n    to: 'disallowedElements',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes'\n  },\n  includeNodeIndex: {\n    to: 'includeElementIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  }\n}\n\n/**\n * React component to render markdown.\n *\n * @param {ReactMarkdownOptions} options\n * @returns {ReactElement}\n */\nexport function ReactMarkdown(options) {\n  for (const key in deprecated) {\n    if (own.call(deprecated, key) && own.call(options, key)) {\n      const deprecation = deprecated[key]\n      console.warn(\n        `[react-markdown] Warning: please ${\n          deprecation.to ? `use \\`${deprecation.to}\\` instead of` : 'remove'\n        } \\`${key}\\` (see <${changelog}#${deprecation.id}> for more info)`\n      )\n      delete deprecated[key]\n    }\n  }\n\n  const processor = unified()\n    .use(remarkParse)\n    // TODO: deprecate `plugins` in v8.0.0.\n    .use(options.remarkPlugins || options.plugins || [])\n    .use(remarkRehype, {allowDangerousHtml: true})\n    .use(options.rehypePlugins || [])\n    .use(rehypeFilter, options)\n\n  const file = new VFile()\n\n  if (typeof options.children === 'string') {\n    file.value = options.children\n  } else if (options.children !== undefined && options.children !== null) {\n    console.warn(\n      `[react-markdown] Warning: please pass a string as \\`children\\` (not: \\`${options.children}\\`)`\n    )\n  }\n\n  const hastNode = processor.runSync(processor.parse(file), file)\n\n  if (hastNode.type !== 'root') {\n    throw new TypeError('Expected a `root` node')\n  }\n\n  /** @type {ReactElement} */\n  let result = React.createElement(\n    React.Fragment,\n    {},\n    childrenToReact({options, schema: html, listDepth: 0}, hastNode)\n  )\n\n  if (options.className) {\n    result = React.createElement('div', {className: options.className}, result)\n  }\n\n  return result\n}\n\nReactMarkdown.defaultProps = {transformLinkUri: uriTransformer}\n\nReactMarkdown.propTypes = {\n  // Core options:\n  children: PropTypes.string,\n  // Layout options:\n  className: PropTypes.string,\n  // Filter options:\n  allowElement: PropTypes.func,\n  allowedElements: PropTypes.arrayOf(PropTypes.string),\n  disallowedElements: PropTypes.arrayOf(PropTypes.string),\n  unwrapDisallowed: PropTypes.bool,\n  // Plugin options:\n  remarkPlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))\n    ])\n  ),\n  rehypePlugins: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.func,\n      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.func]))\n    ])\n  ),\n  // Transform options:\n  sourcePos: PropTypes.bool,\n  rawSourcePos: PropTypes.bool,\n  skipHtml: PropTypes.bool,\n  includeElementIndex: PropTypes.bool,\n  transformLinkUri: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  linkTarget: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  transformImageUri: PropTypes.func,\n  components: PropTypes.object\n}\n"],"names":["hasOwn","Object","prototype","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","options","name","enumerable","configurable","value","newValue","writable","getProperty","module","exports","extend","src","copy","copyIsArray","clone","arguments","i","length","deep","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","style","TypeError","lineno","column","updatePosition","lines","match","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","decl","decls","declarations","isBuffer","encodeCache","encode","string","exclude","keepEscaped","l","code","nextCode","cache","result","defaultChars","ch","String","fromCharCode","test","toUpperCase","charCodeAt","getEncodeCache","encodeURIComponent","componentChars","b","d","e","f","g","h","k","n","p","q","r","u","v","w","Symbol","for","x","y","a","t","$$typeof","z","A","B","C","D","E","F","G","H","I","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","parse","require","iterator","output","hasIterator","len","_construct","Parent","args","Class","isNativeReflectConstruct","Reflect","construct","bind","apply","instance","Function","setPrototypeOf","_wrapNativeSuper","_cache","Map","undefined","fn","indexOf","has","get","set","Wrapper","getPrototypeOf","create","stringifyPosition","point","index","VFileMessage","_Error","_inherits","_super","_createSuper","place","origin","_this","_classCallCheck","parts","message","stack","fatal","ruleId","file","actual","expected","url","note","_createClass","path","basename","ext","assertPath","seenNonSlash","firstNonSlashEnd","extIndex","dirname","unmatchedSlash","extname","startPart","startDot","preDotState","join","joined","_len","segments","_key","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","normalize","sep","JSON","stringify","proc","cwd","isUrl","fileUrlOrPath","href","urlToPath","URL","protocol","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","order","VFile","bufferLike","buffer","data","messages","history","stored","map","_toConsumableArray","includes","assertNonEmpty","assertPart","stem","encoding","part","_toArray","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","bail","toStringTag","trough","fns","pipeline","run","values","middlewareIndex","callback","pop","next","_len2","_key2","middleware","called","wrapped","_len3","parameters","_key3","fnExpectsCallback","done","Promise","then","_len4","_key4","concat","wrap","use","middelware","unified","base","frozen","transformers","attachers","namespace","freezeIndex","processor","assertUnfrozen","own","Parser","Compiler","freeze","_attachers$freezeInde","attacher","transformer","Number","POSITIVE_INFINITY","settings","addPlugin","addList","addPreset","assign","add","_value","plugin","plugins","entry","isPlainObj","doc","vfile","assertParser","newable","assertCompiler","assertNode","compile","executor","resolve","reject","tree","runSync","complete","assertDone","process","processSync","destination","keys","asyncName","Boolean","looksLikeAVFile","emptyOptions","one","includeImageAlt","includeHtml","alt","all","children","splice","list","remove","items","chunkStart","from","unshift","syntaxExtension","extension","hook","left","right","constructs","existing","before","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","factorySpace","effects","ok","max","limit","size","enter","prefix","consume","exit","tokenize","previous","contentStart","attempt","parser","contentInitial","lineStart","token","contentType","document","childFlow","childToken","lineStartOffset","self","continued","item","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","events","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","check","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","offset","containerContinue","flow","_tokenizer","flowContinue","writeToChild","eof","stream","sliceStream","defineSkip","write","seen","nok","disable","null","blankLine","after","partial","subtokenize","event","lineIndex","otherIndex","otherEvent","subevents","more","jumps","_isInFirstContentOfListItem","subcontent","_container","eventIndex","context","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","_gfmTasklistFirstContentOfListItem","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","initial","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","text","field","notText","atBreak","resolveAllLineSuffixes","extraResolver","chunks","bufferIndex","tabs","chunk","_index","_bufferIndex","createTokenizer","initialize","columnStart","resolveAllConstructs","accountForPotentialSkip","fields","constructFactory","info","addResult","onsuccessfulcheck","expandTabs","atTab","serializeChunks","main","state","view","startIndex","startBufferIndex","endIndex","endBufferIndex","head","shift","sliceChunks","_point","chunkIndex","go","_","restore","onreturn","returnState","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","def","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","resolveTo","thematicBreak","marker","sequence","initialSize","kind","atMarker","inside","onBlank","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","initialBlankLine","notBlank","furtherBlankLines","notInCurrentItem","indentConstruct","blockQuote","open","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","normalizeIdentifier","toLowerCase","definition","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","defined","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","paragraph","heading","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","element","createElement","decodeNamedCharacterReference","characterReference","innerHTML","char","textContent","numeric","characterEscape","lineEnding","labelEnd","labelStart","_balanced","_inactive","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","close","media","group","label","insideSpan","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","attentionMarkers","_open","_close","openingSequence","closingSequence","nextEvents","movePoint","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","between","tailExitIndex","headEnterIndex","_document","_defineProperty","_flowInitial","_flow","_string","_text","resolveText","extensions","combineExtensions","defaultConstructs","search","decodeNumericCharacterReference","parseInt","characterEscapeOrReference","decode","$0","$1","$2","hex","fromMarkdown","config","transforms","canContainEols","opener","link","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","html","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","resource","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","tokenStack","resume","setData","getData","listStack","prepareList","handler","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","lang","title","depth","referenceType","ancestor","decodeString","fragment","ordered","spread","checked","compiler","postprocess","atCarriageReturn","endPosition","lastIndex","Math","ceil","preprocess","combined","_combined$key","_combined$key2","remarkParse","props","convert","castFactory","typeFactory","anyFactory","propsFactory","tests","checks","_checks$index","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","parent","pointStart","pointEnd","clean","unknown","augment","handlers","passThrough","returnNode","unknownHandler","_objectSpread","nodes","loose","properties","className","footnoteReference","footnoteOrder","id","role","revert","subtype","suffix","contents","listItemLoose","blockquote","break","delete","footnote","footnoteById","no","dangerous","imageReference","inlineCode","linkReference","listLoose","disabled","child","root","table","rows","align","row","out","cell","toml","ignore","yaml","footnoteDefinition","allowDangerousHtml","definitions","hName","hProperties","hChildren","ctx","generated","toHast","foot","listItems","backReference","footer","bridge","mutate","Schema","normal","space","merge","Info","attribute","boolean","booleanish","overloadedBoolean","number","commaSeparated","spaceSeparated","commaOrSpaceSeparated","mustUseProperty","powers","increment","pow","types","DefinedInfo","_Info","mask","mark","_assertThisInitialized","transform","attributes","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xml","xmlLang","xmlBase","xmlSpace","caseSensitiveTransform","caseInsensitiveTransform","xmlns","xmlnsxlink","xmlnsXLink","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","capture","charSet","cite","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","dateTime","decoding","default","defer","dir","dirName","download","draggable","encType","enterKeyHint","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","hrefLang","htmlFor","httpEquiv","imageSizes","imageSrcSet","inputMode","integrity","isMap","itemId","itemProp","itemRef","itemScope","itemType","language","loading","loop","low","manifest","maxLength","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","optimum","pattern","ping","placeholder","playsInline","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rowSpan","sandbox","scope","scoped","seamless","selected","shape","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","tabIndex","translate","typeMustMatch","useMap","width","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","charOff","classId","clear","codeBase","codeType","color","compact","declare","face","frame","frameBorder","hSpace","leftMargin","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","opacity","operator","orient","orientation","overflow","overlay","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","restart","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x1","x2","xChannelSelector","y1","y2","yChannelSelector","zoomAndPan","htmlBase","svgBase","rehypeFilter","allowedElements","disallowedElements","allowElement","parent_","_parent$children","unwrapDisallowed","protocols","thing","valid","dash","cap","kebab","camelcase","hastToReact","tableElements","Set","childrenToReact","childIndex","toReact","skipHtml","parentSchema","schema","addProperty","listDepth","component","components","basic","React","ReactIs","linkTarget","transformLinkUri","inline","level","transformImageUri","input","getInputElement","getElementsBeforeCount","textAlign","isHeader","sourcePos","rawSourcePos","sourcePosition","includeElementIndex","siblingCount","count","Type","rest","dashes","find","padRight","padLeft","commas","_unused","styleReplacer","parseStyle","changelog","deprecated","renderers","astPlugins","escapeHtml","allowNode","allowedTypes","disallowedTypes","includeNodeIndex","ReactMarkdown","deprecation","console","warn","remarkPlugins","remarkRehype","rehypePlugins","hastNode","defaultProps","uri","first","colon","propTypes","PropTypes"],"sourceRoot":""}