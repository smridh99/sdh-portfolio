{"ast":null,"code":"/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport { toHast } from 'mdast-util-to-hast';\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin to bridge or mutate to rehype.\n *\n * If a destination is given, runs the destination with the new hast tree\n * (bridge-mode).\n * Without destination, returns the hast tree: further plugins run on that tree\n * (mutate-mode).\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nvar remarkRehype = /** @type {(import('unified').Plugin<[Processor, Options?]|[Options]|[], MdastRoot>)} */\n\nfunction remarkRehype(destination, options) {\n  return destination && 'run' in destination ? bridge(destination, options) : mutate(destination);\n};\nexport default remarkRehype;\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return function (node, file, next) {\n    destination.run(toHast(node, options), file, function (error) {\n      next(error);\n    });\n  };\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the nlcst tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned for `toHast`.\n  return function (node) {\n    return toHast(node, options);\n  };\n}","map":{"version":3,"names":["toHast","remarkRehype","destination","options","bridge","mutate","node","file","next","run","error"],"sources":["/Users/smridh/myportfolio/node_modules/remark-rehype/index.js"],"sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('mdast-util-to-hast').Options} Options\n * @typedef {import('unified').Processor<any, any, any, any>} Processor\n *\n * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n// Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(\n\n/**\n * Plugin to bridge or mutate to rehype.\n *\n * If a destination is given, runs the destination with the new hast tree\n * (bridge-mode).\n * Without destination, returns the hast tree: further plugins run on that tree\n * (mutate-mode).\n *\n * @param destination\n *   Optional unified processor.\n * @param options\n *   Options passed to `mdast-util-to-hast`.\n */\nconst remarkRehype =\n  /** @type {(import('unified').Plugin<[Processor, Options?]|[Options]|[], MdastRoot>)} */\n  (\n    function (destination, options) {\n      return destination && 'run' in destination\n        ? bridge(destination, options)\n        : mutate(destination)\n    }\n  )\n\nexport default remarkRehype\n\n/**\n * Bridge-mode.\n * Runs the destination with the new hast tree.\n *\n * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}\n */\nfunction bridge(destination, options) {\n  return (node, file, next) => {\n    destination.run(toHast(node, options), file, (error) => {\n      next(error)\n    })\n  }\n}\n\n/**\n * Mutate-mode.\n * Further transformers run on the nlcst tree.\n *\n * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}\n */\nfunction mutate(options) {\n  // @ts-expect-error: assume a corresponding node is returned for `toHast`.\n  return (node) => toHast(node, options)\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,MAAM,QAAO,oBAAoB;;AAEzC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,YAAY,GAChB;;AAEE,SAHEA,YAAYA,CAGJC,WAAW,EAAEC,OAAO,EAAE;EAC9B,OAAOD,WAAW,IAAI,KAAK,IAAIA,WAAW,GACtCE,MAAM,CAACF,WAAW,EAAEC,OAAO,CAAC,GAC5BE,MAAM,CAACH,WAAW,CAAC;AACzB,CACD;AAEH,eAAeD,YAAY;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,MAAMA,CAACF,WAAW,EAAEC,OAAO,EAAE;EACpC,OAAO,UAACG,IAAI,EAAEC,IAAI,EAAEC,IAAI,EAAK;IAC3BN,WAAW,CAACO,GAAG,CAACT,MAAM,CAACM,IAAI,EAAEH,OAAO,CAAC,EAAEI,IAAI,EAAE,UAACG,KAAK,EAAK;MACtDF,IAAI,CAACE,KAAK,CAAC;IACb,CAAC,CAAC;EACJ,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,MAAMA,CAACF,OAAO,EAAE;EACvB;EACA,OAAO,UAACG,IAAI;IAAA,OAAKN,MAAM,CAACM,IAAI,EAAEH,OAAO,CAAC;EAAA;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}